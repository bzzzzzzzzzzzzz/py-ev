{
  "abi": [
    {
      "inputs": [],
      "name": "UMBRAL_PARAMETER_U_SIGN",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UMBRAL_PARAMETER_U_XCOORD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UMBRAL_PARAMETER_U_YCOORD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_capsuleBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_cFragBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_precomputedBytes",
          "type": "bytes"
        }
      ],
      "name": "validateCFrag",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/ReEncryptionValidator.sol",
    "2": "contracts/UmbralDeserializer.sol"
  },
  "ast": {
    "absolutePath": "contracts/ReEncryptionValidator.sol",
    "exportedSymbols": {
      "ReEncryptionValidator": [
        1110
      ],
      "SignatureVerifier": [
        1447
      ],
      "UmbralDeserializer": [
        2311
      ]
    },
    "id": 1111,
    "license": "AGPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "47:23:0"
      },
      {
        "absolutePath": "contracts/UmbralDeserializer.sol",
        "file": "./UmbralDeserializer.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 1111,
        "sourceUnit": 2312,
        "src": "72:34:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/SignatureVerifier.sol",
        "file": "./SignatureVerifier.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 1111,
        "sourceUnit": 1448,
        "src": "107:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 4,
          "nodeType": "StructuredDocumentation",
          "src": "142:53:0",
          "text": " @notice Validates re-encryption correctness."
        },
        "fullyImplemented": true,
        "id": 1110,
        "linearizedBaseContracts": [
          1110
        ],
        "name": "ReEncryptionValidator",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 7,
            "libraryName": {
              "id": 5,
              "name": "UmbralDeserializer",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2311,
              "src": "239:18:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UmbralDeserializer_$2311",
                "typeString": "library UmbralDeserializer"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "233:35:0",
            "typeName": {
              "id": 6,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "262:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            }
          },
          {
            "constant": true,
            "functionSelector": "c5f1f5ca",
            "id": 10,
            "mutability": "constant",
            "name": "UMBRAL_PARAMETER_U_SIGN",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "531:52:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 8,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "531:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "30783032",
              "id": 9,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "579:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "0x02"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "055a80e7",
            "id": 13,
            "mutability": "constant",
            "name": "UMBRAL_PARAMETER_U_XCOORD",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "589:118:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 11,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "589:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307830336339383739353737336666316332343166633062316363656438356538306638333636353831646461356339343532313735656264343133383566613166",
              "id": 12,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "641:66:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1713010571117592443703301994495899285680614545519653934856335123335298284063_by_1",
                "typeString": "int_const 1713...(68 digits omitted)...4063"
              },
              "value": "0x03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "4b4b4b12",
            "id": 16,
            "mutability": "constant",
            "name": "UMBRAL_PARAMETER_U_YCOORD",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "713:118:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "713:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307837383830656435363936326437633061653434643666313462623533623566653634623331656134346134316430333136663361353938373738663066393336",
              "id": 15,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "765:66:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_54505336302538757542798113150942316789340716935269222893797267769171758872886_by_1",
                "typeString": "int_const 5450...(69 digits omitted)...2886"
              },
              "value": "0x7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f936"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 19,
            "mutability": "constant",
            "name": "FIELD_ORDER",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "981:97:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "981:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646454646464646433246",
              "id": 18,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1012:66:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007908834671663_by_1",
                "typeString": "int_const 1157...(70 digits omitted)...1663"
              },
              "value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 22,
            "mutability": "constant",
            "name": "MINUS_2",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "1111:93:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 20,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1111:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307866666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666656666666666633264",
              "id": 21,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1138:66:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007908834671661_by_1",
                "typeString": "int_const 1157...(70 digits omitted)...1661"
              },
              "value": "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 25,
            "mutability": "constant",
            "name": "MINUS_ONE_HALF",
            "nodeType": "VariableDeclaration",
            "scope": 1110,
            "src": "1241:100:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 23,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1241:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663766666666653137",
              "id": 24,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1275:66:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003954417335831_by_1",
                "typeString": "int_const 5789...(69 digits omitted)...5831"
              },
              "value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe17"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 370,
              "nodeType": "Block",
              "src": "1731:8103:0",
              "statements": [
                {
                  "assignments": [
                    40
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 40,
                      "mutability": "mutable",
                      "name": "_capsule",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "1741:42:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                        "typeString": "struct UmbralDeserializer.Capsule"
                      },
                      "typeName": {
                        "id": 39,
                        "name": "UmbralDeserializer.Capsule",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1462,
                        "src": "1741:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Capsule_$1462_storage_ptr",
                          "typeString": "struct UmbralDeserializer.Capsule"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 41,
                        "name": "_capsuleBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28,
                        "src": "1786:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toCapsule",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1633,
                      "src": "1786:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_Capsule_$1462_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (struct UmbralDeserializer.Capsule memory)"
                      }
                    },
                    "id": 43,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1786:25:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                      "typeString": "struct UmbralDeserializer.Capsule memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1741:70:0"
                },
                {
                  "assignments": [
                    48
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48,
                      "mutability": "mutable",
                      "name": "_cFrag",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "1821:44:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                        "typeString": "struct UmbralDeserializer.CapsuleFrag"
                      },
                      "typeName": {
                        "id": 47,
                        "name": "UmbralDeserializer.CapsuleFrag",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1488,
                        "src": "1821:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CapsuleFrag_$1488_storage_ptr",
                          "typeString": "struct UmbralDeserializer.CapsuleFrag"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 52,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 49,
                        "name": "_cFragBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "1868:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 50,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toCapsuleFrag",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1834,
                      "src": "1868:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_CapsuleFrag_$1488_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (struct UmbralDeserializer.CapsuleFrag memory)"
                      }
                    },
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1868:27:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                      "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1821:74:0"
                },
                {
                  "assignments": [
                    56
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 56,
                      "mutability": "mutable",
                      "name": "_precomputed",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "1905:54:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                        "typeString": "struct UmbralDeserializer.PreComputedData"
                      },
                      "typeName": {
                        "id": 55,
                        "name": "UmbralDeserializer.PreComputedData",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1535,
                        "src": "1905:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PreComputedData_$1535_storage_ptr",
                          "typeString": "struct UmbralDeserializer.PreComputedData"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 60,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 57,
                        "name": "_precomputedBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32,
                        "src": "1962:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toPreComputedData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2213,
                      "src": "1962:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_struct$_PreComputedData_$1535_memory_ptr_$bound_to$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) pure returns (struct UmbralDeserializer.PreComputedData memory)"
                      }
                    },
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1962:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1905:94:0"
                },
                {
                  "assignments": [
                    62
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 62,
                      "mutability": "mutable",
                      "name": "h",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "2495:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2495:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 67,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 64,
                        "name": "_capsule",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40,
                        "src": "2535:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                          "typeString": "struct UmbralDeserializer.Capsule memory"
                        }
                      },
                      {
                        "id": 65,
                        "name": "_cFrag",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48,
                        "src": "2545:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                          "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                          "typeString": "struct UmbralDeserializer.Capsule memory"
                        },
                        {
                          "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                          "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                        }
                      ],
                      "id": 63,
                      "name": "computeProofChallengeScalar",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 476,
                      "src": "2507:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Capsule_$1462_memory_ptr_$_t_struct$_CapsuleFrag_$1488_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (struct UmbralDeserializer.Capsule memory,struct UmbralDeserializer.CapsuleFrag memory) pure returns (uint256)"
                      }
                    },
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2507:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2495:57:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 70,
                                "name": "_capsule",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "2721:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.Capsule memory"
                                }
                              },
                              "id": 71,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointE",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1457,
                              "src": "2721:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 72,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "2721:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "id": 73,
                                "name": "_capsule",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "2755:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.Capsule memory"
                                }
                              },
                              "id": 74,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointE",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1457,
                              "src": "2755:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "2755:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 76,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "2791:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 77,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointEyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1490,
                            "src": "2791:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 69,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "2687:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2687:130:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f66204520646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564204520706f696e74",
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2831:72:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_833073f32a8eee6ff256bbdafc6c2ee0c5e27f625ed6053e6a2bf8ee9a95997d",
                          "typeString": "literal_string \"Precomputed Y coordinate of E doesn't correspond to compressed E point\""
                        },
                        "value": "Precomputed Y coordinate of E doesn't correspond to compressed E point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_833073f32a8eee6ff256bbdafc6c2ee0c5e27f625ed6053e6a2bf8ee9a95997d",
                          "typeString": "literal_string \"Precomputed Y coordinate of E doesn't correspond to compressed E point\""
                        }
                      ],
                      "id": 68,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2679:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 80,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2679:234:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 81,
                  "nodeType": "ExpressionStatement",
                  "src": "2679:234:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 84,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "2975:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 85,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointEZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1492,
                            "src": "2975:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 86,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "3003:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 87,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointEZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1494,
                            "src": "3003:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 83,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "2965:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2965:65:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e74207a45206973206e6f7420612076616c696420454320706f696e74",
                        "id": 89,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3048:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4698d155f16f4a58f98310384ac8db85354c3ed56f4e7bed53690caecab43748",
                          "typeString": "literal_string \"Point zE is not a valid EC point\""
                        },
                        "value": "Point zE is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4698d155f16f4a58f98310384ac8db85354c3ed56f4e7bed53690caecab43748",
                          "typeString": "literal_string \"Point zE is not a valid EC point\""
                        }
                      ],
                      "id": 82,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2957:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2957:135:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 91,
                  "nodeType": "ExpressionStatement",
                  "src": "2957:135:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 94,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "3863:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 95,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointE1HxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1498,
                            "src": "3863:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 96,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "3892:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 97,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointE1HyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1500,
                            "src": "3892:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 93,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "3853:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 98,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3853:67:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e7420682a4531206973206e6f7420612076616c696420454320706f696e74",
                        "id": 99,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3938:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cb0b1e479d3c0b4409246089bc842d082f1621dd315dcaf03381e9301884582a",
                          "typeString": "literal_string \"Point h*E1 is not a valid EC point\""
                        },
                        "value": "Point h*E1 is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_cb0b1e479d3c0b4409246089bc842d082f1621dd315dcaf03381e9301884582a",
                          "typeString": "literal_string \"Point h*E1 is not a valid EC point\""
                        }
                      ],
                      "id": 92,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3845:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3845:139:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101,
                  "nodeType": "ExpressionStatement",
                  "src": "3845:139:0"
                },
                {
                  "assignments": [
                    103
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 103,
                      "mutability": "mutable",
                      "name": "equation_holds",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "4686:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 102,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4686:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 125,
                  "initialValue": {
                    "arguments": [
                      {
                        "components": [
                          {
                            "expression": {
                              "id": 105,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "4739:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 106,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointEZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1492,
                            "src": "4739:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 107,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "4768:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 108,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointEZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1494,
                            "src": "4768:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 109,
                        "isConstant": false,
                        "isInlineArray": true,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "4738:57:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "components": [
                              {
                                "expression": {
                                  "expression": {
                                    "expression": {
                                      "id": 111,
                                      "name": "_cFrag",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 48,
                                      "src": "4845:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                        "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                      }
                                    },
                                    "id": 112,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "proof",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1487,
                                    "src": "4845:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                    }
                                  },
                                  "id": 113,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointE2",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1464,
                                  "src": "4845:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.Point memory"
                                  }
                                },
                                "id": 114,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "xCoord",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1454,
                                "src": "4845:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 115,
                                  "name": "_precomputed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 56,
                                  "src": "4874:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                  }
                                },
                                "id": 116,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "pointE2yCoord",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1502,
                                "src": "4874:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 117,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4844:57:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "expression": {
                                  "id": 118,
                                  "name": "_precomputed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 56,
                                  "src": "4920:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                  }
                                },
                                "id": 119,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "pointE1HxCoord",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1498,
                                "src": "4920:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "expression": {
                                  "id": 120,
                                  "name": "_precomputed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 56,
                                  "src": "4949:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                  }
                                },
                                "id": 121,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "pointE1HyCoord",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1500,
                                "src": "4949:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 122,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4919:58:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          ],
                          "id": 110,
                          "name": "addAffineJacobian",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 976,
                          "src": "4809:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_array$_t_uint256_$3_memory_ptr_$",
                            "typeString": "function (uint256[2] memory,uint256[2] memory) pure returns (uint256[3] memory)"
                          }
                        },
                        "id": 123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4809:182:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      ],
                      "id": 104,
                      "name": "eqAffineJacobian",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 811,
                      "src": "4708:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (uint256[2] memory,uint256[3] memory) pure returns (bool)"
                      }
                    },
                    "id": 124,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4708:293:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4686:315:0"
                },
                {
                  "condition": {
                    "id": 127,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5016:15:0",
                    "subExpression": {
                      "id": 126,
                      "name": "equation_holds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 103,
                      "src": "5017:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 131,
                  "nodeType": "IfStatement",
                  "src": "5012:57:0",
                  "trueBody": {
                    "id": 130,
                    "nodeType": "Block",
                    "src": "5032:37:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5053:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 36,
                        "id": 129,
                        "nodeType": "Return",
                        "src": "5046:12:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 134,
                                "name": "_capsule",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "5237:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.Capsule memory"
                                }
                              },
                              "id": 135,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1459,
                              "src": "5237:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 136,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "5237:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "id": 137,
                                "name": "_capsule",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "5271:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.Capsule memory"
                                }
                              },
                              "id": 138,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1459,
                              "src": "5271:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 139,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "5271:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 140,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5307:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 141,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1504,
                            "src": "5307:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 133,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "5203:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5203:130:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f66205620646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564205620706f696e74",
                        "id": 143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5347:72:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_842bb98a7ab9f1e52188329456fa224598d8cf26c22fd60cf567b2273b158977",
                          "typeString": "literal_string \"Precomputed Y coordinate of V doesn't correspond to compressed V point\""
                        },
                        "value": "Precomputed Y coordinate of V doesn't correspond to compressed V point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_842bb98a7ab9f1e52188329456fa224598d8cf26c22fd60cf567b2273b158977",
                          "typeString": "literal_string \"Precomputed Y coordinate of V doesn't correspond to compressed V point\""
                        }
                      ],
                      "id": 132,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5195:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 144,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5195:234:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 145,
                  "nodeType": "ExpressionStatement",
                  "src": "5195:234:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 148,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5491:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 149,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1506,
                            "src": "5491:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 150,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5519:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 151,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1508,
                            "src": "5519:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 147,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "5481:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5481:65:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e74207a56206973206e6f7420612076616c696420454320706f696e74",
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5564:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8af56b0b93c5f917a3485d1609b57c164aa5059f397527d24467567922c6bbc1",
                          "typeString": "literal_string \"Point zV is not a valid EC point\""
                        },
                        "value": "Point zV is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8af56b0b93c5f917a3485d1609b57c164aa5059f397527d24467567922c6bbc1",
                          "typeString": "literal_string \"Point zV is not a valid EC point\""
                        }
                      ],
                      "id": 146,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5473:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5473:135:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "5473:135:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 158,
                                "name": "_capsule",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 40,
                                "src": "5651:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.Capsule memory"
                                }
                              },
                              "id": 159,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1459,
                              "src": "5651:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 160,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "5651:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 161,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5702:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 162,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1504,
                            "src": "5702:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "id": 163,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "5753:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 164,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "5753:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 165,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "bnSig",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1472,
                            "src": "5753:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 166,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5802:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 167,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1506,
                            "src": "5802:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 168,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "5854:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 169,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointVZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1508,
                            "src": "5854:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 157,
                          "name": "ecmulVerify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 743,
                          "src": "5626:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 170,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5626:255:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564207a2a562076616c756520697320696e636f7272656374",
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5906:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5fbfed76ebaea013c807060e33040afea8138953cdbf548145aca34ecdad2daf",
                          "typeString": "literal_string \"Precomputed z*V value is incorrect\""
                        },
                        "value": "Precomputed z*V value is incorrect"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5fbfed76ebaea013c807060e33040afea8138953cdbf548145aca34ecdad2daf",
                          "typeString": "literal_string \"Precomputed z*V value is incorrect\""
                        }
                      ],
                      "id": 156,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5618:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5618:334:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 173,
                  "nodeType": "ExpressionStatement",
                  "src": "5618:334:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 176,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "6037:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 177,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1481,
                              "src": "6037:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 178,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "6037:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "id": 179,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "6089:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 180,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1481,
                              "src": "6089:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 181,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "6089:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 182,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6138:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 183,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1510,
                            "src": "6138:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 175,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "6003:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6003:162:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f6620563120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563120706f696e74",
                        "id": 185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6187:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9d8717762dd51a4d1118fd52666b671084fac1de996462b0e10dd20de671f94c",
                          "typeString": "literal_string \"Precomputed Y coordinate of V1 doesn't correspond to compressed V1 point\""
                        },
                        "value": "Precomputed Y coordinate of V1 doesn't correspond to compressed V1 point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9d8717762dd51a4d1118fd52666b671084fac1de996462b0e10dd20de671f94c",
                          "typeString": "literal_string \"Precomputed Y coordinate of V1 doesn't correspond to compressed V1 point\""
                        }
                      ],
                      "id": 174,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5995:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 186,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5995:276:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 187,
                  "nodeType": "ExpressionStatement",
                  "src": "5995:276:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 190,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6334:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 191,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1HxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1512,
                            "src": "6334:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 192,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6363:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 193,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1HyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1514,
                            "src": "6363:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 189,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "6324:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6324:67:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e7420682a5631206973206e6f7420612076616c696420454320706f696e74",
                        "id": 195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6405:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ee6efe41ca27d31d15df0f653b98d6c54c91e10d5b3c224e3d43a2314a1b928f",
                          "typeString": "literal_string \"Point h*V1 is not a valid EC point\""
                        },
                        "value": "Point h*V1 is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ee6efe41ca27d31d15df0f653b98d6c54c91e10d5b3c224e3d43a2314a1b928f",
                          "typeString": "literal_string \"Point h*V1 is not a valid EC point\""
                        }
                      ],
                      "id": 188,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6316:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 196,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6316:135:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 197,
                  "nodeType": "ExpressionStatement",
                  "src": "6316:135:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "id": 200,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "6494:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 201,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV1",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1481,
                              "src": "6494:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 202,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "6494:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 203,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6546:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1510,
                            "src": "6546:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 205,
                            "name": "h",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "6598:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 206,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6613:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 207,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1HxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1512,
                            "src": "6613:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 208,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6667:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 209,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1HyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1514,
                            "src": "6667:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 199,
                          "name": "ecmulVerify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 743,
                          "src": "6469:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 210,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6469:226:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d707574656420682a56312076616c756520697320696e636f7272656374",
                        "id": 211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6721:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f412593cda7cd44de0d194725a9aba9a275fed1afc534761496d7090e5ea9403",
                          "typeString": "literal_string \"Precomputed h*V1 value is incorrect\""
                        },
                        "value": "Precomputed h*V1 value is incorrect"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f412593cda7cd44de0d194725a9aba9a275fed1afc534761496d7090e5ea9403",
                          "typeString": "literal_string \"Precomputed h*V1 value is incorrect\""
                        }
                      ],
                      "id": 198,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6461:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 212,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6461:307:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 213,
                  "nodeType": "ExpressionStatement",
                  "src": "6461:307:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 216,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "6853:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 217,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "6853:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 218,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV2",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1466,
                              "src": "6853:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 219,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "6853:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 220,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "6910:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 221,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "6910:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 222,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointV2",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1466,
                              "src": "6910:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "6910:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 224,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "6964:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 225,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV2yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1516,
                            "src": "6964:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 215,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "6819:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6819:172:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f6620563220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563220706f696e74",
                        "id": 227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7018:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_67237a72c5a11b386634b926983e4c658df979279a85869ac6efeb6ddc3f13d7",
                          "typeString": "literal_string \"Precomputed Y coordinate of V2 doesn't correspond to compressed V2 point\""
                        },
                        "value": "Precomputed Y coordinate of V2 doesn't correspond to compressed V2 point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_67237a72c5a11b386634b926983e4c658df979279a85869ac6efeb6ddc3f13d7",
                          "typeString": "literal_string \"Precomputed Y coordinate of V2 doesn't correspond to compressed V2 point\""
                        }
                      ],
                      "id": 214,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6811:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6811:291:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 229,
                  "nodeType": "ExpressionStatement",
                  "src": "6811:291:0"
                },
                {
                  "expression": {
                    "id": 252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 230,
                      "name": "equation_holds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 103,
                      "src": "7113:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "components": [
                            {
                              "expression": {
                                "id": 232,
                                "name": "_precomputed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "7161:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                }
                              },
                              "id": 233,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointVZxCoord",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1506,
                              "src": "7161:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 234,
                                "name": "_precomputed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "7190:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                }
                              },
                              "id": 235,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointVZyCoord",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1508,
                              "src": "7190:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 236,
                          "isConstant": false,
                          "isInlineArray": true,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7160:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                            "typeString": "uint256[2] memory"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "components": [
                                {
                                  "expression": {
                                    "expression": {
                                      "expression": {
                                        "id": 238,
                                        "name": "_cFrag",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 48,
                                        "src": "7267:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                          "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                        }
                                      },
                                      "id": 239,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "proof",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1487,
                                      "src": "7267:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                        "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                      }
                                    },
                                    "id": 240,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "pointV2",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1466,
                                    "src": "7267:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.Point memory"
                                    }
                                  },
                                  "id": 241,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "xCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1454,
                                  "src": "7267:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 242,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "7296:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 243,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointV2yCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1516,
                                  "src": "7296:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 244,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "7266:57:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            },
                            {
                              "components": [
                                {
                                  "expression": {
                                    "id": 245,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "7342:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 246,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointV1HxCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1512,
                                  "src": "7342:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 247,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "7371:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 248,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointV1HyCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1514,
                                  "src": "7371:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 249,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "7341:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              },
                              {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            ],
                            "id": 237,
                            "name": "addAffineJacobian",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 976,
                            "src": "7231:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_array$_t_uint256_$3_memory_ptr_$",
                              "typeString": "function (uint256[2] memory,uint256[2] memory) pure returns (uint256[3] memory)"
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7231:182:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                            "typeString": "uint256[2] memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        ],
                        "id": 231,
                        "name": "eqAffineJacobian",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 811,
                        "src": "7130:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$returns$_t_bool_$",
                          "typeString": "function (uint256[2] memory,uint256[3] memory) pure returns (bool)"
                        }
                      },
                      "id": 251,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7130:293:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7113:310:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 253,
                  "nodeType": "ExpressionStatement",
                  "src": "7113:310:0"
                },
                {
                  "condition": {
                    "id": 255,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "7438:15:0",
                    "subExpression": {
                      "id": 254,
                      "name": "equation_holds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 103,
                      "src": "7439:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 259,
                  "nodeType": "IfStatement",
                  "src": "7434:57:0",
                  "trueBody": {
                    "id": 258,
                    "nodeType": "Block",
                    "src": "7454:37:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7475:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 36,
                        "id": 257,
                        "nodeType": "Return",
                        "src": "7468:12:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 262,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "7709:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 263,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointUZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1518,
                            "src": "7709:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 264,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "7737:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 265,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointUZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1520,
                            "src": "7737:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 261,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "7699:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7699:65:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e74207a2a55206973206e6f7420612076616c696420454320706f696e74",
                        "id": 267,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7782:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e0577485383801998fb9105116b7d2e605c46c5dc640d6d872051955d303d71e",
                          "typeString": "literal_string \"Point z*U is not a valid EC point\""
                        },
                        "value": "Point z*U is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e0577485383801998fb9105116b7d2e605c46c5dc640d6d872051955d303d71e",
                          "typeString": "literal_string \"Point z*U is not a valid EC point\""
                        }
                      ],
                      "id": 260,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7691:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7691:136:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 269,
                  "nodeType": "ExpressionStatement",
                  "src": "7691:136:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 272,
                            "name": "UMBRAL_PARAMETER_U_XCOORD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13,
                            "src": "7870:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 273,
                            "name": "UMBRAL_PARAMETER_U_YCOORD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "7921:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "id": 274,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48,
                                "src": "7972:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 275,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "7972:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 276,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "bnSig",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1472,
                            "src": "7972:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 277,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8021:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 278,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointUZxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1518,
                            "src": "8021:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 279,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8073:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 280,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointUZyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1520,
                            "src": "8073:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 271,
                          "name": "ecmulVerify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 743,
                          "src": "7845:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 281,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7845:255:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564207a2a552076616c756520697320696e636f7272656374",
                        "id": 282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8125:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7d8b4d92c199cbe2f19344fd6adec734709116b51256dfbf56fa4e56c3682f91",
                          "typeString": "literal_string \"Precomputed z*U value is incorrect\""
                        },
                        "value": "Precomputed z*U value is incorrect"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7d8b4d92c199cbe2f19344fd6adec734709116b51256dfbf56fa4e56c3682f91",
                          "typeString": "literal_string \"Precomputed z*U value is incorrect\""
                        }
                      ],
                      "id": 270,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7837:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7837:334:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "7837:334:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 287,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "8282:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 288,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "8282:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 289,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointKFragCommitment",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1468,
                              "src": "8282:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 290,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "8282:38:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 291,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "8349:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 292,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "8349:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 293,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointKFragCommitment",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1468,
                              "src": "8349:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 294,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "8349:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 295,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8413:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "8413:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 286,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "8248:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8248:192:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f6620553120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553120706f696e74",
                        "id": 298,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8477:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_55acadf9ee1f748f8adaf468e17194837057a0a8c2564028adf1d703b6d8012b",
                          "typeString": "literal_string \"Precomputed Y coordinate of U1 doesn't correspond to compressed U1 point\""
                        },
                        "value": "Precomputed Y coordinate of U1 doesn't correspond to compressed U1 point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_55acadf9ee1f748f8adaf468e17194837057a0a8c2564028adf1d703b6d8012b",
                          "typeString": "literal_string \"Precomputed Y coordinate of U1 doesn't correspond to compressed U1 point\""
                        }
                      ],
                      "id": 285,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8240:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8240:321:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 300,
                  "nodeType": "ExpressionStatement",
                  "src": "8240:321:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 303,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8624:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 304,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1HxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1524,
                            "src": "8624:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 305,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8653:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 306,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1HyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1526,
                            "src": "8653:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 302,
                          "name": "isOnCurve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 674,
                          "src": "8614:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8614:67:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506f696e7420682a5531206973206e6f7420612076616c696420454320706f696e74",
                        "id": 308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8699:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_093a7a88c920584caa2a2a8322add9262dccc224310495070b623396e8e9ef2e",
                          "typeString": "literal_string \"Point h*U1 is not a valid EC point\""
                        },
                        "value": "Point h*U1 is not a valid EC point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_093a7a88c920584caa2a2a8322add9262dccc224310495070b623396e8e9ef2e",
                          "typeString": "literal_string \"Point h*U1 is not a valid EC point\""
                        }
                      ],
                      "id": 301,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8606:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8606:139:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 310,
                  "nodeType": "ExpressionStatement",
                  "src": "8606:139:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 313,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "8788:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 314,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "8788:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 315,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointKFragCommitment",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1468,
                              "src": "8788:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "8788:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 317,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8852:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 318,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1522,
                            "src": "8852:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 319,
                            "name": "h",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 62,
                            "src": "8916:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 320,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8931:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 321,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1HxCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1524,
                            "src": "8931:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 322,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "8985:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 323,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU1HyCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1526,
                            "src": "8985:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 312,
                          "name": "ecmulVerify",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 743,
                          "src": "8763:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint256,uint256,uint256,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8763:250:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d707574656420682a56312076616c756520697320696e636f7272656374",
                        "id": 325,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9039:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f412593cda7cd44de0d194725a9aba9a275fed1afc534761496d7090e5ea9403",
                          "typeString": "literal_string \"Precomputed h*V1 value is incorrect\""
                        },
                        "value": "Precomputed h*V1 value is incorrect"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f412593cda7cd44de0d194725a9aba9a275fed1afc534761496d7090e5ea9403",
                          "typeString": "literal_string \"Precomputed h*V1 value is incorrect\""
                        }
                      ],
                      "id": 311,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8755:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 326,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8755:331:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 327,
                  "nodeType": "ExpressionStatement",
                  "src": "8755:331:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 330,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "9213:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 331,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "9213:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 332,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointKFragPok",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1470,
                              "src": "9213:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sign",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1452,
                            "src": "9213:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "expression": {
                              "expression": {
                                "expression": {
                                  "id": 334,
                                  "name": "_cFrag",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "9272:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                    "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                  }
                                },
                                "id": 335,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "proof",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1487,
                                "src": "9272:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                }
                              },
                              "id": 336,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointKFragPok",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1470,
                              "src": "9272:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Point memory"
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "xCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1454,
                            "src": "9272:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "expression": {
                              "id": 338,
                              "name": "_precomputed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "9328:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                "typeString": "struct UmbralDeserializer.PreComputedData memory"
                              }
                            },
                            "id": 339,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointU2yCoord",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1528,
                            "src": "9328:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 329,
                          "name": "checkCompressedPoint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 591,
                          "src": "9179:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint8_$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (uint8,uint256,uint256) pure returns (bool)"
                          }
                        },
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9179:176:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "507265636f6d7075746564205920636f6f7264696e617465206f6620553220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553220706f696e74",
                        "id": 341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9384:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_32b2ddea8c379059b689170870297ad94cf0c76821b05a1670a739d7fcfa4359",
                          "typeString": "literal_string \"Precomputed Y coordinate of U2 doesn't correspond to compressed U2 point\""
                        },
                        "value": "Precomputed Y coordinate of U2 doesn't correspond to compressed U2 point"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_32b2ddea8c379059b689170870297ad94cf0c76821b05a1670a739d7fcfa4359",
                          "typeString": "literal_string \"Precomputed Y coordinate of U2 doesn't correspond to compressed U2 point\""
                        }
                      ],
                      "id": 328,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9171:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 342,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9171:297:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 343,
                  "nodeType": "ExpressionStatement",
                  "src": "9171:297:0"
                },
                {
                  "expression": {
                    "id": 366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 344,
                      "name": "equation_holds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 103,
                      "src": "9479:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "components": [
                            {
                              "expression": {
                                "id": 346,
                                "name": "_precomputed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "9527:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                }
                              },
                              "id": 347,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointUZxCoord",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1518,
                              "src": "9527:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 348,
                                "name": "_precomputed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 56,
                                "src": "9556:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                }
                              },
                              "id": 349,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "pointUZyCoord",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1520,
                              "src": "9556:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 350,
                          "isConstant": false,
                          "isInlineArray": true,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "9526:57:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                            "typeString": "uint256[2] memory"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "components": [
                                {
                                  "expression": {
                                    "expression": {
                                      "expression": {
                                        "id": 352,
                                        "name": "_cFrag",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 48,
                                        "src": "9633:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                          "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                        }
                                      },
                                      "id": 353,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "proof",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1487,
                                      "src": "9633:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                        "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                                      }
                                    },
                                    "id": 354,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "pointKFragPok",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1470,
                                    "src": "9633:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.Point memory"
                                    }
                                  },
                                  "id": 355,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "xCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1454,
                                  "src": "9633:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 356,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "9668:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 357,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointU2yCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1528,
                                  "src": "9668:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 358,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "9632:63:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            },
                            {
                              "components": [
                                {
                                  "expression": {
                                    "id": 359,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "9714:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 360,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointU1HxCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1524,
                                  "src": "9714:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 361,
                                    "name": "_precomputed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 56,
                                    "src": "9743:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PreComputedData_$1535_memory_ptr",
                                      "typeString": "struct UmbralDeserializer.PreComputedData memory"
                                    }
                                  },
                                  "id": 362,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pointU1HyCoord",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1526,
                                  "src": "9743:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 363,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "9713:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              },
                              {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            ],
                            "id": 351,
                            "name": "addAffineJacobian",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 976,
                            "src": "9597:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_array$_t_uint256_$3_memory_ptr_$",
                              "typeString": "function (uint256[2] memory,uint256[2] memory) pure returns (uint256[3] memory)"
                            }
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9597:188:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                            "typeString": "uint256[2] memory"
                          },
                          {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        ],
                        "id": 345,
                        "name": "eqAffineJacobian",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 811,
                        "src": "9496:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$3_memory_ptr_$returns$_t_bool_$",
                          "typeString": "function (uint256[2] memory,uint256[3] memory) pure returns (bool)"
                        }
                      },
                      "id": 365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9496:299:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "9479:316:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 367,
                  "nodeType": "ExpressionStatement",
                  "src": "9479:316:0"
                },
                {
                  "expression": {
                    "id": 368,
                    "name": "equation_holds",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 103,
                    "src": "9813:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 36,
                  "id": 369,
                  "nodeType": "Return",
                  "src": "9806:21:0"
                }
              ]
            },
            "documentation": {
              "id": 26,
              "nodeType": "StructuredDocumentation",
              "src": "1357:191:0",
              "text": " @notice Check correctness of re-encryption\n @param _capsuleBytes Capsule\n @param _cFragBytes Capsule frag\n @param _precomputedBytes Additional precomputed data"
            },
            "functionSelector": "e650faa7",
            "id": 371,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validateCFrag",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28,
                  "mutability": "mutable",
                  "name": "_capsuleBytes",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1585:26:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1585:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "_cFragBytes",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1621:24:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1621:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32,
                  "mutability": "mutable",
                  "name": "_precomputedBytes",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1655:30:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1655:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1575:116:0"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "1721:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1721:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1720:6:0"
            },
            "scope": 1110,
            "src": "1553:8281:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 475,
              "nodeType": "Block",
              "src": "10021:1378:0",
              "statements": [
                {
                  "assignments": [
                    381
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 381,
                      "mutability": "mutable",
                      "name": "hashInput",
                      "nodeType": "VariableDeclaration",
                      "scope": 475,
                      "src": "10113:22:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 380,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "10113:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 405,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 384,
                            "name": "_capsule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 373,
                            "src": "10191:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Capsule memory"
                            }
                          },
                          "id": 385,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1457,
                          "src": "10191:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 386,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sign",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1452,
                        "src": "10191:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 387,
                            "name": "_capsule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 373,
                            "src": "10225:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Capsule memory"
                            }
                          },
                          "id": 388,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1457,
                          "src": "10225:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 389,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "xCoord",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1454,
                        "src": "10225:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 390,
                            "name": "_cFrag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "10285:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                              "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                            }
                          },
                          "id": 391,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE1",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1479,
                          "src": "10285:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 392,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sign",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1452,
                        "src": "10285:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "id": 393,
                            "name": "_cFrag",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "10318:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                              "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                            }
                          },
                          "id": 394,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE1",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1479,
                          "src": "10318:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 395,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "xCoord",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1454,
                        "src": "10318:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "expression": {
                              "id": 396,
                              "name": "_cFrag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "10377:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                              }
                            },
                            "id": 397,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "proof",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1487,
                            "src": "10377:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                              "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                            }
                          },
                          "id": 398,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE2",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1464,
                          "src": "10377:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 399,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sign",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1452,
                        "src": "10377:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "expression": {
                          "expression": {
                            "expression": {
                              "id": 400,
                              "name": "_cFrag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "10416:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                              }
                            },
                            "id": 401,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "proof",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1487,
                            "src": "10416:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                              "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                            }
                          },
                          "id": 402,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "pointE2",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1464,
                          "src": "10416:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                            "typeString": "struct UmbralDeserializer.Point memory"
                          }
                        },
                        "id": 403,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "xCoord",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1454,
                        "src": "10416:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 382,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "10138:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 383,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "src": "10138:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10138:315:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10113:340:0"
                },
                {
                  "expression": {
                    "id": 431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 406,
                      "name": "hashInput",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 381,
                      "src": "10464:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 409,
                          "name": "hashInput",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 381,
                          "src": "10506:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 410,
                              "name": "_capsule",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "10552:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Capsule memory"
                              }
                            },
                            "id": 411,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1459,
                            "src": "10552:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 412,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sign",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1452,
                          "src": "10552:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 413,
                              "name": "_capsule",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "10586:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                                "typeString": "struct UmbralDeserializer.Capsule memory"
                              }
                            },
                            "id": 414,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1459,
                            "src": "10586:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 415,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "xCoord",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1454,
                          "src": "10586:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 416,
                              "name": "_cFrag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "10646:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                              }
                            },
                            "id": 417,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1481,
                            "src": "10646:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 418,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sign",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1452,
                          "src": "10646:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 419,
                              "name": "_cFrag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "10679:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                              }
                            },
                            "id": 420,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV1",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1481,
                            "src": "10679:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 421,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "xCoord",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1454,
                          "src": "10679:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 422,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "10738:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 423,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "10738:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 424,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV2",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1466,
                            "src": "10738:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 425,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sign",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1452,
                          "src": "10738:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 426,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "10777:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 427,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "10777:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 428,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointV2",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1466,
                            "src": "10777:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 429,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "xCoord",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1454,
                          "src": "10777:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 407,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -1,
                          "src": "10476:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "src": "10476:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 430,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10476:338:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "10464:350:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "id": 432,
                  "nodeType": "ExpressionStatement",
                  "src": "10464:350:0"
                },
                {
                  "expression": {
                    "id": 465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 433,
                      "name": "hashInput",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 381,
                      "src": "10825:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 436,
                          "name": "hashInput",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 381,
                          "src": "10867:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 439,
                              "name": "UMBRAL_PARAMETER_U_SIGN",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "10920:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 438,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10913:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes1_$",
                              "typeString": "type(bytes1)"
                            },
                            "typeName": {
                              "id": 437,
                              "name": "bytes1",
                              "nodeType": "ElementaryTypeName",
                              "src": "10913:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10913:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 443,
                              "name": "UMBRAL_PARAMETER_U_XCOORD",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13,
                              "src": "10966:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 442,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10958:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 441,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "10958:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10958:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 445,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "11030:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 446,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "11030:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 447,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointKFragCommitment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1468,
                            "src": "11030:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 448,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sign",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1452,
                          "src": "11030:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 449,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "11082:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 450,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "11082:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 451,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointKFragCommitment",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1468,
                            "src": "11082:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 452,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "xCoord",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1454,
                          "src": "11082:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 453,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "11160:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 454,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "11160:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 455,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointKFragPok",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1470,
                            "src": "11160:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 456,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sign",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1452,
                          "src": "11160:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 457,
                                "name": "_cFrag",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "11205:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                  "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                                }
                              },
                              "id": 458,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proof",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1487,
                              "src": "11205:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                              }
                            },
                            "id": 459,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "pointKFragPok",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1470,
                            "src": "11205:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Point_$1455_memory_ptr",
                              "typeString": "struct UmbralDeserializer.Point memory"
                            }
                          },
                          "id": 460,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "xCoord",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1454,
                          "src": "11205:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "expression": {
                            "expression": {
                              "id": 461,
                              "name": "_cFrag",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "11290:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                                "typeString": "struct UmbralDeserializer.CapsuleFrag memory"
                              }
                            },
                            "id": 462,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "proof",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1487,
                            "src": "11290:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CorrectnessProof_$1477_memory_ptr",
                              "typeString": "struct UmbralDeserializer.CorrectnessProof memory"
                            }
                          },
                          "id": 463,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "metadata",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1476,
                          "src": "11290:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          },
                          {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "expression": {
                          "id": 434,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -1,
                          "src": "10837:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "src": "10837:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 464,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10837:484:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "src": "10825:496:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "id": 466,
                  "nodeType": "ExpressionStatement",
                  "src": "10825:496:0"
                },
                {
                  "assignments": [
                    468
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 468,
                      "mutability": "mutable",
                      "name": "h",
                      "nodeType": "VariableDeclaration",
                      "scope": 475,
                      "src": "11332:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 467,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11332:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 472,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 470,
                        "name": "hashInput",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 381,
                        "src": "11363:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 469,
                      "name": "extendedKeccakToBN",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 561,
                      "src": "11344:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$",
                        "typeString": "function (bytes memory) pure returns (uint256)"
                      }
                    },
                    "id": 471,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11344:29:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11332:41:0"
                },
                {
                  "expression": {
                    "id": 473,
                    "name": "h",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 468,
                    "src": "11390:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 379,
                  "id": 474,
                  "nodeType": "Return",
                  "src": "11383:8:0"
                }
              ]
            },
            "id": 476,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "computeProofChallengeScalar",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 376,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 373,
                  "mutability": "mutable",
                  "name": "_capsule",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "9886:42:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Capsule_$1462_memory_ptr",
                    "typeString": "struct UmbralDeserializer.Capsule"
                  },
                  "typeName": {
                    "id": 372,
                    "name": "UmbralDeserializer.Capsule",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1462,
                    "src": "9886:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Capsule_$1462_storage_ptr",
                      "typeString": "struct UmbralDeserializer.Capsule"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 375,
                  "mutability": "mutable",
                  "name": "_cFrag",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "9938:44:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CapsuleFrag_$1488_memory_ptr",
                    "typeString": "struct UmbralDeserializer.CapsuleFrag"
                  },
                  "typeName": {
                    "id": 374,
                    "name": "UmbralDeserializer.CapsuleFrag",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1488,
                    "src": "9938:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CapsuleFrag_$1488_storage_ptr",
                      "typeString": "struct UmbralDeserializer.CapsuleFrag"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9876:112:0"
            },
            "returnParameters": {
              "id": 379,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 378,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "10012:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 377,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10012:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10011:9:0"
            },
            "scope": 1110,
            "src": "9840:1559:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 560,
              "nodeType": "Block",
              "src": "11486:904:0",
              "statements": [
                {
                  "assignments": [
                    484
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 484,
                      "mutability": "mutable",
                      "name": "upper",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "11497:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 483,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "11497:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 485,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11497:13:0"
                },
                {
                  "assignments": [
                    487
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 487,
                      "mutability": "mutable",
                      "name": "lower",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "11520:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 486,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "11520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 488,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11520:13:0"
                },
                {
                  "assignments": [
                    490
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 490,
                      "mutability": "mutable",
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "11703:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 489,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "11703:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 503,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "686173685f746f5f6375727665626e",
                            "id": 495,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11749:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_496036e058926d0aed12d810dd92f8174b2062ebd4f9bce51618482fbbaca455",
                              "typeString": "literal_string \"hash_to_curvebn\""
                            },
                            "value": "hash_to_curvebn"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_496036e058926d0aed12d810dd92f8174b2062ebd4f9bce51618482fbbaca455",
                              "typeString": "literal_string \"hash_to_curvebn\""
                            }
                          ],
                          "id": 494,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "11741:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes32_$",
                            "typeString": "type(bytes32)"
                          },
                          "typeName": {
                            "id": 493,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "11741:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 496,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11741:26:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30783030",
                            "id": 499,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11777:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0x00"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 498,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "11769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes32_$",
                            "typeString": "type(bytes32)"
                          },
                          "typeName": {
                            "id": 497,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "11769:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 500,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11769:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 501,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 478,
                        "src": "11784:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 491,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "11724:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 492,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodePacked",
                      "nodeType": "MemberAccess",
                      "src": "11724:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function () pure returns (bytes memory)"
                      }
                    },
                    "id": 502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11724:66:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11703:87:0"
                },
                {
                  "expression": {
                    "id": 528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "components": [
                        {
                          "id": 504,
                          "name": "upper",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 484,
                          "src": "11802:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 505,
                          "name": "lower",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 487,
                          "src": "11809:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 506,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "TupleExpression",
                      "src": "11801:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$",
                        "typeString": "tuple(bytes32,bytes32)"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "components": [
                        {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30783030",
                                      "id": 512,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11852:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0x00"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 511,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "11846:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint8_$",
                                      "typeString": "type(uint8)"
                                    },
                                    "typeName": {
                                      "id": 510,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "11846:5:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 513,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11846:11:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                {
                                  "id": 514,
                                  "name": "input",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 490,
                                  "src": "11859:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 508,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "11829:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 509,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "11829:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 515,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11829:36:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 507,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "11819:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11819:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30783031",
                                      "id": 522,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11927:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "0x01"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      }
                                    ],
                                    "id": 521,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "11921:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint8_$",
                                      "typeString": "type(uint8)"
                                    },
                                    "typeName": {
                                      "id": 520,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "11921:5:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 523,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11921:11:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                {
                                  "id": 524,
                                  "name": "input",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 490,
                                  "src": "11934:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "id": 518,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "11904:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 519,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "11904:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 525,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11904:36:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 517,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "11894:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 526,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11894:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "id": 527,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "11818:124:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$_t_bytes32_$_t_bytes32_$",
                        "typeString": "tuple(bytes32,bytes32)"
                      }
                    },
                    "src": "11801:141:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 529,
                  "nodeType": "ExpressionStatement",
                  "src": "11801:141:0"
                },
                {
                  "assignments": [
                    531
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 531,
                      "mutability": "mutable",
                      "name": "delta",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "12098:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 530,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12098:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 533,
                  "initialValue": {
                    "hexValue": "3078313435353132333139353062373566633434303264613137333266633962656330",
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "12114:35:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_432420386565659656852420866394968145600_by_1",
                      "typeString": "int_const 4324...(31 digits omitted)...5600"
                    },
                    "value": "0x14551231950b75fc4402da1732fc9bec0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12098:51:0"
                },
                {
                  "assignments": [
                    535
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 535,
                      "mutability": "mutable",
                      "name": "n_minus_1",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "12159:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 534,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12159:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 537,
                  "initialValue": {
                    "hexValue": "307866666666666666666666666666666666666666666666666666666666666666656261616564636536616634386130336262666432356538636430333634313430",
                    "id": 536,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "12179:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_115792089237316195423570985008687907852837564279074904382605163141518161494336_by_1",
                      "typeString": "int_const 1157...(70 digits omitted)...4336"
                    },
                    "value": "0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12159:86:0"
                },
                {
                  "assignments": [
                    539
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 539,
                      "mutability": "mutable",
                      "name": "upper_half",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "12256:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 538,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12256:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 548,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 543,
                            "name": "upper",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 484,
                            "src": "12292:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 542,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "12284:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": {
                            "id": 541,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "12284:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12284:14:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 545,
                        "name": "delta",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 531,
                        "src": "12300:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 546,
                        "name": "n_minus_1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 535,
                        "src": "12307:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 540,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "12277:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12277:40:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12256:61:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "31",
                      "id": 549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12334:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 551,
                          "name": "upper_half",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 539,
                          "src": "12345:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 554,
                              "name": "lower",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 487,
                              "src": "12365:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 553,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "12357:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 552,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "12357:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12357:14:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 556,
                          "name": "n_minus_1",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 535,
                          "src": "12373:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 550,
                        "name": "addmod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -2,
                        "src": "12338:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 557,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12338:45:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12334:49:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 482,
                  "id": 559,
                  "nodeType": "Return",
                  "src": "12327:56:0"
                }
              ]
            },
            "id": 561,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "extendedKeccakToBN",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 479,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 478,
                  "mutability": "mutable",
                  "name": "_data",
                  "nodeType": "VariableDeclaration",
                  "scope": 561,
                  "src": "11434:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 477,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11434:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11433:20:0"
            },
            "returnParameters": {
              "id": 482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 481,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 561,
                  "src": "11477:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 480,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11477:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11476:9:0"
            },
            "scope": 1110,
            "src": "11405:985:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 590,
              "nodeType": "Block",
              "src": "12982:111:0",
              "statements": [
                {
                  "assignments": [
                    574
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 574,
                      "mutability": "mutable",
                      "name": "correct_sign",
                      "nodeType": "VariableDeclaration",
                      "scope": 590,
                      "src": "12986:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 573,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12986:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 582,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 577,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 575,
                        "name": "_pointY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 568,
                        "src": "13006:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "%",
                      "rightExpression": {
                        "hexValue": "32",
                        "id": 576,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13016:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "src": "13006:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "id": 580,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 578,
                        "name": "_pointSign",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 564,
                        "src": "13021:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "hexValue": "32",
                        "id": 579,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13034:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "src": "13021:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "src": "13006:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12986:49:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 583,
                      "name": "correct_sign",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 574,
                      "src": "13046:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 585,
                          "name": "_pointX",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 566,
                          "src": "13072:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 586,
                          "name": "_pointY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 568,
                          "src": "13081:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 584,
                        "name": "isOnCurve",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 674,
                        "src": "13062:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (uint256,uint256) pure returns (bool)"
                        }
                      },
                      "id": 587,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "13062:27:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "13046:43:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 572,
                  "id": 589,
                  "nodeType": "Return",
                  "src": "13039:50:0"
                }
              ]
            },
            "documentation": {
              "id": 562,
              "nodeType": "StructuredDocumentation",
              "src": "12396:465:0",
              "text": "@notice Tests if a compressed point is valid, wrt to its corresponding Y coordinate\n @param _pointSign The sign byte from the compressed notation: 0x02 if the Y coord is even; 0x03 otherwise\n @param _pointX The X coordinate of an EC point in affine representation\n @param _pointY The Y coordinate of an EC point in affine representation\n @return true iff _pointSign and _pointX are the compressed representation of (_pointX, _pointY)"
            },
            "id": 591,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkCompressedPoint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 564,
                  "mutability": "mutable",
                  "name": "_pointSign",
                  "nodeType": "VariableDeclaration",
                  "scope": 591,
                  "src": "12896:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 563,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "12896:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 566,
                  "mutability": "mutable",
                  "name": "_pointX",
                  "nodeType": "VariableDeclaration",
                  "scope": 591,
                  "src": "12916:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 565,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12916:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 568,
                  "mutability": "mutable",
                  "name": "_pointY",
                  "nodeType": "VariableDeclaration",
                  "scope": 591,
                  "src": "12935:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 567,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12935:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12892:61:0"
            },
            "returnParameters": {
              "id": 572,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 571,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 591,
                  "src": "12976:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 570,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "12976:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12975:6:0"
            },
            "scope": 1110,
            "src": "12863:230:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 619,
              "nodeType": "Block",
              "src": "13408:289:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 603,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 600,
                            "name": "_coords",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 594,
                            "src": "13426:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 601,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "13426:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "3634",
                          "id": 602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13444:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_64_by_1",
                            "typeString": "int_const 64"
                          },
                          "value": "64"
                        },
                        "src": "13426:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "53657269616c697a656420636f6f7264696e617465732073686f756c642062652036342042",
                        "id": 604,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13448:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d62785e0b816a6542c803e879dfa676365bdae9d847573c5455f08b653cfdb64",
                          "typeString": "literal_string \"Serialized coordinates should be 64 B\""
                        },
                        "value": "Serialized coordinates should be 64 B"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d62785e0b816a6542c803e879dfa676365bdae9d847573c5455f08b653cfdb64",
                          "typeString": "literal_string \"Serialized coordinates should be 64 B\""
                        }
                      ],
                      "id": 599,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13418:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 605,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13418:70:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 606,
                  "nodeType": "ExpressionStatement",
                  "src": "13418:70:0"
                },
                {
                  "assignments": [
                    608
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 608,
                      "mutability": "mutable",
                      "name": "coordX",
                      "nodeType": "VariableDeclaration",
                      "scope": 619,
                      "src": "13498:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 607,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13498:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 609,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13498:14:0"
                },
                {
                  "assignments": [
                    611
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 611,
                      "mutability": "mutable",
                      "name": "coordY",
                      "nodeType": "VariableDeclaration",
                      "scope": 619,
                      "src": "13522:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 610,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13522:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 612,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13522:14:0"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "13555:103:0",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "13569:33:0",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "_coords",
                                  "nodeType": "YulIdentifier",
                                  "src": "13589:7:0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13598:2:0",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "13585:3:0"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "13585:16:0"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "13579:5:0"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13579:23:0"
                        },
                        "variableNames": [
                          {
                            "name": "coordX",
                            "nodeType": "YulIdentifier",
                            "src": "13569:6:0"
                          }
                        ]
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "13615:33:0",
                        "value": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "_coords",
                                  "nodeType": "YulIdentifier",
                                  "src": "13635:7:0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13644:2:0",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "13631:3:0"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "13631:16:0"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "13625:5:0"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13625:23:0"
                        },
                        "variableNames": [
                          {
                            "name": "coordY",
                            "nodeType": "YulIdentifier",
                            "src": "13615:6:0"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 594,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "13589:7:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 594,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "13635:7:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 608,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "13569:6:0",
                      "valueSize": 1
                    },
                    {
                      "declaration": 611,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "13615:6:0",
                      "valueSize": 1
                    }
                  ],
                  "id": 613,
                  "nodeType": "InlineAssembly",
                  "src": "13546:112:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 615,
                        "name": "coordX",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 608,
                        "src": "13678:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 616,
                        "name": "coordY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 611,
                        "src": "13686:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 614,
                      "name": "isOnCurve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 674,
                      "src": "13668:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256,uint256) pure returns (bool)"
                      }
                    },
                    "id": 617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13668:25:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 598,
                  "id": 618,
                  "nodeType": "Return",
                  "src": "13661:32:0"
                }
              ]
            },
            "documentation": {
              "id": 592,
              "nodeType": "StructuredDocumentation",
              "src": "13099:218:0",
              "text": "@notice Tests if the given serialized coordinates represent a valid EC point\n @param _coords The concatenation of serialized X and Y coordinates\n @return true iff coordinates X and Y are a valid point"
            },
            "id": 620,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkSerializedCoordinates",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 595,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 594,
                  "mutability": "mutable",
                  "name": "_coords",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "13358:20:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 593,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "13358:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13357:22:0"
            },
            "returnParameters": {
              "id": 598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 597,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "13402:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 596,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "13402:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13401:6:0"
            },
            "scope": 1110,
            "src": "13322:375:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 673,
              "nodeType": "Block",
              "src": "14061:259:0",
              "statements": [
                {
                  "assignments": [
                    631
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 631,
                      "mutability": "mutable",
                      "name": "p",
                      "nodeType": "VariableDeclaration",
                      "scope": 673,
                      "src": "14071:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 630,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14071:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 633,
                  "initialValue": {
                    "id": 632,
                    "name": "FIELD_ORDER",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19,
                    "src": "14083:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14071:23:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 636,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 634,
                        "name": "Px",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 623,
                        "src": "14109:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 635,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 631,
                        "src": "14115:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "14109:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 639,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 637,
                        "name": "Py",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 625,
                        "src": "14120:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">=",
                      "rightExpression": {
                        "id": 638,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 631,
                        "src": "14126:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "14120:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "14109:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 644,
                  "nodeType": "IfStatement",
                  "src": "14105:60:0",
                  "trueBody": {
                    "id": 643,
                    "nodeType": "Block",
                    "src": "14128:37:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 641,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "14149:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 629,
                        "id": 642,
                        "nodeType": "Return",
                        "src": "14142:12:0"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    646
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 646,
                      "mutability": "mutable",
                      "name": "y2",
                      "nodeType": "VariableDeclaration",
                      "scope": 673,
                      "src": "14175:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 645,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14175:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 652,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 648,
                        "name": "Py",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 625,
                        "src": "14195:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 649,
                        "name": "Py",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 625,
                        "src": "14199:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 650,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 631,
                        "src": "14203:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 647,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "14188:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 651,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14188:17:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14175:30:0"
                },
                {
                  "assignments": [
                    654
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 654,
                      "mutability": "mutable",
                      "name": "x3_plus_7",
                      "nodeType": "VariableDeclaration",
                      "scope": 673,
                      "src": "14215:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 653,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14215:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 668,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 658,
                                "name": "Px",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 623,
                                "src": "14256:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 659,
                                "name": "Px",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 623,
                                "src": "14260:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 660,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 631,
                                "src": "14264:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 657,
                              "name": "mulmod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -16,
                              "src": "14249:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 661,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14249:17:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 662,
                            "name": "Px",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 623,
                            "src": "14268:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 663,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 631,
                            "src": "14272:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 656,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "14242:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14242:32:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "37",
                        "id": 665,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14276:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_7_by_1",
                          "typeString": "int_const 7"
                        },
                        "value": "7"
                      },
                      {
                        "id": 666,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 631,
                        "src": "14279:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_rational_7_by_1",
                          "typeString": "int_const 7"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 655,
                      "name": "addmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -2,
                      "src": "14235:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14235:46:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14215:66:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 671,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 669,
                      "name": "y2",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 646,
                      "src": "14298:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 670,
                      "name": "x3_plus_7",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 654,
                      "src": "14304:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14298:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 629,
                  "id": 672,
                  "nodeType": "Return",
                  "src": "14291:22:0"
                }
              ]
            },
            "documentation": {
              "id": 621,
              "nodeType": "StructuredDocumentation",
              "src": "13703:281:0",
              "text": "@notice Tests if a point is on the secp256k1 curve\n @param Px The X coordinate of an EC point in affine representation\n @param Py The Y coordinate of an EC point in affine representation\n @return true if (Px, Py) is a valid secp256k1 point; false otherwise"
            },
            "id": 674,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isOnCurve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 623,
                  "mutability": "mutable",
                  "name": "Px",
                  "nodeType": "VariableDeclaration",
                  "scope": 674,
                  "src": "14008:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 622,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14008:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "Py",
                  "nodeType": "VariableDeclaration",
                  "scope": 674,
                  "src": "14020:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14020:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14007:24:0"
            },
            "returnParameters": {
              "id": 629,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 628,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 674,
                  "src": "14055:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 627,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14055:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14054:6:0"
            },
            "scope": 1110,
            "src": "13989:331:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 742,
              "nodeType": "Block",
              "src": "14568:372:0",
              "statements": [
                {
                  "assignments": [
                    690
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 690,
                      "mutability": "mutable",
                      "name": "curve_order",
                      "nodeType": "VariableDeclaration",
                      "scope": 742,
                      "src": "14575:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 689,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14575:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 692,
                  "initialValue": {
                    "hexValue": "307846464646464646464646464646464646464646464646464646464646464646454241414544434536414634384130334242464432354538434430333634313431",
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "14597:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_115792089237316195423570985008687907852837564279074904382605163141518161494337_by_1",
                      "typeString": "int_const 1157...(70 digits omitted)...4337"
                    },
                    "value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14575:88:0"
                },
                {
                  "assignments": [
                    694
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 694,
                      "mutability": "mutable",
                      "name": "signer",
                      "nodeType": "VariableDeclaration",
                      "scope": 742,
                      "src": "14670:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 693,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14670:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 719,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "30",
                        "id": 696,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14697:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3237",
                              "id": 699,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14706:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_27_by_1",
                                "typeString": "int_const 27"
                              },
                              "value": "27"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 702,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 700,
                                    "name": "y1",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 678,
                                    "src": "14712:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "%",
                                  "rightExpression": {
                                    "hexValue": "32",
                                    "id": 701,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "14717:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "14712:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 703,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "14711:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "14706:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 698,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14700:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint8_$",
                            "typeString": "type(uint8)"
                          },
                          "typeName": {
                            "id": 697,
                            "name": "uint8",
                            "nodeType": "ElementaryTypeName",
                            "src": "14700:5:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14700:20:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 708,
                            "name": "x1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 676,
                            "src": "14730:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14722:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes32_$",
                            "typeString": "type(bytes32)"
                          },
                          "typeName": {
                            "id": 706,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "14722:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 709,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14722:11:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 713,
                                "name": "scalar",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 680,
                                "src": "14750:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 714,
                                "name": "x1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 676,
                                "src": "14758:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 715,
                                "name": "curve_order",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 690,
                                "src": "14762:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 712,
                              "name": "mulmod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -16,
                              "src": "14743:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 716,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14743:31:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 711,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14735:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes32_$",
                            "typeString": "type(bytes32)"
                          },
                          "typeName": {
                            "id": 710,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "14735:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 717,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14735:40:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 695,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "14687:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 718,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14687:89:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14670:106:0"
                },
                {
                  "assignments": [
                    721
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 721,
                      "mutability": "mutable",
                      "name": "xyAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 742,
                      "src": "14783:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 720,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14783:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 737,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 735,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 729,
                                      "name": "qx",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 682,
                                      "src": "14846:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "id": 730,
                                      "name": "qy",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 684,
                                      "src": "14850:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 727,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "14829:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 728,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "encodePacked",
                                    "nodeType": "MemberAccess",
                                    "src": "14829:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function () pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 731,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "14829:24:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 726,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -8,
                                "src": "14819:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 732,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14819:35:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 725,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "14811:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 724,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14811:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 733,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14811:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&",
                        "rightExpression": {
                          "hexValue": "3078303046464646464646464646464646464646464646464646464646464646464646464646464646464646",
                          "id": 734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "14858:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1461501637330902918203684832716283019655932542975_by_1",
                            "typeString": "int_const 1461...(41 digits omitted)...2975"
                          },
                          "value": "0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
                        },
                        "src": "14811:91:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "14803:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 722,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14803:7:0",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 736,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14803:100:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14783:120:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 740,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 738,
                      "name": "xyAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 721,
                      "src": "14917:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 739,
                      "name": "signer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 694,
                      "src": "14930:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "14917:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 688,
                  "id": 741,
                  "nodeType": "Return",
                  "src": "14910:26:0"
                }
              ]
            },
            "id": 743,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "ecmulVerify",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 685,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 676,
                  "mutability": "mutable",
                  "name": "x1",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14451:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 675,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14451:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 678,
                  "mutability": "mutable",
                  "name": "y1",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14468:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 677,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14468:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 680,
                  "mutability": "mutable",
                  "name": "scalar",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14485:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 679,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14485:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 682,
                  "mutability": "mutable",
                  "name": "qx",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14506:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 681,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14506:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 684,
                  "mutability": "mutable",
                  "name": "qy",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14523:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 683,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14523:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14444:95:0"
            },
            "returnParameters": {
              "id": 688,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 687,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 743,
                  "src": "14562:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 686,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14562:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14561:6:0"
            },
            "scope": 1110,
            "src": "14424:516:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 810,
              "nodeType": "Block",
              "src": "15350:315:0",
              "statements": [
                {
                  "assignments": [
                    758
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 758,
                      "mutability": "mutable",
                      "name": "Qz",
                      "nodeType": "VariableDeclaration",
                      "scope": 810,
                      "src": "15360:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 757,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15360:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 762,
                  "initialValue": {
                    "baseExpression": {
                      "id": 759,
                      "name": "Q",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 752,
                      "src": "15373:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                        "typeString": "uint256[3] memory"
                      }
                    },
                    "id": 761,
                    "indexExpression": {
                      "hexValue": "32",
                      "id": 760,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "15375:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "15373:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15360:17:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 765,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 763,
                      "name": "Qz",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 758,
                      "src": "15390:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 764,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "15396:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "15390:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 769,
                  "nodeType": "IfStatement",
                  "src": "15387:80:0",
                  "trueBody": {
                    "id": 768,
                    "nodeType": "Block",
                    "src": "15398:69:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15419:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 756,
                        "id": 767,
                        "nodeType": "Return",
                        "src": "15412:12:0"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    771
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 771,
                      "mutability": "mutable",
                      "name": "p",
                      "nodeType": "VariableDeclaration",
                      "scope": 810,
                      "src": "15477:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 770,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15477:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 773,
                  "initialValue": {
                    "id": 772,
                    "name": "FIELD_ORDER",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19,
                    "src": "15489:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15477:23:0"
                },
                {
                  "assignments": [
                    775
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 775,
                      "mutability": "mutable",
                      "name": "Q_z_squared",
                      "nodeType": "VariableDeclaration",
                      "scope": 810,
                      "src": "15510:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 774,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15510:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 781,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 777,
                        "name": "Qz",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 758,
                        "src": "15539:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 778,
                        "name": "Qz",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 758,
                        "src": "15543:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 779,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 771,
                        "src": "15547:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 776,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "15532:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15532:17:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15510:39:0"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 792,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "baseExpression": {
                              "id": 783,
                              "name": "P",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 748,
                              "src": "15573:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            },
                            "id": 785,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 784,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15575:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15573:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 786,
                            "name": "Q_z_squared",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 775,
                            "src": "15579:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 787,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "15592:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 782,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "15566:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15566:28:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "baseExpression": {
                          "id": 789,
                          "name": "Q",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 752,
                          "src": "15598:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        },
                        "id": 791,
                        "indexExpression": {
                          "hexValue": "30",
                          "id": 790,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15600:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "15598:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15566:36:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 807,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [
                          {
                            "baseExpression": {
                              "id": 794,
                              "name": "P",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 748,
                              "src": "15613:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                                "typeString": "uint256[2] memory"
                              }
                            },
                            "id": 796,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 795,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15615:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15613:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 798,
                                "name": "Q_z_squared",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 775,
                                "src": "15626:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 799,
                                "name": "Qz",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 758,
                                "src": "15639:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 800,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 771,
                                "src": "15643:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 797,
                              "name": "mulmod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -16,
                              "src": "15619:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 801,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15619:26:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 802,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "15647:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 793,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "15606:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 803,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15606:43:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "baseExpression": {
                          "id": 804,
                          "name": "Q",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 752,
                          "src": "15653:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        },
                        "id": 806,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15655:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "15653:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15606:51:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "15566:91:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 756,
                  "id": 809,
                  "nodeType": "Return",
                  "src": "15559:98:0"
                }
              ]
            },
            "documentation": {
              "id": 744,
              "nodeType": "StructuredDocumentation",
              "src": "14946:288:0",
              "text": "@notice Equality test of two points, in affine and Jacobian coordinates respectively\n @param P An EC point in affine coordinates\n @param Q An EC point in Jacobian coordinates\n @return true if P and Q represent the same point in affine coordinates; false otherwise"
            },
            "id": 811,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "eqAffineJacobian",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 753,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 748,
                  "mutability": "mutable",
                  "name": "P",
                  "nodeType": "VariableDeclaration",
                  "scope": 811,
                  "src": "15271:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 745,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15271:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 747,
                    "length": {
                      "hexValue": "32",
                      "id": 746,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "15279:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "15271:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 752,
                  "mutability": "mutable",
                  "name": "Q",
                  "nodeType": "VariableDeclaration",
                  "scope": 811,
                  "src": "15297:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 749,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15297:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 751,
                    "length": {
                      "hexValue": "33",
                      "id": 750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "15305:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "15297:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15264:58:0"
            },
            "returnParameters": {
              "id": 756,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 755,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 811,
                  "src": "15345:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 754,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "15345:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15344:6:0"
            },
            "scope": 1110,
            "src": "15239:426:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 975,
              "nodeType": "Block",
              "src": "16219:664:0",
              "statements": [
                {
                  "assignments": [
                    828
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 828,
                      "mutability": "mutable",
                      "name": "p",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16230:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 827,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16230:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 830,
                  "initialValue": {
                    "id": 829,
                    "name": "FIELD_ORDER",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19,
                    "src": "16242:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16230:23:0"
                },
                {
                  "assignments": [
                    832
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 832,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16263:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 831,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16263:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 836,
                  "initialValue": {
                    "baseExpression": {
                      "id": 833,
                      "name": "P",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 816,
                      "src": "16277:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2] memory"
                      }
                    },
                    "id": 835,
                    "indexExpression": {
                      "hexValue": "30",
                      "id": 834,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16279:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16277:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16263:18:0"
                },
                {
                  "assignments": [
                    838
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 838,
                      "mutability": "mutable",
                      "name": "c",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16291:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 837,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16291:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 842,
                  "initialValue": {
                    "baseExpression": {
                      "id": 839,
                      "name": "P",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 816,
                      "src": "16305:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2] memory"
                      }
                    },
                    "id": 841,
                    "indexExpression": {
                      "hexValue": "31",
                      "id": 840,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16307:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16305:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16291:18:0"
                },
                {
                  "assignments": [
                    844
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 844,
                      "mutability": "mutable",
                      "name": "t0",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16319:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 843,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16319:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 848,
                  "initialValue": {
                    "baseExpression": {
                      "id": 845,
                      "name": "Q",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 820,
                      "src": "16333:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2] memory"
                      }
                    },
                    "id": 847,
                    "indexExpression": {
                      "hexValue": "30",
                      "id": 846,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16335:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16333:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16319:18:0"
                },
                {
                  "assignments": [
                    850
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 850,
                      "mutability": "mutable",
                      "name": "t1",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16347:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 849,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16347:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 854,
                  "initialValue": {
                    "baseExpression": {
                      "id": 851,
                      "name": "Q",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 820,
                      "src": "16361:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                        "typeString": "uint256[2] memory"
                      }
                    },
                    "id": 853,
                    "indexExpression": {
                      "hexValue": "31",
                      "id": 852,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16363:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16361:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16347:18:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 863,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 855,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 832,
                            "src": "16381:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 856,
                            "name": "t0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 844,
                            "src": "16386:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16381:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 858,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "16380:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 861,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 859,
                            "name": "c",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 838,
                            "src": "16394:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 860,
                            "name": "t1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 850,
                            "src": "16399:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16394:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 862,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "16393:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "16380:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 872,
                  "nodeType": "IfStatement",
                  "src": "16376:84:0",
                  "trueBody": {
                    "id": 871,
                    "nodeType": "Block",
                    "src": "16403:57:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "components": [
                                {
                                  "id": 865,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 832,
                                  "src": "16440:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 866,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 838,
                                  "src": "16443:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "31",
                                  "id": 867,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "16446:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                }
                              ],
                              "id": 868,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16439:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                "typeString": "uint256[3] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                "typeString": "uint256[3] memory"
                              }
                            ],
                            "id": 864,
                            "name": "doubleJacobian",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1109,
                            "src": "16424:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$3_memory_ptr_$returns$_t_array$_t_uint256_$3_memory_ptr_$",
                              "typeString": "function (uint256[3] memory) pure returns (uint256[3] memory)"
                            }
                          },
                          "id": 869,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16424:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        },
                        "functionReturnParameters": 826,
                        "id": 870,
                        "nodeType": "Return",
                        "src": "16417:32:0"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    874
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 874,
                      "mutability": "mutable",
                      "name": "d",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16469:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 873,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16469:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 882,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 876,
                        "name": "t1",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 850,
                        "src": "16488:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 879,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 877,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 828,
                          "src": "16492:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 878,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 838,
                          "src": "16494:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "16492:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 880,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 828,
                        "src": "16497:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 875,
                      "name": "addmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -2,
                      "src": "16481:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 881,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16481:18:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16469:30:0"
                },
                {
                  "assignments": [
                    884
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 884,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16523:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 883,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16523:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 892,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 886,
                        "name": "t0",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 844,
                        "src": "16542:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 889,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 887,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 828,
                          "src": "16546:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 888,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 832,
                          "src": "16548:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "16546:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 890,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 828,
                        "src": "16551:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 885,
                      "name": "addmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -2,
                      "src": "16535:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 891,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16535:18:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16523:30:0"
                },
                {
                  "assignments": [
                    894
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 894,
                      "mutability": "mutable",
                      "name": "e",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16577:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 893,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16577:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 900,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 896,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "16596:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 897,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "16599:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 898,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 828,
                        "src": "16602:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 895,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "16589:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16589:15:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16577:27:0"
                },
                {
                  "assignments": [
                    902
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 902,
                      "mutability": "mutable",
                      "name": "f",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16625:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 901,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16625:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 908,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 904,
                        "name": "e",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 894,
                        "src": "16644:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 905,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "16647:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 906,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 828,
                        "src": "16650:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 903,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "16637:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16637:15:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16625:27:0"
                },
                {
                  "assignments": [
                    910
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 910,
                      "mutability": "mutable",
                      "name": "g",
                      "nodeType": "VariableDeclaration",
                      "scope": 975,
                      "src": "16674:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 909,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16674:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 916,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 912,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 832,
                        "src": "16693:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 913,
                        "name": "e",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 894,
                        "src": "16696:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 914,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 828,
                        "src": "16699:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 911,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "16686:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16686:15:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16674:27:0"
                },
                {
                  "expression": {
                    "id": 939,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 917,
                        "name": "R",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 825,
                        "src": "16711:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 919,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 918,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "16713:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "16711:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 922,
                              "name": "d",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 874,
                              "src": "16732:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 923,
                              "name": "d",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 874,
                              "src": "16735:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 924,
                              "name": "p",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 828,
                              "src": "16738:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 921,
                            "name": "mulmod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -16,
                            "src": "16725:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 925,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16725:15:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 926,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 828,
                            "src": "16742:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "hexValue": "32",
                                    "id": 929,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "16758:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  {
                                    "id": 930,
                                    "name": "g",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 910,
                                    "src": "16761:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 931,
                                    "name": "p",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 828,
                                    "src": "16764:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 928,
                                  "name": "mulmod",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -16,
                                  "src": "16751:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 932,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "16751:15:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 933,
                                "name": "f",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 902,
                                "src": "16768:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 934,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 828,
                                "src": "16771:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 927,
                              "name": "addmod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -2,
                              "src": "16744:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 935,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16744:29:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16742:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 937,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 828,
                          "src": "16775:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 920,
                        "name": "addmod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -2,
                        "src": "16718:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 938,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "16718:59:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16711:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 940,
                  "nodeType": "ExpressionStatement",
                  "src": "16711:66:0"
                },
                {
                  "expression": {
                    "id": 967,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 941,
                        "name": "R",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 825,
                        "src": "16787:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 943,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 942,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "16789:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "16787:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 946,
                              "name": "d",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 874,
                              "src": "16808:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 948,
                                  "name": "g",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 910,
                                  "src": "16818:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 953,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 949,
                                    "name": "p",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 828,
                                    "src": "16821:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "baseExpression": {
                                      "id": 950,
                                      "name": "R",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 825,
                                      "src": "16823:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 952,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 951,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16825:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "16823:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16821:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 954,
                                  "name": "p",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 828,
                                  "src": "16829:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 947,
                                "name": "addmod",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -2,
                                "src": "16811:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 955,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16811:20:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 956,
                              "name": "p",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 828,
                              "src": "16833:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 945,
                            "name": "mulmod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -16,
                            "src": "16801:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 957,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16801:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 964,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 958,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 828,
                            "src": "16837:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 960,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 838,
                                "src": "16846:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 961,
                                "name": "f",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 902,
                                "src": "16849:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 962,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 828,
                                "src": "16852:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 959,
                              "name": "mulmod",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -16,
                              "src": "16839:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 963,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16839:15:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16837:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 965,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 828,
                          "src": "16856:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 944,
                        "name": "addmod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -2,
                        "src": "16794:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 966,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "16794:64:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16787:71:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 968,
                  "nodeType": "ExpressionStatement",
                  "src": "16787:71:0"
                },
                {
                  "expression": {
                    "id": 973,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 969,
                        "name": "R",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 825,
                        "src": "16868:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 971,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 970,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "16870:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "16868:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 972,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 884,
                      "src": "16875:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16868:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 974,
                  "nodeType": "ExpressionStatement",
                  "src": "16868:8:0"
                }
              ]
            },
            "documentation": {
              "id": 812,
              "nodeType": "StructuredDocumentation",
              "src": "15671:423:0",
              "text": "@notice Adds two points in affine coordinates, with the result in Jacobian\n @dev Based on the addition formulas from http://www.hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-0/addition/add-2001-b.op3\n @param P An EC point in affine coordinates\n @param Q An EC point in affine coordinates\n @return R An EC point in Jacobian coordinates with the sum, represented by an array of 3 uint256"
            },
            "id": 976,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addAffineJacobian",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 821,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 816,
                  "mutability": "mutable",
                  "name": "P",
                  "nodeType": "VariableDeclaration",
                  "scope": 976,
                  "src": "16132:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 813,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "16132:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 815,
                    "length": {
                      "hexValue": "32",
                      "id": 814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16137:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "16132:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 820,
                  "mutability": "mutable",
                  "name": "Q",
                  "nodeType": "VariableDeclaration",
                  "scope": 976,
                  "src": "16155:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                    "typeString": "uint256[2]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 817,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "16155:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 819,
                    "length": {
                      "hexValue": "32",
                      "id": 818,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16160:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "16155:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$2_storage_ptr",
                      "typeString": "uint256[2]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16125:52:0"
            },
            "returnParameters": {
              "id": 826,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 825,
                  "mutability": "mutable",
                  "name": "R",
                  "nodeType": "VariableDeclaration",
                  "scope": 976,
                  "src": "16201:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 822,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "16201:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 824,
                    "length": {
                      "hexValue": "33",
                      "id": 823,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "16206:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "16201:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16200:18:0"
            },
            "scope": 1110,
            "src": "16099:784:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1108,
              "nodeType": "Block",
              "src": "17135:544:0",
              "statements": [
                {
                  "assignments": [
                    989
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 989,
                      "mutability": "mutable",
                      "name": "z",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17145:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 988,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17145:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 993,
                  "initialValue": {
                    "baseExpression": {
                      "id": 990,
                      "name": "P",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 981,
                      "src": "17157:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                        "typeString": "uint256[3] memory"
                      }
                    },
                    "id": 992,
                    "indexExpression": {
                      "hexValue": "32",
                      "id": 991,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "17159:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "17157:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17145:16:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 996,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 994,
                      "name": "z",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 989,
                      "src": "17175:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 995,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "17180:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "17175:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 999,
                  "nodeType": "IfStatement",
                  "src": "17171:32:0",
                  "trueBody": {
                    "expression": {
                      "id": 997,
                      "name": "Q",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 986,
                      "src": "17202:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                        "typeString": "uint256[3] memory"
                      }
                    },
                    "functionReturnParameters": 987,
                    "id": 998,
                    "nodeType": "Return",
                    "src": "17195:8:0"
                  }
                },
                {
                  "assignments": [
                    1001
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1001,
                      "mutability": "mutable",
                      "name": "p",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17213:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1000,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17213:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1003,
                  "initialValue": {
                    "id": 1002,
                    "name": "FIELD_ORDER",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 19,
                    "src": "17225:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17213:23:0"
                },
                {
                  "assignments": [
                    1005
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1005,
                      "mutability": "mutable",
                      "name": "x",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17246:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1004,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17246:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1009,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1006,
                      "name": "P",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 981,
                      "src": "17258:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                        "typeString": "uint256[3] memory"
                      }
                    },
                    "id": 1008,
                    "indexExpression": {
                      "hexValue": "30",
                      "id": 1007,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "17260:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "17258:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17246:16:0"
                },
                {
                  "assignments": [
                    1011
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1011,
                      "mutability": "mutable",
                      "name": "_2y",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17272:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1010,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17272:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1019,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "32",
                        "id": 1013,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17293:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      {
                        "baseExpression": {
                          "id": 1014,
                          "name": "P",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 981,
                          "src": "17296:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                            "typeString": "uint256[3] memory"
                          }
                        },
                        "id": 1016,
                        "indexExpression": {
                          "hexValue": "31",
                          "id": 1015,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "17298:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "17296:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1017,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1001,
                        "src": "17302:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1012,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "17286:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 1018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17286:18:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17272:32:0"
                },
                {
                  "assignments": [
                    1021
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1021,
                      "mutability": "mutable",
                      "name": "_4yy",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17314:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1020,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17314:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1027,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1023,
                        "name": "_2y",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1011,
                        "src": "17336:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1024,
                        "name": "_2y",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1011,
                        "src": "17341:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1025,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1001,
                        "src": "17346:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1022,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "17329:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 1026,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17329:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17314:34:0"
                },
                {
                  "assignments": [
                    1029
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1029,
                      "mutability": "mutable",
                      "name": "s",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17358:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1028,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17358:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1035,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1031,
                        "name": "_4yy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1021,
                        "src": "17377:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1032,
                        "name": "x",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1005,
                        "src": "17383:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1033,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1001,
                        "src": "17386:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1030,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "17370:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 1034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17370:18:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17358:30:0"
                },
                {
                  "assignments": [
                    1037
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1037,
                      "mutability": "mutable",
                      "name": "m",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17398:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1036,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17398:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1047,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "33",
                        "id": 1039,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17417:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      {
                        "arguments": [
                          {
                            "id": 1041,
                            "name": "x",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "17427:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1042,
                            "name": "x",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "17430:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1043,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1001,
                            "src": "17433:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1040,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "17420:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1044,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17420:15:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1045,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1001,
                        "src": "17437:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1038,
                      "name": "mulmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -16,
                      "src": "17410:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 1046,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17410:29:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17398:41:0"
                },
                {
                  "assignments": [
                    1049
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1049,
                      "mutability": "mutable",
                      "name": "t",
                      "nodeType": "VariableDeclaration",
                      "scope": 1108,
                      "src": "17449:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1048,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17449:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1063,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1052,
                            "name": "m",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1037,
                            "src": "17475:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1053,
                            "name": "m",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1037,
                            "src": "17478:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1054,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1001,
                            "src": "17481:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1051,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "17468:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1055,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17468:15:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 1057,
                            "name": "MINUS_2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22,
                            "src": "17492:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1058,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1029,
                            "src": "17501:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1059,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1001,
                            "src": "17504:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1056,
                          "name": "mulmod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -16,
                          "src": "17485:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17485:21:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1061,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1001,
                        "src": "17507:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1050,
                      "name": "addmod",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -2,
                      "src": "17461:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "17461:48:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17449:60:0"
                },
                {
                  "expression": {
                    "id": 1068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1064,
                        "name": "Q",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "17519:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 1066,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 1065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17521:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "17519:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1067,
                      "name": "t",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1049,
                      "src": "17526:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17519:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1069,
                  "nodeType": "ExpressionStatement",
                  "src": "17519:8:0"
                },
                {
                  "expression": {
                    "id": 1096,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1070,
                        "name": "Q",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "17537:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 1072,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 1071,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17539:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "17537:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 1075,
                              "name": "m",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1037,
                              "src": "17558:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1077,
                                  "name": "s",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1029,
                                  "src": "17568:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1080,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1078,
                                    "name": "p",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1001,
                                    "src": "17571:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 1079,
                                    "name": "t",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1049,
                                    "src": "17575:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17571:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1081,
                                  "name": "p",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1001,
                                  "src": "17578:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1076,
                                "name": "addmod",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -2,
                                "src": "17561:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1082,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17561:19:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1083,
                              "name": "p",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1001,
                              "src": "17582:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1074,
                            "name": "mulmod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -16,
                            "src": "17551:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1084,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17551:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "id": 1086,
                              "name": "MINUS_ONE_HALF",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25,
                              "src": "17593:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 1088,
                                  "name": "_4yy",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1021,
                                  "src": "17616:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1089,
                                  "name": "_4yy",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1021,
                                  "src": "17622:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1090,
                                  "name": "p",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1001,
                                  "src": "17628:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1087,
                                "name": "mulmod",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -16,
                                "src": "17609:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1091,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17609:21:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1092,
                              "name": "p",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1001,
                              "src": "17632:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1085,
                            "name": "mulmod",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -16,
                            "src": "17586:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1093,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17586:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1094,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1001,
                          "src": "17636:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 1073,
                        "name": "addmod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -2,
                        "src": "17544:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 1095,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "17544:94:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17537:101:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1097,
                  "nodeType": "ExpressionStatement",
                  "src": "17537:101:0"
                },
                {
                  "expression": {
                    "id": 1106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1098,
                        "name": "Q",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 986,
                        "src": "17648:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                          "typeString": "uint256[3] memory"
                        }
                      },
                      "id": 1100,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 1099,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17650:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "17648:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1102,
                          "name": "_2y",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1011,
                          "src": "17662:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1103,
                          "name": "z",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 989,
                          "src": "17667:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1104,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1001,
                          "src": "17670:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 1101,
                        "name": "mulmod",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -16,
                        "src": "17655:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 1105,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "17655:17:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17648:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1107,
                  "nodeType": "ExpressionStatement",
                  "src": "17648:24:0"
                }
              ]
            },
            "documentation": {
              "id": 977,
              "nodeType": "StructuredDocumentation",
              "src": "16889:158:0",
              "text": "@notice Point doubling in Jacobian coordinates\n @param P An EC point in Jacobian coordinates.\n @return Q An EC point in Jacobian coordinates"
            },
            "id": 1109,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "doubleJacobian",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 982,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 981,
                  "mutability": "mutable",
                  "name": "P",
                  "nodeType": "VariableDeclaration",
                  "scope": 1109,
                  "src": "17076:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 978,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "17076:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 980,
                    "length": {
                      "hexValue": "33",
                      "id": 979,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "17081:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "17076:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17075:18:0"
            },
            "returnParameters": {
              "id": 987,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 986,
                  "mutability": "mutable",
                  "name": "Q",
                  "nodeType": "VariableDeclaration",
                  "scope": 1109,
                  "src": "17117:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 983,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "17117:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 985,
                    "length": {
                      "hexValue": "33",
                      "id": 984,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "17122:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "17117:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17116:18:0"
            },
            "scope": 1110,
            "src": "17052:627:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1111,
        "src": "196:17485:0"
      }
    ],
    "src": "47:17635:0"
  },
  "bytecode": "611b65610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063055a80e71461005b5780634b4b4b1214610075578063c5f1f5ca1461007d578063e650faa71461009b575b600080fd5b610063610263565b60408051918252519081900360200190f35b610063610287565b6100856102ab565b6040805160ff9092168252519081900360200190f35b61024f600480360360608110156100b157600080fd5b8101906020810181356401000000008111156100cc57600080fd5b8201836020820111156100de57600080fd5b8035906020019184600183028401116401000000008311171561010057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561015357600080fd5b82018360208201111561016557600080fd5b8035906020019184600183028401116401000000008311171561018757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156101da57600080fd5b8201836020820111156101ec57600080fd5b8035906020019184600183028401116401000000008311171561020e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102b0945050505050565b604080519115158252519081900360200190f35b7f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f81565b7f7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f93681565b600281565b6000806102bc85610a46565b905060006102c985610a9d565b905060006102d685610b25565b905060006102e48484610d03565b8451805160209091015184519293506102fc92610fa3565b6103375760405162461bcd60e51b81526004018080602001828103825260468152602001806119d46046913960600191505060405180910390fd5b61034982602001518360400151610fcd565b61039a576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a45206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b6103ac82608001518360a00151610fcd565b6103e75760405162461bcd60e51b8152600401808060200182810382526022815260200180611aa86022913960400191505060405180910390fd5b6000610458604051806040016040528085602001518152602001856040015181525061045360405180604001604052808860800151600001516020015181526020018760c001518152506040518060400160405280886080015181526020018860a00151815250611032565b61115a565b90508061046d57600095505050505050610a3f565b602080860151805191015160e0850151610488929190610fa3565b6104c35760405162461bcd60e51b8152600401808060200182810382526046815260200180611a1a6046913960600191505060405180910390fd5b6104d7836101000151846101200151610fcd565b610528576040805162461bcd60e51b815260206004820181905260248201527f506f696e74207a56206973206e6f7420612076616c696420454320706f696e74604482015290519081900360640190fd5b6105538560200151602001518460e001518660800151608001518661010001518761012001516111c2565b61058e5760405162461bcd60e51b81526004018080602001828103825260228152602001806119486022913960400191505060405180910390fd5b60208085015180519101516101408501516105aa929190610fa3565b6105e55760405162461bcd60e51b8152600401808060200182810382526048815260200180611a606048913960600191505060405180910390fd5b6105f9836101600151846101800151610fcd565b6106345760405162461bcd60e51b8152600401808060200182810382526022815260200180611aeb6022913960400191505060405180910390fd5b610658846020015160200151846101400151848661016001518761018001516111c2565b6106935760405162461bcd60e51b8152600401808060200182810382526023815260200180611b0d6023913960400191505060405180910390fd5b608084015160209081015180519101516101a08501516106b4929190610fa3565b6106ef5760405162461bcd60e51b815260040180806020018281038252604881526020018061196a6048913960600191505060405180910390fd5b61075e604051806040016040528085610100015181526020018561012001518152506104536040518060400160405280886080015160200151602001518152602001876101a0015181525060405180604001604052808861016001518152602001886101800151815250611032565b90508061077357600095505050505050610a3f565b610787836101c00151846101e00151610fcd565b6107c25760405162461bcd60e51b8152600401808060200182810382526021815260200180611aca6021913960400191505060405180910390fd5b6108217f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f7f7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f936866080015160800151866101c00151876101e001516111c2565b61085c5760405162461bcd60e51b81526004018080602001828103825260228152602001806119b26022913960400191505060405180910390fd5b608084015160400151805160209091015161020085015161087e929190610fa3565b6108b95760405162461bcd60e51b81526004018080602001828103825260488152602001806119006048913960600191505060405180910390fd5b6108cd836102200151846102400151610fcd565b6109085760405162461bcd60e51b81526004018080602001828103825260228152602001806118966022913960400191505060405180910390fd5b61093084608001516040015160200151846102000151848661022001518761024001516111c2565b61096b5760405162461bcd60e51b8152600401808060200182810382526023815260200180611b0d6023913960400191505060405180910390fd5b608084015160600151805160209091015161026085015161098d929190610fa3565b6109c85760405162461bcd60e51b81526004018080602001828103825260488152602001806118b86048913960600191505060405180910390fd5b610a376040518060400160405280856101c001518152602001856101e00151815250610453604051806040016040528088608001516060015160200151815260200187610260015181525060405180604001604052808861022001518152602001886102400151815250611032565b955050505050505b9392505050565b610a4e6116d4565b8151606214610a5c57600080fd5b6000610a678361128e565b9050610a77818360000151611294565b9050610a87818360200151611294565b9050610a92816112af565b604083015250919050565b610aa5611701565b8151610167811015610ab657600080fd5b6000610ac18461128e565b9050610ad1818460000151611294565b9050610ae1818460200151611294565b9050610aec816112af565b6040840152606083015160209190910190610b08908290611294565b9050610b188160821984016112b3565b6080840152509092915050565b610b2d611747565b81516102b914610b3c57600080fd5b6000610b478361128e565b905080610b53816112af565b8352602001610b61816112af565b60208085019190915201610b74816112af565b6040840152602001610b85816112af565b6060840152602001610b96816112af565b6080840152602001610ba7816112af565b60a0840152602001610bb8816112af565b60c0840152602001610bc9816112af565b60e0840152602001610bda816112af565b610100840152602001610bec816112af565b610120840152602001610bfe816112af565b610140840152602001610c10816112af565b610160840152602001610c22816112af565b610180840152602001610c34816112af565b6101a0840152602001610c46816112af565b6101c0840152602001610c58816112af565b6101e0840152602001610c6a816112af565b610200840152602001610c7c816112af565b610220840152602001610c8e816112af565b610240840152602001610ca0816112af565b610260840152602001610cb2816112af565b610280840152602001610cc4816112af565b60601c6102a0840152601401610cd9816112af565b6001600160d81b0319166102c08401526005016102b982018114610cfc57600080fd5b5050919050565b81518051602091820151835180519084015160808601805151805190870151604080516001600160f81b031960f8998a1b8116828c0152602182019890985295881b871660418701526042860194909452951b909316606283015260638083019490945280518083039094018452608382019052838601518051908501518686015180519087015194518701518051908801518751600099899896979596949560a3019182918a01908083835b60208310610dcf5780518252601f199092019160209182019101610db0565b51815160209384036101000a600019018019909216911617905260f89a8b1b6001600160f81b031990811692909401918252600182019990995296891b8216602188015250602286019490945250941b166042820152604380820193909352604080518083039094018452606382018152608088015190810151805190840151606083015180519086015160c0909401518751979950899850600160f91b977f03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f97949693959294929391926083909201918291908b01908083835b60208310610ec95780518252601f199092019160209182019101610eaa565b6001836020036101000a038019825116818451168082178552505050505050905001886001600160f81b03191681526001018781526020018660ff1660f81b81526001018581526020018460ff1660f81b815260010183815260200182805190602001908083835b60208310610f505780518252601f199092019160209182019101610f31565b6001836020036101000a0380198251168184511680821785525050505050509050019850505050505050505060405160208183030381529060405290506000610f98826113b9565b925050505b92915050565b600060018216600119850160ff1614808015610fc45750610fc48484610fcd565b95945050505050565b60006401000003d0198084101580610fe55750808310155b15610ff4576000915050610f9d565b60008180610ffe57fe5b84850990506000828061100d57fe5b6007848061101757fe5b88868061102057fe5b8a8b0909089190911495945050505050565b61103a61180b565b82516020808501518451918501516401000003d019939290818414801561106057508083145b156110955761108960405180606001604052808681526020018581526020016001815250611598565b95505050505050610f9d565b6000858061109f57fe5b84870383089050600086806110b057fe5b86880385089050600087806110c157fe5b8283099050600088806110d057fe5b8383099050600089806110df57fe5b838a09905089806110ec57fe5b8a806110f457fe5b838c806110fd57fe5b84600209088b038b8061110c57fe5b878809088b52898061111a57fe5b8a8061112257fe5b838a098b038b8061112f57fe5b8c8061113757fe5b8e518e03850888090860208c015250505060408801525094979650505050505050565b604081015160009080611171576000915050610f9d565b6401000003d0196000818384098551909150828061118b57fe5b87518390091480156111b85750602085015182806111a557fe5b83806111ad57fe5b858409602089015109145b9695505050505050565b600070014551231950b75fc4402da1732fc9bebe1981600181601b898316018a858c8b0960001b60405160008152602001604052604051808560001b81526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611240573d6000803e3d6000fd5b505060408051601f1981015160208281018a90528284018990528351808403850181526060909301909352815191909201206001600160a01b03918216911614935050505095945050505050565b60200190565b8151600183015160009190911a825260209091015260210190565b5190565b6112bb611829565b60e48210156112c957600080fd5b6112d7838260000151611294565b92506112e7838260200151611294565b92506112f7838260400151611294565b9250611307838260600151611294565b9250611312836112af565b608082015260408051818152606081018252602094909401939060208201818036833750505060a0820181905261134c908490604061168d565b925060e4821115610f9d5760e319820167ffffffffffffffff8111801561137257600080fd5b506040519080825280601f01601f19166020018201604052801561139d576020820181803683370190505b5060c0820181905280516113b291859161168d565b5092915050565b6000806000806e3430b9b42fba37afb1bab93b32b13760891b6000801b866040516020018084815260200183815260200182805190602001908083835b602083106114155780518252601f1990920191602091820191016113f6565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040529050600081604051602001808360ff1660f81b815260010182805190602001908083835b6020831061148e5780518252601f19909201916020918201910161146f565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120600182604051602001808360ff1660f81b815260010182805190602001908083835b6020831061150b5780518252601f1990920191602091820191016114ec565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352909352805192019190912094975093955070014551231950b75fc4402da1732fc9bec0935070014551231950b75fc4402da1732fc9bebf199250600091508290508387099050818061158457fe5b85820860010196505050505050505b919050565b6115a061180b565b6040820151806115b05750611593565b82516401000003d0199060008260208701516002099050600083806115d157fe5b8283099050600084806115e057fe5b8483099050600085806115ef57fe5b86806115f757fe5b86870960030990506000868061160957fe5b878061161157fe5b846401000003d21909888061162257fe5b84850908808a529050868061163357fe5b878061163b57fe5b888061164357fe5b86870963800001e9600160ff1b0309888061165a57fe5b898061166257fe5b848b03870885090860208a0152868061167757fe5b88860960408a0152509698975050505050505050565b60006020601f830104846020850160005b838110156116ba5760208102838101519083015260010161169e565b505050506000835160200184015281840190509392505050565b60405180606001604052806116e761187e565b81526020016116f461187e565b8152602001600081525090565b6040518060a0016040528061171461187e565b815260200161172161187e565b81526000602082015260400161173561187e565b8152602001611742611829565b905290565b604051806102e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160d81b03191681525090565b60405180606001604052806003906020820280368337509192915050565b6040518060e0016040528061183c61187e565b815260200161184961187e565b815260200161185661187e565b815260200161186361187e565b81526020016000815260200160608152602001606081525090565b60408051808201909152600080825260208201529056fe506f696e7420682a5531206973206e6f7420612076616c696420454320706f696e74507265636f6d7075746564205920636f6f7264696e617465206f6620553220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553220706f696e74507265636f6d7075746564205920636f6f7264696e617465206f6620553120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420553120706f696e74507265636f6d7075746564207a2a562076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f6620563220646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563220706f696e74507265636f6d7075746564207a2a552076616c756520697320696e636f7272656374507265636f6d7075746564205920636f6f7264696e617465206f66204520646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564204520706f696e74507265636f6d7075746564205920636f6f7264696e617465206f66205620646f65736e277420636f72726573706f6e6420746f20636f6d70726573736564205620706f696e74507265636f6d7075746564205920636f6f7264696e617465206f6620563120646f65736e277420636f72726573706f6e6420746f20636f6d7072657373656420563120706f696e74506f696e7420682a4531206973206e6f7420612076616c696420454320706f696e74506f696e74207a2a55206973206e6f7420612076616c696420454320706f696e74506f696e7420682a5631206973206e6f7420612076616c696420454320706f696e74507265636f6d707574656420682a56312076616c756520697320696e636f7272656374a264697066735822122076193439ee0055e05ddf9bade7c4e8fef3253f3d86751105920a21f4a719c33264736f6c63430007060033",
  "bytecodeSha1": "d367692e946672550110035f31fd3d22142fbb83",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.7.6+commit.7338295f"
  },
  "contractName": "ReEncryptionValidator",
  "coverageMap": {
    "branches": {
      "0": {
        "ReEncryptionValidator.isOnCurve": {
          "130": [
            14109,
            14116,
            true
          ],
          "131": [
            14120,
            14127,
            false
          ]
        },
        "ReEncryptionValidator.validateCFrag": {
          "112": [
            2687,
            2817,
            true
          ],
          "113": [
            2965,
            3030,
            true
          ],
          "114": [
            3853,
            3920,
            true
          ],
          "115": [
            5017,
            5031,
            false
          ],
          "116": [
            5203,
            5333,
            true
          ],
          "117": [
            5481,
            5546,
            true
          ],
          "118": [
            5626,
            5881,
            true
          ],
          "119": [
            6003,
            6165,
            true
          ],
          "120": [
            6324,
            6391,
            true
          ],
          "121": [
            6469,
            6695,
            true
          ],
          "122": [
            6819,
            6991,
            true
          ],
          "123": [
            7439,
            7453,
            false
          ],
          "124": [
            7699,
            7764,
            true
          ],
          "125": [
            7845,
            8100,
            true
          ],
          "126": [
            8248,
            8440,
            true
          ],
          "127": [
            8614,
            8681,
            true
          ],
          "128": [
            8763,
            9013,
            true
          ],
          "129": [
            9179,
            9355,
            true
          ]
        }
      },
      "2": {
        "UmbralDeserializer.toCapsule": {
          "132": [
            2226,
            2262,
            true
          ]
        },
        "UmbralDeserializer.toCapsuleFrag": {
          "133": [
            4159,
            4201,
            true
          ]
        },
        "UmbralDeserializer.toCorrectnessProof": {
          "136": [
            2809,
            2852,
            true
          ],
          "137": [
            3387,
            3429,
            false
          ]
        },
        "UmbralDeserializer.toPreComputedData": {
          "134": [
            4801,
            4849,
            true
          ],
          "135": [
            7414,
            7464,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "ReEncryptionValidator.addAffineJacobian": {
          "84": [
            16417,
            16449
          ],
          "85": [
            16711,
            16777
          ],
          "86": [
            16787,
            16858
          ],
          "87": [
            16868,
            16876
          ]
        },
        "ReEncryptionValidator.checkCompressedPoint": {
          "81": [
            13039,
            13089
          ]
        },
        "ReEncryptionValidator.computeProofChallengeScalar": {
          "79": [
            10464,
            10814
          ],
          "80": [
            10825,
            11321
          ]
        },
        "ReEncryptionValidator.doubleJacobian": {
          "107": [
            17195,
            17203
          ],
          "108": [
            17519,
            17527
          ],
          "109": [
            17537,
            17638
          ],
          "110": [
            17648,
            17672
          ]
        },
        "ReEncryptionValidator.ecmulVerify": {
          "90": [
            14910,
            14936
          ]
        },
        "ReEncryptionValidator.eqAffineJacobian": {
          "88": [
            15412,
            15424
          ],
          "89": [
            15559,
            15657
          ]
        },
        "ReEncryptionValidator.extendedKeccakToBN": {
          "105": [
            11801,
            11942
          ],
          "106": [
            12327,
            12383
          ]
        },
        "ReEncryptionValidator.isOnCurve": {
          "82": [
            14142,
            14154
          ],
          "83": [
            14291,
            14313
          ]
        },
        "ReEncryptionValidator.validateCFrag": {
          "0": [
            2679,
            2913
          ],
          "1": [
            2957,
            3092
          ],
          "2": [
            3845,
            3984
          ],
          "3": [
            5046,
            5058
          ],
          "4": [
            5195,
            5429
          ],
          "5": [
            5473,
            5608
          ],
          "6": [
            5618,
            5952
          ],
          "7": [
            5995,
            6271
          ],
          "8": [
            6316,
            6451
          ],
          "9": [
            6461,
            6768
          ],
          "10": [
            6811,
            7102
          ],
          "11": [
            7113,
            7423
          ],
          "12": [
            7468,
            7480
          ],
          "13": [
            7691,
            7827
          ],
          "14": [
            7837,
            8171
          ],
          "15": [
            8240,
            8561
          ],
          "16": [
            8606,
            8745
          ],
          "17": [
            8755,
            9086
          ],
          "18": [
            9171,
            9468
          ],
          "19": [
            9479,
            9795
          ]
        }
      },
      "2": {
        "UmbralDeserializer.copyBytes": {
          "111": [
            10144,
            10188
          ]
        },
        "UmbralDeserializer.copyPoint": {
          "91": [
            8225,
            8243
          ],
          "92": [
            8253,
            8275
          ],
          "93": [
            8285,
            8322
          ]
        },
        "UmbralDeserializer.toCapsule": {
          "20": [
            2218,
            2263
          ],
          "21": [
            2326,
            2370
          ],
          "22": [
            2380,
            2424
          ],
          "23": [
            2434,
            2478
          ]
        },
        "UmbralDeserializer.toCapsuleFrag": {
          "24": [
            4151,
            4202
          ],
          "25": [
            4264,
            4307
          ],
          "26": [
            4317,
            4360
          ],
          "27": [
            4370,
            4405
          ],
          "28": [
            4447,
            4497
          ],
          "29": [
            4415,
            4437
          ],
          "30": [
            4508,
            4587
          ]
        },
        "UmbralDeserializer.toCorrectnessProof": {
          "94": [
            2801,
            2853
          ],
          "95": [
            2864,
            2909
          ],
          "96": [
            2919,
            2964
          ],
          "97": [
            2974,
            3032
          ],
          "98": [
            3042,
            3093
          ],
          "99": [
            3103,
            3146
          ],
          "100": [
            3190,
            3238
          ],
          "101": [
            3156,
            3179
          ],
          "102": [
            3305,
            3373
          ],
          "103": [
            3445,
            3515
          ],
          "104": [
            3529,
            3587
          ]
        },
        "UmbralDeserializer.toPreComputedData": {
          "31": [
            4793,
            4850
          ],
          "32": [
            4968,
            5016
          ],
          "33": [
            5026,
            5048
          ],
          "34": [
            5059,
            5108
          ],
          "35": [
            5118,
            5140
          ],
          "36": [
            5151,
            5200
          ],
          "37": [
            5210,
            5232
          ],
          "38": [
            5243,
            5292
          ],
          "39": [
            5302,
            5324
          ],
          "40": [
            5335,
            5385
          ],
          "41": [
            5395,
            5417
          ],
          "42": [
            5428,
            5478
          ],
          "43": [
            5488,
            5510
          ],
          "44": [
            5521,
            5570
          ],
          "45": [
            5580,
            5602
          ],
          "46": [
            5613,
            5661
          ],
          "47": [
            5671,
            5693
          ],
          "48": [
            5704,
            5753
          ],
          "49": [
            5763,
            5785
          ],
          "50": [
            5796,
            5845
          ],
          "51": [
            5855,
            5877
          ],
          "52": [
            5888,
            5937
          ],
          "53": [
            5947,
            5969
          ],
          "54": [
            5980,
            6030
          ],
          "55": [
            6040,
            6062
          ],
          "56": [
            6073,
            6123
          ],
          "57": [
            6133,
            6155
          ],
          "58": [
            6166,
            6215
          ],
          "59": [
            6225,
            6247
          ],
          "60": [
            6258,
            6307
          ],
          "61": [
            6317,
            6339
          ],
          "62": [
            6350,
            6399
          ],
          "63": [
            6409,
            6431
          ],
          "64": [
            6442,
            6491
          ],
          "65": [
            6501,
            6523
          ],
          "66": [
            6534,
            6584
          ],
          "67": [
            6594,
            6616
          ],
          "68": [
            6627,
            6677
          ],
          "69": [
            6687,
            6709
          ],
          "70": [
            6720,
            6769
          ],
          "71": [
            6779,
            6801
          ],
          "72": [
            6812,
            6865
          ],
          "73": [
            6875,
            6888
          ],
          "74": [
            6899,
            6962
          ],
          "75": [
            6972,
            6985
          ],
          "76": [
            7329,
            7373
          ],
          "77": [
            7383,
            7395
          ],
          "78": [
            7406,
            7465
          ]
        }
      }
    }
  },
  "dependencies": [
    "UmbralDeserializer"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "196:17485:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;589:118;;;:::i;:::-;;;;;;;;;;;;;;;;713;;;:::i;531:52::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1553:8281;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1553:8281:0;;;;;;;;-1:-1:-1;1553:8281:0;;-1:-1:-1;;1553:8281:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1553:8281:0;;;;;;;;-1:-1:-1;1553:8281:0;;-1:-1:-1;;1553:8281:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1553:8281:0;;-1:-1:-1;1553:8281:0;;-1:-1:-1;;;;;1553:8281:0:i;:::-;;;;;;;;;;;;;;;;;;589:118;641:66;589:118;:::o;713:::-;765:66;713:118;:::o;531:52::-;579:4;531:52;:::o;1553:8281::-;1721:4;1741:42;1786:25;:13;:23;:25::i;:::-;1741:70;;1821:44;1868:27;:11;:25;:27::i;:::-;1821:74;;1905:54;1962:37;:17;:35;:37::i;:::-;1905:94;;2495:9;2507:45;2535:8;2545:6;2507:27;:45::i;:::-;2721:15;;:20;;2755:22;;;;;2791:25;;2495:57;;-1:-1:-1;2687:130:0;;:20;:130::i;:::-;2679:234;;;;-1:-1:-1;;;2679:234:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2965:65;2975:12;:26;;;3003:12;:26;;;2965:9;:65::i;:::-;2957:135;;;;;-1:-1:-1;;;2957:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3853:67;3863:12;:27;;;3892:12;:27;;;3853:9;:67::i;:::-;3845:139;;;;-1:-1:-1;;;3845:139:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4686:19;4708:293;;;;;;;;;4739:12;:26;;;4708:293;;;;4768:12;:26;;;4708:293;;;4809:182;;;;;;;;;4845:6;:12;;;:20;;;:27;;;4809:182;;;;4874:12;:26;;;4809:182;;;;;;;;;;;4920:12;:27;;;4809:182;;;;4949:12;:27;;;4809:182;;;:17;:182::i;:::-;4708:16;:293::i;:::-;4686:315;;5017:14;5012:57;;5053:5;5046:12;;;;;;;;;5012:57;5237:15;;;;;:20;;5271:22;;;5307:25;;;;5203:130;;5237:20;5271:22;5203:20;:130::i;:::-;5195:234;;;;-1:-1:-1;;;5195:234:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5481:65;5491:12;:26;;;5519:12;:26;;;5481:9;:65::i;:::-;5473:135;;;;;-1:-1:-1;;;5473:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5626:255;5651:8;:15;;;:22;;;5702:12;:25;;;5753:6;:12;;;:18;;;5802:12;:26;;;5854:12;:26;;;5626:11;:255::i;:::-;5618:334;;;;-1:-1:-1;;;5618:334:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6037:14;;;;;:19;;6089:21;;;6138:26;;;;6003:162;;6037:19;6089:21;6003:20;:162::i;:::-;5995:276;;;;-1:-1:-1;;;5995:276:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6324:67;6334:12;:27;;;6363:12;:27;;;6324:9;:67::i;:::-;6316:135;;;;-1:-1:-1;;;6316:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6469:226;6494:6;:14;;;:21;;;6546:12;:26;;;6598:1;6613:12;:27;;;6667:12;:27;;;6469:11;:226::i;:::-;6461:307;;;;-1:-1:-1;;;6461:307:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6853:12;;;;:20;;;;;:25;;6910:27;;;6964:26;;;;6819:172;;6853:25;6910:27;6819:20;:172::i;:::-;6811:291;;;;-1:-1:-1;;;6811:291:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7130:293;;;;;;;;;7161:12;:26;;;7130:293;;;;7190:12;:26;;;7130:293;;;7231:182;;;;;;;;;7267:6;:12;;;:20;;;:27;;;7231:182;;;;7296:12;:26;;;7231:182;;;;;;;;;;;7342:12;:27;;;7231:182;;;;7371:12;:27;;;7231:182;;;:17;:182::i;7130:293::-;7113:310;;7439:14;7434:57;;7475:5;7468:12;;;;;;;;;7434:57;7699:65;7709:12;:26;;;7737:12;:26;;;7699:9;:65::i;:::-;7691:136;;;;-1:-1:-1;;;7691:136:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7845:255;641:66;765;7972:6;:12;;;:18;;;8021:12;:26;;;8073:12;:26;;;7845:11;:255::i;:::-;7837:334;;;;-1:-1:-1;;;7837:334:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8282:12;;;;:33;;;:38;;8349:40;;;;;8413:26;;;;8248:192;;8282:38;8349:40;8248:20;:192::i;:::-;8240:321;;;;-1:-1:-1;;;8240:321:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8614:67;8624:12;:27;;;8653:12;:27;;;8614:9;:67::i;:::-;8606:139;;;;-1:-1:-1;;;8606:139:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8763:250;8788:6;:12;;;:33;;;:40;;;8852:12;:26;;;8916:1;8931:12;:27;;;8985:12;:27;;;8763:11;:250::i;:::-;8755:331;;;;-1:-1:-1;;;8755:331:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9213:12;;;;:26;;;:31;;9272:33;;;;;9328:26;;;;9179:176;;9213:31;9272:33;9179:20;:176::i;:::-;9171:297;;;;-1:-1:-1;;;9171:297:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9496:299;;;;;;;;;9527:12;:26;;;9496:299;;;;9556:12;:26;;;9496:299;;;9597:188;;;;;;;;;9633:6;:12;;;:26;;;:33;;;9597:188;;;;9668:12;:26;;;9597:188;;;;;;;;;;;9714:12;:27;;;9597:188;;;;9743:12;:27;;;9597:188;;;:17;:188::i;9496:299::-;9479:316;-1:-1:-1;;;;;;1553:8281:0;;;;;;:::o;2102:383:2:-;2180:22;;:::i;:::-;2226:20;;1666:28;2226:36;2218:45;;;;;;2273:15;2291:25;2302:13;2291:10;:25::i;:::-;2273:43;;2336:34;2346:7;2355;:14;;;2336:9;:34::i;:::-;2326:44;;2390:34;2400:7;2409;:14;;;2390:9;:34::i;:::-;2380:44;;2458:19;2469:7;2458:10;:19::i;:::-;2434:13;;;:44;-1:-1:-1;2434:7:2;2102:383;-1:-1:-1;2102:383:2:o;3976:618::-;4056:24;;:::i;:::-;4123:18;;1906:42;4159;;;4151:51;;;;;;4213:15;4231:23;4242:11;4231:10;:23::i;:::-;4213:41;;4274:33;4284:7;4293:5;:13;;;4274:9;:33::i;:::-;4264:43;;4327:33;4337:7;4346:5;:13;;;4327:9;:33::i;:::-;4317:43;;4386:19;4397:7;4386:10;:19::i;:::-;4370:13;;;:35;4476:20;;;;1546:2;4415:22;;;;;4457:40;;4415:22;;4457:9;:40::i;:::-;4447:50;-1:-1:-1;4522:65:2;4447:50;-1:-1:-1;;4550:36:2;;4522:18;:65::i;:::-;4508:11;;;:79;-1:-1:-1;4508:5:2;;3976:618;-1:-1:-1;;3976:618:2:o;4661:2811::-;4750:27;;:::i;:::-;4801:23;;1995:32;4801:48;4793:57;;;;;;4860:23;4886:28;4897:16;4886:10;:28::i;:::-;4860:54;-1:-1:-1;4860:54:2;4996:19;4860:54;4996:10;:19::i;:::-;4968:48;;1546:2;5026:22;5088:19;5026:22;5088:10;:19::i;:::-;5059:18;;;;:49;;;;5118:22;5180:19;5118:22;5180:10;:19::i;:::-;5151:18;;;:49;1546:2;5210:22;5272:19;5210:22;5272:10;:19::i;:::-;5243:18;;;:49;1546:2;5302:22;5365:19;5302:22;5365:10;:19::i;:::-;5335;;;:50;1546:2;5395:22;5458:19;5395:22;5458:10;:19::i;:::-;5428;;;:50;1546:2;5488:22;5550:19;5488:22;5550:10;:19::i;:::-;5521:18;;;:49;1546:2;5580:22;5641:19;5580:22;5641:10;:19::i;:::-;5613:17;;;:48;1546:2;5671:22;5733:19;5671:22;5733:10;:19::i;:::-;5704:18;;;:49;1546:2;5763:22;5825:19;5763:22;5825:10;:19::i;:::-;5796:18;;;:49;1546:2;5855:22;5917:19;5855:22;5917:10;:19::i;:::-;5888:18;;;:49;1546:2;5947:22;6010:19;5947:22;6010:10;:19::i;:::-;5980;;;:50;1546:2;6040:22;6103:19;6040:22;6103:10;:19::i;:::-;6073;;;:50;1546:2;6133:22;6195:19;6133:22;6195:10;:19::i;:::-;6166:18;;;:49;1546:2;6225:22;6287:19;6225:22;6287:10;:19::i;:::-;6258:18;;;:49;1546:2;6317:22;6379:19;6317:22;6379:10;:19::i;:::-;6350:18;;;:49;1546:2;6409:22;6471:19;6409:22;6471:10;:19::i;:::-;6442:18;;;:49;1546:2;6501:22;6564:19;6501:22;6564:10;:19::i;:::-;6534;;;:50;1546:2;6594:22;6657:19;6594:22;6657:10;:19::i;:::-;6627;;;:50;1546:2;6687:22;6749:19;6687:22;6749:10;:19::i;:::-;6720:18;;;:49;1546:2;6779:22;6846:19;6779:22;6846:10;:19::i;:::-;6812:31;;;:53;6886:2;6875:13;6941:19;6875:13;6941:10;:19::i;:::-;6925:37;;6899:23;;;:63;6983:2;6972:13;7353:19;6972:13;7353:10;:19::i;:::-;-1:-1:-1;;;;;;7329:44:2;:14;;;:44;7394:1;7383:12;1995:32;7425:39;;7414:50;;7406:59;;;;;;4661:2811;;;;;:::o;9840:1559:0:-;10191:15;;:20;;10225:22;;;;;10285:14;;:19;;10318:21;;;;10377:12;;;;;:20;:25;;10416:27;;;;10138:315;;;-1:-1:-1;;;;;;10138:315:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10552:15;;;;:20;;10586:22;;;;10646:14;;;;:19;;10679:21;;;;10738:12;;:20;;;:25;;10777:27;;;;10476:338;;10012:7;;10138:315;;10552:20;;10586:22;;10646:19;;10476:338;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10476:338:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10476:338:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;;10476:338:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10476:338:0;;;;;;;-1:-1:-1;10476:338:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11030:12;;;;:33;;;;:38;;11082:40;;;;11160:26;;;;:31;;11205:33;;;;11290:21;;;;;10837:484;;10476:338;;-1:-1:-1;10476:338:0;;-1:-1:-1;;;;10913:31:0;641:66;;11030:38;;11082:40;;11160:31;;11205:33;;11290:21;;10837:484;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10837:484:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10837:484:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10837:484:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10825:496;;11332:9;11344:29;11363:9;11344:18;:29::i;:::-;11332:41;-1:-1:-1;;;9840:1559:0;;;;;:::o;12863:230::-;12976:4;13006:11;;;-1:-1:-1;;13021:14:0;;13006:29;;;;13046:43;;;;;13062:27;13072:7;13081;13062:9;:27::i;:::-;13039:50;12863:230;-1:-1:-1;;;;;12863:230:0:o;13989:331::-;14055:4;-1:-1:-1;;14109:7:0;;;;;:18;;;14126:1;14120:2;:7;;14109:18;14105:60;;;14149:5;14142:12;;;;;14105:60;14175:10;14203:1;14188:17;;;;;14199:2;14195;14188:17;14175:30;;14215:17;14279:1;14235:46;;;;;14276:1;14272;14242:32;;;;;14268:2;14264:1;14249:17;;;;;14260:2;14256;14249:17;14242:32;14235:46;14298:15;;;;;13989:331;-1:-1:-1;;;;;13989:331:0:o;16099:784::-;16201:16;;:::i;:::-;16277:4;;;16305;;;;16333;;16361;;;;-1:-1:-1;;1012:66:0;16277:4;16333;16381:7;;;16380:22;;;;;16399:2;16394:1;:7;16380:22;16376:84;;;16424:25;;;;;;;;;16440:1;16424:25;;;;16443:1;16424:25;;;;16446:1;16424:25;;;:14;:25::i;:::-;16417:32;;;;;;;;;16376:84;16469:9;16497:1;16481:18;;;;;16494:1;16492;:3;16488:2;16481:18;16469:30;;16523:9;16551:1;16535:18;;;;;16548:1;16546;:3;16542:2;16535:18;16523:30;;16577:9;16602:1;16589:15;;;;;16599:1;16596;16589:15;16577:27;;16625:9;16650:1;16637:15;;;;;16647:1;16644;16637:15;16625:27;;16674:9;16699:1;16686:15;;;;;16696:1;16693;16686:15;16674:27;;16775:1;16718:59;;;;;16771:1;16744:29;;;;;16768:1;16764;16751:15;;;;;16761:1;16758;16751:15;16744:29;16742:1;:31;16738:1;16725:15;;;;;16735:1;16732;16725:15;16718:59;16711:66;;16856:1;;16794:64;;;;16852:1;16839:15;;;;;16849:1;16846;16839:15;16837:1;:17;16833:1;16801:34;;;;;16829:1;16811:20;;;;;16823:4;;16821:6;;16818:1;16811:20;16808:1;16801:34;16794:64;16787:4;;;:71;-1:-1:-1;;;16868:4:0;;;:8;-1:-1:-1;16787:1:0;;16099:784;-1:-1:-1;;;;;;;16099:784:0:o;15239:426::-;15373:4;;;;15345;;15373;15387:80;;15419:5;15412:12;;;;;15387:80;-1:-1:-1;;15477:9:0;1012:66;15543:2;15539;15532:17;15598:4;;15510:39;;-1:-1:-1;15592:1:0;;15566:28;;;;15573:4;;15579:11;;15566:28;:36;:91;;;;-1:-1:-1;15653:4:0;;;;15647:1;;15606:43;;;;15643:1;15619:26;;;;;15639:2;15626:11;15619:26;15613:4;;;;15606:43;:51;15566:91;15559:98;15239:426;-1:-1:-1;;;;;;15239:426:0:o;14424:516::-;14562:4;-1:-1:-1;;14562:4:0;14687:89;14562:4;14706:2;14712:6;;;14706:13;14730:2;14597:66;14758:2;14750:6;14743:31;14735:40;;14687:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;14687:89:0;;;-1:-1:-1;;14687:89:0;;;;14829:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;14819:35;;;;;;;-1:-1:-1;;;;;14917:19:0;;;14811:91;;14917:19;;-1:-1:-1;;;;14424:516:0;;;;;;;:::o;7607:177:2:-;7744:2;7732:15;;7707:71::o;7871:458::-;8144:15;;8203:1;8189:16;;8183:23;7960:21;8136:24;;;;8225:18;;8253:13;;;;:22;1584:2;8301:21;;7871:458::o;8713:151::-;8833:15;;8809:49::o;2652:952::-;2756:29;;:::i;:::-;1742:45;2809:43;;;2801:52;;;;;;2875:34;2885:8;2895:5;:13;;;2875:9;:34::i;:::-;2864:45;;2930:34;2940:8;2950:5;:13;;;2930:9;:34::i;:::-;2919:45;;2985:47;2995:8;3005:5;:26;;;2985:9;:47::i;:::-;2974:58;;3053:40;3063:8;3073:5;:19;;;3053:9;:40::i;:::-;3042:51;;3125:20;3136:8;3125:10;:20::i;:::-;3103:11;;;:43;1626:2;3213:25;;;;;;;;;;1546:2;3156:23;;;;;3213:25;;;;;;;;;-1:-1:-1;;;3190:20:2;;;:48;;;3316:57;;3326:8;;1626:2;3316:9;:57::i;:::-;3305:68;-1:-1:-1;1742:45:2;3387:42;;3383:215;;;-1:-1:-1;;3472:42:2;;3462:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3462:53:2;-1:-1:-1;3445:14:2;;;:70;;;3565:21;;3529:58;;3539:8;;3529:9;:58::i;:::-;;2652:952;;;;:::o;11405:985:0:-;11477:7;11497:13;11520;11703:18;-1:-1:-1;;;11777:4:0;11769:13;;11784:5;11724:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11724:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11703:87;;11852:4;11859:5;11829:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11829:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11819:47;;;;;;11927:4;11934:5;11904:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11904:36:0;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11904:36:0;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11904:36:0;;;;;;11894:47;;;;;;;;11801:141;;-1:-1:-1;11894:47:0;;-1:-1:-1;12114:35:0;;-1:-1:-1;;;12179:66:0;-1:-1:-1;;;;12179:66:0;;-1:-1:-1;12300:5:0;12292;12277:40;12256:61;;12373:9;12338:45;;;;;12365:5;12345:10;12338:45;12334:1;:49;12327:56;;;;;;;;11405:985;;;;:::o;17052:627::-;17117:16;;:::i;:::-;17157:4;;;;;17171:32;;17195:8;;;17171:32;17258:4;;-1:-1:-1;;1012:66:0;17213:9;1012:66;17296:4;;;;17293:1;17286:18;17272:32;;17314:12;17346:1;17329:19;;;;;17341:3;17336;17329:19;17314:34;;17358:9;17386:1;17370:18;;;;;17383:1;17377:4;17370:18;17358:30;;17398:9;17437:1;17410:29;;;;;17433:1;17420:15;;;;;17430:1;17427;17420:15;17417:1;17410:29;17398:41;;17449:9;17507:1;17461:48;;;;;17504:1;17485:21;;;;;17501:1;-1:-1:-1;;17485:21:0;17481:1;17468:15;;;;;17478:1;17475;17468:15;17461:48;17519:8;;;17449:60;-1:-1:-1;17636:1:0;;17544:94;;;;17632:1;17586:48;;;;;17628:1;17609:21;;;;;17622:4;17616;17609:21;-1:-1:-1;;;;;17586:48:0;17582:1;17551:33;;;;;17578:1;17561:19;;;;;17575:1;17571;:5;17568:1;17561:19;17558:1;17551:33;17544:94;17537:4;;;:101;17670:1;;17655:17;;;;17667:1;17662:3;17655:17;17648:4;;;:24;-1:-1:-1;17648:1:0;;17052:627;-1:-1:-1;;;;;;;;17052:627:0:o;9236:959:2:-;9369:21;9659:2;9654;9640:12;9636:21;9632:30;9689:13;9747:2;9738:7;9734:16;9794:1;9763:301;9877:5;9874:1;9871:12;9763:301;;;9970:2;9963:10;;10029:19;;;10023:26;9997:24;;;9990:60;9914:1;9907:9;9763:301;;;9783:14;;;;10123:1;10111:7;10105:14;10101:2;10097:23;10088:7;10084:37;10077:48;10176:12;10160:13;:28;10144:44;;9236:959;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "validateCFrag(bytes,bytes,bytes)": {
        "notice": "Check correctness of re-encryption",
        "params": {
          "_cFragBytes": "Capsule frag",
          "_capsuleBytes": "Capsule",
          "_precomputedBytes": "Additional precomputed data"
        }
      }
    },
    "notice": "Validates re-encryption correctness.",
    "version": 1
  },
  "offset": [
    196,
    17681
  ],
  "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x55A80E7 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x4B4B4B12 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0xC5F1F5CA EQ PUSH2 0x7D JUMPI DUP1 PUSH4 0xE650FAA7 EQ PUSH2 0x9B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x63 PUSH2 0x263 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x63 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x85 PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x24F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x2B0 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH32 0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F DUP2 JUMP JUMPDEST PUSH32 0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936 DUP2 JUMP JUMPDEST PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BC DUP6 PUSH2 0xA46 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2C9 DUP6 PUSH2 0xA9D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2D6 DUP6 PUSH2 0xB25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E4 DUP5 DUP5 PUSH2 0xD03 JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD DUP5 MLOAD SWAP3 SWAP4 POP PUSH2 0x2FC SWAP3 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x19D4 PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x349 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x39A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F696E74207A45206973206E6F7420612076616C696420454320706F696E74 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x3AC DUP3 PUSH1 0x80 ADD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x3E7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1AA8 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x458 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 ADD MLOAD DUP2 MSTORE POP PUSH2 0x453 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x80 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0xC0 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x80 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0xA0 ADD MLOAD DUP2 MSTORE POP PUSH2 0x1032 JUMP JUMPDEST PUSH2 0x115A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x46D JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x488 SWAP3 SWAP2 SWAP1 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x4C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x46 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A1A PUSH1 0x46 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4D7 DUP4 PUSH2 0x100 ADD MLOAD DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x528 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F696E74207A56206973206E6F7420612076616C696420454320706F696E74 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x553 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0xE0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x80 ADD MLOAD DUP7 PUSH2 0x100 ADD MLOAD DUP8 PUSH2 0x120 ADD MLOAD PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0x58E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1948 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x5AA SWAP3 SWAP2 SWAP1 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x5E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1A60 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5F9 DUP4 PUSH2 0x160 ADD MLOAD DUP5 PUSH2 0x180 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1AEB PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x658 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x140 ADD MLOAD DUP5 DUP7 PUSH2 0x160 ADD MLOAD DUP8 PUSH2 0x180 ADD MLOAD PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0x693 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1B0D PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP1 MLOAD SWAP2 ADD MLOAD PUSH2 0x1A0 DUP6 ADD MLOAD PUSH2 0x6B4 SWAP3 SWAP2 SWAP1 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x6EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x196A PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x75E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH2 0x100 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x120 ADD MLOAD DUP2 MSTORE POP PUSH2 0x453 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x80 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x1A0 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH2 0x160 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH2 0x180 ADD MLOAD DUP2 MSTORE POP PUSH2 0x1032 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x773 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x787 DUP4 PUSH2 0x1C0 ADD MLOAD DUP5 PUSH2 0x1E0 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x7C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1ACA PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x821 PUSH32 0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F PUSH32 0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936 DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x80 ADD MLOAD DUP7 PUSH2 0x1C0 ADD MLOAD DUP8 PUSH2 0x1E0 ADD MLOAD PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0x85C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x19B2 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH2 0x200 DUP6 ADD MLOAD PUSH2 0x87E SWAP3 SWAP2 SWAP1 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1900 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8CD DUP4 PUSH2 0x220 ADD MLOAD DUP5 PUSH2 0x240 ADD MLOAD PUSH2 0xFCD JUMP JUMPDEST PUSH2 0x908 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1896 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x930 DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x200 ADD MLOAD DUP5 DUP7 PUSH2 0x220 ADD MLOAD DUP8 PUSH2 0x240 ADD MLOAD PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0x96B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1B0D PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x60 ADD MLOAD DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH2 0x260 DUP6 ADD MLOAD PUSH2 0x98D SWAP3 SWAP2 SWAP1 PUSH2 0xFA3 JUMP JUMPDEST PUSH2 0x9C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x48 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x18B8 PUSH1 0x48 SWAP2 CODECOPY PUSH1 0x60 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA37 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH2 0x1C0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH2 0x1E0 ADD MLOAD DUP2 MSTORE POP PUSH2 0x453 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x80 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0x260 ADD MLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH2 0x220 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH2 0x240 ADD MLOAD DUP2 MSTORE POP PUSH2 0x1032 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xA4E PUSH2 0x16D4 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x62 EQ PUSH2 0xA5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA67 DUP4 PUSH2 0x128E JUMP JUMPDEST SWAP1 POP PUSH2 0xA77 DUP2 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP PUSH2 0xA87 DUP2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP PUSH2 0xA92 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAA5 PUSH2 0x1701 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x167 DUP2 LT ISZERO PUSH2 0xAB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAC1 DUP5 PUSH2 0x128E JUMP JUMPDEST SWAP1 POP PUSH2 0xAD1 DUP2 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP PUSH2 0xAE1 DUP2 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP PUSH2 0xAEC DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xB08 SWAP1 DUP3 SWAP1 PUSH2 0x1294 JUMP JUMPDEST SWAP1 POP PUSH2 0xB18 DUP2 PUSH1 0x82 NOT DUP5 ADD PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE POP SWAP1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB2D PUSH2 0x1747 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2B9 EQ PUSH2 0xB3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB47 DUP4 PUSH2 0x128E JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0xB53 DUP2 PUSH2 0x12AF JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 ADD PUSH2 0xB61 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xB74 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB85 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB96 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBA7 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBB8 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBC9 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBDA DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBEC DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xBFE DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC10 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC22 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC34 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x1A0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC46 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC58 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x1E0 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC6A DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x200 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC7C DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x220 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC8E DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x240 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCA0 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x260 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCB2 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH2 0x280 DUP5 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCC4 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x60 SHR PUSH2 0x2A0 DUP5 ADD MSTORE PUSH1 0x14 ADD PUSH2 0xCD9 DUP2 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT AND PUSH2 0x2C0 DUP5 ADD MSTORE PUSH1 0x5 ADD PUSH2 0x2B9 DUP3 ADD DUP2 EQ PUSH2 0xCFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD DUP4 MLOAD DUP1 MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x80 DUP7 ADD DUP1 MLOAD MLOAD DUP1 MLOAD SWAP1 DUP8 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0xF8 SWAP10 DUP11 SHL DUP2 AND DUP3 DUP13 ADD MSTORE PUSH1 0x21 DUP3 ADD SWAP9 SWAP1 SWAP9 MSTORE SWAP6 DUP9 SHL DUP8 AND PUSH1 0x41 DUP8 ADD MSTORE PUSH1 0x42 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP6 SHL SWAP1 SWAP4 AND PUSH1 0x62 DUP4 ADD MSTORE PUSH1 0x63 DUP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x83 DUP3 ADD SWAP1 MSTORE DUP4 DUP7 ADD MLOAD DUP1 MLOAD SWAP1 DUP6 ADD MLOAD DUP7 DUP7 ADD MLOAD DUP1 MLOAD SWAP1 DUP8 ADD MLOAD SWAP5 MLOAD DUP8 ADD MLOAD DUP1 MLOAD SWAP1 DUP9 ADD MLOAD DUP8 MLOAD PUSH1 0x0 SWAP10 DUP10 SWAP9 SWAP7 SWAP8 SWAP6 SWAP7 SWAP5 SWAP6 PUSH1 0xA3 ADD SWAP2 DUP3 SWAP2 DUP11 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xDCF JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xDB0 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0xF8 SWAP11 DUP12 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP1 DUP2 AND SWAP3 SWAP1 SWAP5 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP3 ADD SWAP10 SWAP1 SWAP10 MSTORE SWAP7 DUP10 SHL DUP3 AND PUSH1 0x21 DUP9 ADD MSTORE POP PUSH1 0x22 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP5 SHL AND PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x43 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x63 DUP3 ADD DUP2 MSTORE PUSH1 0x80 DUP9 ADD MLOAD SWAP1 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x60 DUP4 ADD MLOAD DUP1 MLOAD SWAP1 DUP7 ADD MLOAD PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD DUP8 MLOAD SWAP8 SWAP10 POP DUP10 SWAP9 POP PUSH1 0x1 PUSH1 0xF9 SHL SWAP8 PUSH32 0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F SWAP8 SWAP5 SWAP7 SWAP4 SWAP6 SWAP3 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x83 SWAP1 SWAP3 ADD SWAP2 DUP3 SWAP2 SWAP1 DUP12 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xEC9 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xEAA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xF50 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xF31 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0xF98 DUP3 PUSH2 0x13B9 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 AND PUSH1 0x1 NOT DUP6 ADD PUSH1 0xFF AND EQ DUP1 DUP1 ISZERO PUSH2 0xFC4 JUMPI POP PUSH2 0xFC4 DUP5 DUP5 PUSH2 0xFCD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH5 0x1000003D0 NOT DUP1 DUP5 LT ISZERO DUP1 PUSH2 0xFE5 JUMPI POP DUP1 DUP4 LT ISZERO JUMPDEST ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH2 0xFFE JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD SWAP1 POP PUSH1 0x0 DUP3 DUP1 PUSH2 0x100D JUMPI INVALID JUMPDEST PUSH1 0x7 DUP5 DUP1 PUSH2 0x1017 JUMPI INVALID JUMPDEST DUP9 DUP7 DUP1 PUSH2 0x1020 JUMPI INVALID JUMPDEST DUP11 DUP12 MULMOD MULMOD ADDMOD SWAP2 SWAP1 SWAP2 EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x103A PUSH2 0x180B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD MLOAD DUP5 MLOAD SWAP2 DUP6 ADD MLOAD PUSH5 0x1000003D0 NOT SWAP4 SWAP3 SWAP1 DUP2 DUP5 EQ DUP1 ISZERO PUSH2 0x1060 JUMPI POP DUP1 DUP4 EQ JUMPDEST ISZERO PUSH2 0x1095 JUMPI PUSH2 0x1089 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE POP PUSH2 0x1598 JUMP JUMPDEST SWAP6 POP POP POP POP POP POP PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x0 DUP6 DUP1 PUSH2 0x109F JUMPI INVALID JUMPDEST DUP5 DUP8 SUB DUP4 ADDMOD SWAP1 POP PUSH1 0x0 DUP7 DUP1 PUSH2 0x10B0 JUMPI INVALID JUMPDEST DUP7 DUP9 SUB DUP6 ADDMOD SWAP1 POP PUSH1 0x0 DUP8 DUP1 PUSH2 0x10C1 JUMPI INVALID JUMPDEST DUP3 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP9 DUP1 PUSH2 0x10D0 JUMPI INVALID JUMPDEST DUP4 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP10 DUP1 PUSH2 0x10DF JUMPI INVALID JUMPDEST DUP4 DUP11 MULMOD SWAP1 POP DUP10 DUP1 PUSH2 0x10EC JUMPI INVALID JUMPDEST DUP11 DUP1 PUSH2 0x10F4 JUMPI INVALID JUMPDEST DUP4 DUP13 DUP1 PUSH2 0x10FD JUMPI INVALID JUMPDEST DUP5 PUSH1 0x2 MULMOD ADDMOD DUP12 SUB DUP12 DUP1 PUSH2 0x110C JUMPI INVALID JUMPDEST DUP8 DUP9 MULMOD ADDMOD DUP12 MSTORE DUP10 DUP1 PUSH2 0x111A JUMPI INVALID JUMPDEST DUP11 DUP1 PUSH2 0x1122 JUMPI INVALID JUMPDEST DUP4 DUP11 MULMOD DUP12 SUB DUP12 DUP1 PUSH2 0x112F JUMPI INVALID JUMPDEST DUP13 DUP1 PUSH2 0x1137 JUMPI INVALID JUMPDEST DUP15 MLOAD DUP15 SUB DUP6 ADDMOD DUP9 MULMOD ADDMOD PUSH1 0x20 DUP13 ADD MSTORE POP POP POP PUSH1 0x40 DUP9 ADD MSTORE POP SWAP5 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0x1171 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xF9D JUMP JUMPDEST PUSH5 0x1000003D0 NOT PUSH1 0x0 DUP2 DUP4 DUP5 MULMOD DUP6 MLOAD SWAP1 SWAP2 POP DUP3 DUP1 PUSH2 0x118B JUMPI INVALID JUMPDEST DUP8 MLOAD DUP4 SWAP1 MULMOD EQ DUP1 ISZERO PUSH2 0x11B8 JUMPI POP PUSH1 0x20 DUP6 ADD MLOAD DUP3 DUP1 PUSH2 0x11A5 JUMPI INVALID JUMPDEST DUP4 DUP1 PUSH2 0x11AD JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD PUSH1 0x20 DUP10 ADD MLOAD MULMOD EQ JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH17 0x14551231950B75FC4402DA1732FC9BEBE NOT DUP2 PUSH1 0x1 DUP2 PUSH1 0x1B DUP10 DUP4 AND ADD DUP11 DUP6 DUP13 DUP12 MULMOD PUSH1 0x0 SHL PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 PUSH1 0x0 SHL DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1240 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 ADD MLOAD PUSH1 0x20 DUP3 DUP2 ADD DUP11 SWAP1 MSTORE DUP3 DUP5 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB DUP6 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP2 MLOAD SWAP2 SWAP1 SWAP3 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 DUP4 ADD MLOAD PUSH1 0x0 SWAP2 SWAP1 SWAP2 BYTE DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE PUSH1 0x21 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12BB PUSH2 0x1829 JUMP JUMPDEST PUSH1 0xE4 DUP3 LT ISZERO PUSH2 0x12C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12D7 DUP4 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP3 POP PUSH2 0x12E7 DUP4 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP3 POP PUSH2 0x12F7 DUP4 DUP3 PUSH1 0x40 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP3 POP PUSH2 0x1307 DUP4 DUP3 PUSH1 0x60 ADD MLOAD PUSH2 0x1294 JUMP JUMPDEST SWAP3 POP PUSH2 0x1312 DUP4 PUSH2 0x12AF JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP2 DUP2 MSTORE PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x20 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x134C SWAP1 DUP5 SWAP1 PUSH1 0x40 PUSH2 0x168D JUMP JUMPDEST SWAP3 POP PUSH1 0xE4 DUP3 GT ISZERO PUSH2 0xF9D JUMPI PUSH1 0xE3 NOT DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x139D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE DUP1 MLOAD PUSH2 0x13B2 SWAP2 DUP6 SWAP2 PUSH2 0x168D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH15 0x3430B9B42FBA37AFB1BAB93B32B137 PUSH1 0x89 SHL PUSH1 0x0 DUP1 SHL DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1415 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x13F6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x148E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x146F JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x150B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x14EC JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 DUP2 SUB PUSH1 0x1F NOT ADD DUP4 MSTORE SWAP1 SWAP4 MSTORE DUP1 MLOAD SWAP3 ADD SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 SWAP8 POP SWAP4 SWAP6 POP PUSH17 0x14551231950B75FC4402DA1732FC9BEC0 SWAP4 POP PUSH17 0x14551231950B75FC4402DA1732FC9BEBF NOT SWAP3 POP PUSH1 0x0 SWAP2 POP DUP3 SWAP1 POP DUP4 DUP8 MULMOD SWAP1 POP DUP2 DUP1 PUSH2 0x1584 JUMPI INVALID JUMPDEST DUP6 DUP3 ADDMOD PUSH1 0x1 ADD SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15A0 PUSH2 0x180B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD DUP1 PUSH2 0x15B0 JUMPI POP PUSH2 0x1593 JUMP JUMPDEST DUP3 MLOAD PUSH5 0x1000003D0 NOT SWAP1 PUSH1 0x0 DUP3 PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x2 MULMOD SWAP1 POP PUSH1 0x0 DUP4 DUP1 PUSH2 0x15D1 JUMPI INVALID JUMPDEST DUP3 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH2 0x15E0 JUMPI INVALID JUMPDEST DUP5 DUP4 MULMOD SWAP1 POP PUSH1 0x0 DUP6 DUP1 PUSH2 0x15EF JUMPI INVALID JUMPDEST DUP7 DUP1 PUSH2 0x15F7 JUMPI INVALID JUMPDEST DUP7 DUP8 MULMOD PUSH1 0x3 MULMOD SWAP1 POP PUSH1 0x0 DUP7 DUP1 PUSH2 0x1609 JUMPI INVALID JUMPDEST DUP8 DUP1 PUSH2 0x1611 JUMPI INVALID JUMPDEST DUP5 PUSH5 0x1000003D2 NOT MULMOD DUP9 DUP1 PUSH2 0x1622 JUMPI INVALID JUMPDEST DUP5 DUP6 MULMOD ADDMOD DUP1 DUP11 MSTORE SWAP1 POP DUP7 DUP1 PUSH2 0x1633 JUMPI INVALID JUMPDEST DUP8 DUP1 PUSH2 0x163B JUMPI INVALID JUMPDEST DUP9 DUP1 PUSH2 0x1643 JUMPI INVALID JUMPDEST DUP7 DUP8 MULMOD PUSH4 0x800001E9 PUSH1 0x1 PUSH1 0xFF SHL SUB MULMOD DUP9 DUP1 PUSH2 0x165A JUMPI INVALID JUMPDEST DUP10 DUP1 PUSH2 0x1662 JUMPI INVALID JUMPDEST DUP5 DUP12 SUB DUP8 ADDMOD DUP6 MULMOD ADDMOD PUSH1 0x20 DUP11 ADD MSTORE DUP7 DUP1 PUSH2 0x1677 JUMPI INVALID JUMPDEST DUP9 DUP7 MULMOD PUSH1 0x40 DUP11 ADD MSTORE POP SWAP7 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV DUP5 PUSH1 0x20 DUP6 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16BA JUMPI PUSH1 0x20 DUP2 MUL DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x169E JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 ADD DUP5 ADD MSTORE DUP2 DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x16E7 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16F4 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1714 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1721 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x1735 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1742 PUSH2 0x1829 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x2E0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD8 SHL SUB NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x183C PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1849 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1856 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1863 PUSH2 0x187E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID POP PUSH16 0x696E7420682A5531206973206E6F7420 PUSH2 0x2076 PUSH2 0x6C69 PUSH5 0x2045432070 PUSH16 0x696E74507265636F6D70757465642059 KECCAK256 PUSH4 0x6F6F7264 PUSH10 0x6E617465206F66205532 KECCAK256 PUSH5 0x6F65736E27 PUSH21 0x20636F72726573706F6E6420746F20636F6D707265 PUSH20 0x73656420553220706F696E74507265636F6D7075 PUSH21 0x6564205920636F6F7264696E617465206F66205531 KECCAK256 PUSH5 0x6F65736E27 PUSH21 0x20636F72726573706F6E6420746F20636F6D707265 PUSH20 0x73656420553120706F696E74507265636F6D7075 PUSH21 0x6564207A2A562076616C756520697320696E636F72 PUSH19 0x656374507265636F6D7075746564205920636F PUSH16 0x7264696E617465206F6620563220646F PUSH6 0x736E27742063 PUSH16 0x72726573706F6E6420746F20636F6D70 PUSH19 0x657373656420563220706F696E74507265636F PUSH14 0x7075746564207A2A552076616C75 PUSH6 0x20697320696E PUSH4 0x6F727265 PUSH4 0x74507265 PUSH4 0x6F6D7075 PUSH21 0x6564205920636F6F7264696E617465206F66204520 PUSH5 0x6F65736E27 PUSH21 0x20636F72726573706F6E6420746F20636F6D707265 PUSH20 0x736564204520706F696E74507265636F6D707574 PUSH6 0x64205920636F PUSH16 0x7264696E617465206F66205620646F65 PUSH20 0x6E277420636F72726573706F6E6420746F20636F PUSH14 0x70726573736564205620706F696E PUSH21 0x507265636F6D7075746564205920636F6F7264696E PUSH2 0x7465 KECCAK256 PUSH16 0x6620563120646F65736E277420636F72 PUSH19 0x6573706F6E6420746F20636F6D707265737365 PUSH5 0x2056312070 PUSH16 0x696E74506F696E7420682A4531206973 KECCAK256 PUSH15 0x6F7420612076616C69642045432070 PUSH16 0x696E74506F696E74207A2A5520697320 PUSH15 0x6F7420612076616C69642045432070 PUSH16 0x696E74506F696E7420682A5631206973 KECCAK256 PUSH15 0x6F7420612076616C69642045432070 PUSH16 0x696E74507265636F6D70757465642068 0x2A JUMP BALANCE KECCAK256 PUSH23 0x616C756520697320696E636F7272656374A26469706673 PC 0x22 SLT KECCAK256 PUSH23 0x193439EE0055E05DDF9BADE7C4E8FEF3253F3D86751105 SWAP3 EXP 0x21 DELEGATECALL 0xA7 NOT 0xC3 ORIGIN PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        196,
        17681
      ],
      "op": "PUSH20",
      "path": "0",
      "value": "0x0"
    },
    "21": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "ADDRESS",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "EQ",
      "path": "0"
    },
    "23": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "25": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "27": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "28": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "30": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "LT",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x56"
    },
    "35": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "36": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "38": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "41": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "SHR",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x55A80E7"
    },
    "48": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "EQ",
      "path": "0"
    },
    "49": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B"
    },
    "52": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4B4B4B12"
    },
    "59": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "EQ",
      "path": "0"
    },
    "60": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x75"
    },
    "63": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC5F1F5CA"
    },
    "70": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "EQ",
      "path": "0"
    },
    "71": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D"
    },
    "74": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE650FAA7"
    },
    "81": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "EQ",
      "path": "0"
    },
    "82": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B"
    },
    "85": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "90": {
      "first_revert": true,
      "fn": null,
      "offset": [
        196,
        17681
      ],
      "op": "REVERT",
      "path": "0"
    },
    "91": {
      "offset": [
        589,
        707
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x63"
    },
    "95": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x263"
    },
    "98": {
      "fn": null,
      "jump": "i",
      "offset": [
        589,
        707
      ],
      "op": "JUMP",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "100": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "102": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "DUP1",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "104": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "DUP3",
      "path": "0"
    },
    "106": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "107": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "108": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "109": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "DUP2",
      "path": "0"
    },
    "110": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "111": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "SUB",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "114": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "ADD",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "116": {
      "fn": null,
      "offset": [
        589,
        707
      ],
      "op": "RETURN",
      "path": "0"
    },
    "117": {
      "offset": [
        713,
        831
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "118": {
      "fn": null,
      "offset": [
        713,
        831
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x63"
    },
    "121": {
      "fn": null,
      "offset": [
        713,
        831
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "124": {
      "fn": null,
      "jump": "i",
      "offset": [
        713,
        831
      ],
      "op": "JUMP",
      "path": "0"
    },
    "125": {
      "offset": [
        531,
        583
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x85"
    },
    "129": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2AB"
    },
    "132": {
      "fn": null,
      "jump": "i",
      "offset": [
        531,
        583
      ],
      "op": "JUMP",
      "path": "0"
    },
    "133": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "134": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "136": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "138": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "140": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "141": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "142": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "AND",
      "path": "0"
    },
    "143": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "DUP3",
      "path": "0"
    },
    "144": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "145": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "146": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "147": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "DUP2",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "149": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SUB",
      "path": "0"
    },
    "150": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "152": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "ADD",
      "path": "0"
    },
    "153": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "154": {
      "fn": null,
      "offset": [
        531,
        583
      ],
      "op": "RETURN",
      "path": "0"
    },
    "155": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "156": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24F"
    },
    "159": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "161": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "162": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "163": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SUB",
      "path": "0"
    },
    "164": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "166": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "167": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "LT",
      "path": "0"
    },
    "168": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "169": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1"
    },
    "172": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "173": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "175": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "176": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "177": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "178": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "179": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "180": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "181": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "183": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "184": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "185": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "186": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "187": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "193": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "194": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "195": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "196": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "199": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "200": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "202": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "203": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "204": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "205": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "206": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "207": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "208": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "210": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "211": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "212": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "213": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "214": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDE"
    },
    "217": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "218": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "220": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "221": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "222": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "223": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "224": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "225": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "226": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "228": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "229": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "230": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "231": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "233": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "234": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "235": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "236": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "237": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "238": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "244": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "245": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "246": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "OR",
      "path": "0"
    },
    "247": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "248": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "251": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "252": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "254": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "255": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "256": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "257": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "258": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "259": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "260": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "261": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "263": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "264": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "266": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "267": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "268": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DIV",
      "path": "0"
    },
    "269": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "270": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "272": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "273": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "275": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "276": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "277": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "278": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "279": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "281": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "282": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "283": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "284": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "285": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "286": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "287": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "288": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "289": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "290": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "292": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "293": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "294": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "295": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "296": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "297": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "298": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATACOPY",
      "path": "0"
    },
    "299": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "301": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "302": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "303": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "304": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "305": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "306": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "307": {
      "op": "POP"
    },
    "308": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "309": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "310": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "311": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "312": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "314": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "315": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "316": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "317": {
      "op": "POP"
    },
    "318": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "319": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "320": {
      "op": "POP"
    },
    "321": {
      "op": "POP"
    },
    "322": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "328": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "329": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "330": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "331": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x153"
    },
    "334": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "335": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "337": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "338": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "339": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "340": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "341": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "342": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "343": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "345": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "346": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "347": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "348": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "349": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x165"
    },
    "352": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "353": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "355": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "356": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "357": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "358": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "359": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "360": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "361": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "363": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "364": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "365": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "366": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "368": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "369": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "370": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "371": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "372": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "373": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "379": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "380": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "381": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "OR",
      "path": "0"
    },
    "382": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "383": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x187"
    },
    "386": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "387": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "389": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "390": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "391": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "392": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "393": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "394": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "395": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "396": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "398": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "399": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "401": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "402": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "403": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DIV",
      "path": "0"
    },
    "404": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "405": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "407": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "408": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "410": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "411": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "412": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "413": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "414": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "416": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "417": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "418": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "419": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "420": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "421": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "422": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "423": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "424": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "425": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "427": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "428": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "429": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "430": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "431": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "432": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "433": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATACOPY",
      "path": "0"
    },
    "434": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "436": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "437": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "438": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "439": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "440": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "441": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "442": {
      "op": "POP"
    },
    "443": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "444": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "445": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "446": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "447": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "449": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "450": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "451": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "452": {
      "op": "POP"
    },
    "453": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "454": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "455": {
      "op": "POP"
    },
    "456": {
      "op": "POP"
    },
    "457": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "463": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "464": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "465": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "466": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DA"
    },
    "469": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "470": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "472": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "473": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "474": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "475": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "476": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "480": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "481": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "484": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1EC"
    },
    "487": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "490": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "491": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "492": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "494": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "495": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "496": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "498": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "499": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "501": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "503": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "505": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "506": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "507": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "508": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH5",
      "path": "0",
      "value": "0x100000000"
    },
    "514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "515": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "GT",
      "path": "0"
    },
    "516": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "OR",
      "path": "0"
    },
    "517": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "521": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "522": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "525": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "REVERT",
      "path": "0"
    },
    "526": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "527": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "528": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "529": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "530": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "531": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "533": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "534": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "537": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "538": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DIV",
      "path": "0"
    },
    "539": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MUL",
      "path": "0"
    },
    "540": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "542": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "543": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "545": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "547": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "548": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "551": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "552": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "555": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "558": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "559": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "560": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "563": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "564": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP4",
      "path": "0"
    },
    "565": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "566": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "567": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP5",
      "path": "0"
    },
    "568": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "CALLDATACOPY",
      "path": "0"
    },
    "569": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "571": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "572": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "573": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "574": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "575": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "576": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "577": {
      "op": "POP"
    },
    "578": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "579": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "580": {
      "op": "POP"
    },
    "581": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B0"
    },
    "584": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "585": {
      "op": "POP"
    },
    "586": {
      "op": "POP"
    },
    "587": {
      "op": "POP"
    },
    "588": {
      "op": "POP"
    },
    "589": {
      "op": "POP"
    },
    "590": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMP",
      "path": "0"
    },
    "591": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "592": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "594": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP1",
      "path": "0"
    },
    "595": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "596": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "597": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "598": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "599": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP3",
      "path": "0"
    },
    "600": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "601": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "602": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "603": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "DUP2",
      "path": "0"
    },
    "604": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "605": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SUB",
      "path": "0"
    },
    "606": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "608": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "ADD",
      "path": "0"
    },
    "609": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "610": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "RETURN",
      "path": "0"
    },
    "611": {
      "offset": [
        589,
        707
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "612": {
      "offset": [
        641,
        707
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F"
    },
    "645": {
      "offset": [
        589,
        707
      ],
      "op": "DUP2",
      "path": "0"
    },
    "646": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "o",
      "offset": [
        589,
        707
      ],
      "op": "JUMP",
      "path": "0"
    },
    "647": {
      "offset": [
        713,
        831
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "648": {
      "offset": [
        765,
        831
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936"
    },
    "681": {
      "offset": [
        713,
        831
      ],
      "op": "DUP2",
      "path": "0"
    },
    "682": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "o",
      "offset": [
        713,
        831
      ],
      "op": "JUMP",
      "path": "0"
    },
    "683": {
      "offset": [
        531,
        583
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "684": {
      "offset": [
        579,
        583
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "686": {
      "offset": [
        531,
        583
      ],
      "op": "DUP2",
      "path": "0"
    },
    "687": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "o",
      "offset": [
        531,
        583
      ],
      "op": "JUMP",
      "path": "0"
    },
    "688": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "689": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1721,
        1725
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "691": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1741,
        1783
      ],
      "op": "DUP1",
      "path": "0"
    },
    "692": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1786,
        1811
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BC"
    },
    "695": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1786,
        1799
      ],
      "op": "DUP6",
      "path": "0"
    },
    "696": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1786,
        1809
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA46"
    },
    "699": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1786,
        1811
      ],
      "op": "JUMP",
      "path": "0"
    },
    "700": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1786,
        1811
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "701": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1741,
        1811
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "702": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1741,
        1811
      ],
      "op": "POP",
      "path": "0"
    },
    "703": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1821,
        1865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "705": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1868,
        1895
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C9"
    },
    "708": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1868,
        1879
      ],
      "op": "DUP6",
      "path": "0"
    },
    "709": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1868,
        1893
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA9D"
    },
    "712": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1868,
        1895
      ],
      "op": "JUMP",
      "path": "0"
    },
    "713": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1868,
        1895
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "714": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1821,
        1895
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "715": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1821,
        1895
      ],
      "op": "POP",
      "path": "0"
    },
    "716": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1905,
        1959
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "718": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1962,
        1999
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2D6"
    },
    "721": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1962,
        1979
      ],
      "op": "DUP6",
      "path": "0"
    },
    "722": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1962,
        1997
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB25"
    },
    "725": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        1962,
        1999
      ],
      "op": "JUMP",
      "path": "0"
    },
    "726": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1962,
        1999
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "727": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1905,
        1999
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "728": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1905,
        1999
      ],
      "op": "POP",
      "path": "0"
    },
    "729": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2495,
        2504
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "731": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2507,
        2552
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E4"
    },
    "734": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2535,
        2543
      ],
      "op": "DUP5",
      "path": "0"
    },
    "735": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2545,
        2551
      ],
      "op": "DUP5",
      "path": "0"
    },
    "736": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2507,
        2534
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD03"
    },
    "739": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2507,
        2552
      ],
      "op": "JUMP",
      "path": "0"
    },
    "740": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2507,
        2552
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "741": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2721,
        2736
      ],
      "op": "DUP5",
      "path": "0",
      "statement": 0
    },
    "742": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2721,
        2736
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "743": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2721,
        2741
      ],
      "op": "DUP1",
      "path": "0"
    },
    "744": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2721,
        2741
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "745": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2755,
        2777
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "747": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2755,
        2777
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "748": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2755,
        2777
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "749": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2755,
        2777
      ],
      "op": "ADD",
      "path": "0"
    },
    "750": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2755,
        2777
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "751": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2791,
        2816
      ],
      "op": "DUP5",
      "path": "0"
    },
    "752": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2791,
        2816
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "753": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2495,
        2552
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "754": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2495,
        2552
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "755": {
      "op": "POP"
    },
    "756": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2687,
        2817
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FC"
    },
    "759": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2687,
        2817
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "760": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2687,
        2707
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "763": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2687,
        2817
      ],
      "op": "JUMP",
      "path": "0"
    },
    "764": {
      "branch": 112,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2687,
        2817
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "765": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x337"
    },
    "768": {
      "branch": 112,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "769": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "771": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "772": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "776": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "778": {
      "op": "SHL"
    },
    "779": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP2",
      "path": "0"
    },
    "780": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "781": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "783": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "ADD",
      "path": "0"
    },
    "784": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP1",
      "path": "0"
    },
    "785": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP1",
      "path": "0"
    },
    "786": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "788": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "ADD",
      "path": "0"
    },
    "789": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP3",
      "path": "0"
    },
    "790": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP2",
      "path": "0"
    },
    "791": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SUB",
      "path": "0"
    },
    "792": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP3",
      "path": "0"
    },
    "793": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "794": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x46"
    },
    "796": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP2",
      "path": "0"
    },
    "797": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "798": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "800": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "ADD",
      "path": "0"
    },
    "801": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP1",
      "path": "0"
    },
    "802": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19D4"
    },
    "805": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x46"
    },
    "807": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "808": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "809": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "811": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "ADD",
      "path": "0"
    },
    "812": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "813": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "POP",
      "path": "0"
    },
    "814": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "POP",
      "path": "0"
    },
    "815": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "817": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "818": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "DUP1",
      "path": "0"
    },
    "819": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "820": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SUB",
      "path": "0"
    },
    "821": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "822": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "REVERT",
      "path": "0"
    },
    "823": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2679,
        2913
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "824": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        3030
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0x349"
    },
    "827": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2975,
        2987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "828": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2975,
        3001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "830": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2975,
        3001
      ],
      "op": "ADD",
      "path": "0"
    },
    "831": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2975,
        3001
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "832": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3003,
        3015
      ],
      "op": "DUP4",
      "path": "0"
    },
    "833": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3003,
        3029
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "835": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3003,
        3029
      ],
      "op": "ADD",
      "path": "0"
    },
    "836": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3003,
        3029
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "837": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        2974
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "840": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        2965,
        3030
      ],
      "op": "JUMP",
      "path": "0"
    },
    "841": {
      "branch": 113,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2965,
        3030
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "842": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x39A"
    },
    "845": {
      "branch": 113,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "846": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "848": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP1",
      "path": "0"
    },
    "849": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "850": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "854": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "856": {
      "op": "SHL"
    },
    "857": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP2",
      "path": "0"
    },
    "858": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "859": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "861": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "863": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP3",
      "path": "0"
    },
    "864": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "ADD",
      "path": "0"
    },
    "865": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP2",
      "path": "0"
    },
    "866": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "867": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "868": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "870": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP3",
      "path": "0"
    },
    "871": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "ADD",
      "path": "0"
    },
    "872": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "873": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x506F696E74207A45206973206E6F7420612076616C696420454320706F696E74"
    },
    "906": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "908": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP3",
      "path": "0"
    },
    "909": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "ADD",
      "path": "0"
    },
    "910": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "911": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "912": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "913": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "914": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "DUP2",
      "path": "0"
    },
    "915": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "916": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SUB",
      "path": "0"
    },
    "917": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "919": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "ADD",
      "path": "0"
    },
    "920": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "921": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "REVERT",
      "path": "0"
    },
    "922": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        2957,
        3092
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "923": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3853,
        3920
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 2,
      "value": "0x3AC"
    },
    "926": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3863,
        3875
      ],
      "op": "DUP3",
      "path": "0"
    },
    "927": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3863,
        3890
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "929": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3863,
        3890
      ],
      "op": "ADD",
      "path": "0"
    },
    "930": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3863,
        3890
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "931": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3892,
        3904
      ],
      "op": "DUP4",
      "path": "0"
    },
    "932": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3892,
        3919
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA0"
    },
    "934": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3892,
        3919
      ],
      "op": "ADD",
      "path": "0"
    },
    "935": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3892,
        3919
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "936": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3853,
        3862
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "939": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        3853,
        3920
      ],
      "op": "JUMP",
      "path": "0"
    },
    "940": {
      "branch": 114,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3853,
        3920
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "941": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E7"
    },
    "944": {
      "branch": 114,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "945": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "947": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "948": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "952": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "954": {
      "op": "SHL"
    },
    "955": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP2",
      "path": "0"
    },
    "956": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "957": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "959": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "ADD",
      "path": "0"
    },
    "960": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP1",
      "path": "0"
    },
    "961": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP1",
      "path": "0"
    },
    "962": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "964": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "ADD",
      "path": "0"
    },
    "965": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP3",
      "path": "0"
    },
    "966": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP2",
      "path": "0"
    },
    "967": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SUB",
      "path": "0"
    },
    "968": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP3",
      "path": "0"
    },
    "969": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "970": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "972": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP2",
      "path": "0"
    },
    "973": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "974": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "976": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "ADD",
      "path": "0"
    },
    "977": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP1",
      "path": "0"
    },
    "978": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AA8"
    },
    "981": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "983": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "984": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "985": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "987": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "ADD",
      "path": "0"
    },
    "988": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "989": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "POP",
      "path": "0"
    },
    "990": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "POP",
      "path": "0"
    },
    "991": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "993": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "994": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "DUP1",
      "path": "0"
    },
    "995": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "996": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SUB",
      "path": "0"
    },
    "997": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "998": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "REVERT",
      "path": "0"
    },
    "999": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        3845,
        3984
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1000": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4686,
        4705
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1002": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x458"
    },
    "1005": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1007": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1008": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1009": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1011": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "ADD",
      "path": "0"
    },
    "1012": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1014": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1015": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1016": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4739,
        4751
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1017": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4739,
        4765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1019": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4739,
        4765
      ],
      "op": "ADD",
      "path": "0"
    },
    "1020": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4739,
        4765
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1021": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1022": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1023": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1025": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "ADD",
      "path": "0"
    },
    "1026": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4768,
        4780
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1027": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4768,
        4794
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1029": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4768,
        4794
      ],
      "op": "ADD",
      "path": "0"
    },
    "1030": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4768,
        4794
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1031": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1032": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1033": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "POP",
      "path": "0"
    },
    "1034": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x453"
    },
    "1037": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1039": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1040": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1041": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1043": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "ADD",
      "path": "0"
    },
    "1044": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1046": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1047": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1048": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4851
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1049": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4857
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1051": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4857
      ],
      "op": "ADD",
      "path": "0"
    },
    "1052": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4857
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1053": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1055": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4865
      ],
      "op": "ADD",
      "path": "0"
    },
    "1056": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1057": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4872
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1059": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4872
      ],
      "op": "ADD",
      "path": "0"
    },
    "1060": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4845,
        4872
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1061": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1062": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1063": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1065": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "ADD",
      "path": "0"
    },
    "1066": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4874,
        4886
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1067": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4874,
        4900
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xC0"
    },
    "1069": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4874,
        4900
      ],
      "op": "ADD",
      "path": "0"
    },
    "1070": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4874,
        4900
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1071": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1072": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1073": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "POP",
      "path": "0"
    },
    "1074": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1076": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1077": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1078": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1080": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "ADD",
      "path": "0"
    },
    "1081": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1083": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1084": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1085": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4920,
        4932
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1086": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4920,
        4947
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1088": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4920,
        4947
      ],
      "op": "ADD",
      "path": "0"
    },
    "1089": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4920,
        4947
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1090": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1091": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1092": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1094": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "ADD",
      "path": "0"
    },
    "1095": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4949,
        4961
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1096": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4949,
        4976
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA0"
    },
    "1098": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4949,
        4976
      ],
      "op": "ADD",
      "path": "0"
    },
    "1099": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4949,
        4976
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1100": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1101": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1102": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "POP",
      "path": "0"
    },
    "1103": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4826
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1032"
    },
    "1106": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        4809,
        4991
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1107": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4809,
        4991
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1108": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        4724
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x115A"
    },
    "1111": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        4708,
        5001
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1112": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4708,
        5001
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1113": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4686,
        5001
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1114": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        4686,
        5001
      ],
      "op": "POP",
      "path": "0"
    },
    "1115": {
      "branch": 115,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5017,
        5031
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1116": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5012,
        5069
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x46D"
    },
    "1119": {
      "branch": 115,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5012,
        5069
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1120": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5053,
        5058
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x0"
    },
    "1122": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "1123": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1124": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1125": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1126": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1127": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1128": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "POP",
      "path": "0"
    },
    "1129": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3F"
    },
    "1132": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5046,
        5058
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1133": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5012,
        5069
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1134": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5252
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x20"
    },
    "1136": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5252
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1137": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5252
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1138": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5252
      ],
      "op": "ADD",
      "path": "0"
    },
    "1139": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5252
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1140": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5257
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1141": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5257
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1142": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5271,
        5293
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1143": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5271,
        5293
      ],
      "op": "ADD",
      "path": "0"
    },
    "1144": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5271,
        5293
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1145": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5307,
        5332
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "1147": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5307,
        5332
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1148": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5307,
        5332
      ],
      "op": "ADD",
      "path": "0"
    },
    "1149": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5307,
        5332
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1150": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5203,
        5333
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x488"
    },
    "1153": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5203,
        5333
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1154": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5237,
        5257
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1155": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5271,
        5293
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1156": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5203,
        5223
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "1159": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5203,
        5333
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1160": {
      "branch": 116,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5203,
        5333
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1161": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4C3"
    },
    "1164": {
      "branch": 116,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1165": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1167": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1168": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1172": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1174": {
      "op": "SHL"
    },
    "1175": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1176": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1177": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1179": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "ADD",
      "path": "0"
    },
    "1180": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1181": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1182": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1184": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "ADD",
      "path": "0"
    },
    "1185": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1186": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1187": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SUB",
      "path": "0"
    },
    "1188": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1189": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1190": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x46"
    },
    "1192": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1193": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1194": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1196": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "ADD",
      "path": "0"
    },
    "1197": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1198": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A1A"
    },
    "1201": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x46"
    },
    "1203": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1204": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1205": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1207": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "ADD",
      "path": "0"
    },
    "1208": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1209": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "POP",
      "path": "0"
    },
    "1210": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "POP",
      "path": "0"
    },
    "1211": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1213": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1214": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1215": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1216": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SUB",
      "path": "0"
    },
    "1217": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1218": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1219": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5195,
        5429
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1220": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5481,
        5546
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 5,
      "value": "0x4D7"
    },
    "1223": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5491,
        5503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1224": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5491,
        5517
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1227": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5491,
        5517
      ],
      "op": "ADD",
      "path": "0"
    },
    "1228": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5491,
        5517
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1229": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5519,
        5531
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1230": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5519,
        5545
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x120"
    },
    "1233": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5519,
        5545
      ],
      "op": "ADD",
      "path": "0"
    },
    "1234": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5519,
        5545
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1235": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5481,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "1238": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5481,
        5546
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1239": {
      "branch": 117,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5481,
        5546
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1240": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x528"
    },
    "1243": {
      "branch": 117,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1244": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1246": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1247": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1248": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1252": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1254": {
      "op": "SHL"
    },
    "1255": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1256": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1257": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1259": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1261": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1262": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "ADD",
      "path": "0"
    },
    "1263": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1264": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1265": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1266": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "1268": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1269": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "ADD",
      "path": "0"
    },
    "1270": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1271": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x506F696E74207A56206973206E6F7420612076616C696420454320706F696E74"
    },
    "1304": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "1306": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1307": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "ADD",
      "path": "0"
    },
    "1308": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1309": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1310": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1311": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1312": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1313": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1314": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SUB",
      "path": "0"
    },
    "1315": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "1317": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "ADD",
      "path": "0"
    },
    "1318": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1319": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1320": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5473,
        5608
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1321": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5626,
        5881
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 6,
      "value": "0x553"
    },
    "1324": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5659
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1325": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5666
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1327": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5666
      ],
      "op": "ADD",
      "path": "0"
    },
    "1328": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5666
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1329": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5673
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1331": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5673
      ],
      "op": "ADD",
      "path": "0"
    },
    "1332": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5651,
        5673
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1333": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5702,
        5714
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1334": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5702,
        5727
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "1336": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5702,
        5727
      ],
      "op": "ADD",
      "path": "0"
    },
    "1337": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5702,
        5727
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1338": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5759
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1339": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1341": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5765
      ],
      "op": "ADD",
      "path": "0"
    },
    "1342": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5765
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1343": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5771
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1345": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5771
      ],
      "op": "ADD",
      "path": "0"
    },
    "1346": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5753,
        5771
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1347": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5802,
        5814
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1348": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5802,
        5828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1351": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5802,
        5828
      ],
      "op": "ADD",
      "path": "0"
    },
    "1352": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5802,
        5828
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1353": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5854,
        5866
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1354": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5854,
        5880
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x120"
    },
    "1357": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5854,
        5880
      ],
      "op": "ADD",
      "path": "0"
    },
    "1358": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5854,
        5880
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1359": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5626,
        5637
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C2"
    },
    "1362": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        5626,
        5881
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1363": {
      "branch": 118,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5626,
        5881
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1364": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x58E"
    },
    "1367": {
      "branch": 118,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1368": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1370": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1371": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1375": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1377": {
      "op": "SHL"
    },
    "1378": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1379": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1380": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1382": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "ADD",
      "path": "0"
    },
    "1383": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1384": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1385": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1387": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "ADD",
      "path": "0"
    },
    "1388": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1389": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1390": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SUB",
      "path": "0"
    },
    "1391": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1392": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1393": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "1395": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1396": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1397": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1399": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "ADD",
      "path": "0"
    },
    "1400": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1401": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1948"
    },
    "1404": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "1406": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1407": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1408": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1410": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "ADD",
      "path": "0"
    },
    "1411": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1412": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "POP",
      "path": "0"
    },
    "1413": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "POP",
      "path": "0"
    },
    "1414": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1416": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1417": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1418": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1419": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SUB",
      "path": "0"
    },
    "1420": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1421": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1422": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5618,
        5952
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1423": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6051
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 7,
      "value": "0x20"
    },
    "1425": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6051
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1426": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6051
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1427": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6051
      ],
      "op": "ADD",
      "path": "0"
    },
    "1428": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6051
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1429": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6056
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1430": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6056
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1431": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6089,
        6110
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1432": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6089,
        6110
      ],
      "op": "ADD",
      "path": "0"
    },
    "1433": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6089,
        6110
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1434": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6138,
        6164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x140"
    },
    "1437": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6138,
        6164
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1438": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6138,
        6164
      ],
      "op": "ADD",
      "path": "0"
    },
    "1439": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6138,
        6164
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1440": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6003,
        6165
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5AA"
    },
    "1443": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6003,
        6165
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1444": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6037,
        6056
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1445": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6089,
        6110
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1446": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6003,
        6023
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "1449": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6003,
        6165
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1450": {
      "branch": 119,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6003,
        6165
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1451": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E5"
    },
    "1454": {
      "branch": 119,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1455": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1457": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1458": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1462": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1464": {
      "op": "SHL"
    },
    "1465": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1466": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1467": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1469": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "ADD",
      "path": "0"
    },
    "1470": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1471": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1472": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1474": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "ADD",
      "path": "0"
    },
    "1475": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1476": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SUB",
      "path": "0"
    },
    "1478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1479": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1480": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "1482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1484": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1486": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "ADD",
      "path": "0"
    },
    "1487": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A60"
    },
    "1491": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "1493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1494": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1495": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1497": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "ADD",
      "path": "0"
    },
    "1498": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1499": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "POP",
      "path": "0"
    },
    "1500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "POP",
      "path": "0"
    },
    "1501": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1503": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1505": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1506": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SUB",
      "path": "0"
    },
    "1507": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1508": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1509": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        5995,
        6271
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1510": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6324,
        6391
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 8,
      "value": "0x5F9"
    },
    "1513": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6334,
        6346
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6334,
        6361
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160"
    },
    "1517": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6334,
        6361
      ],
      "op": "ADD",
      "path": "0"
    },
    "1518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6334,
        6361
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1519": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6363,
        6375
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1520": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6363,
        6390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "1523": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6363,
        6390
      ],
      "op": "ADD",
      "path": "0"
    },
    "1524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6363,
        6390
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1525": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6324,
        6333
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "1528": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6324,
        6391
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1529": {
      "branch": 120,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6324,
        6391
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1530": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x634"
    },
    "1533": {
      "branch": 120,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1534": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1537": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1541": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1543": {
      "op": "SHL"
    },
    "1544": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1545": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1548": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "ADD",
      "path": "0"
    },
    "1549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1550": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1551": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "ADD",
      "path": "0"
    },
    "1554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1555": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SUB",
      "path": "0"
    },
    "1557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1558": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1559": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "1561": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1563": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1565": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "ADD",
      "path": "0"
    },
    "1566": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1567": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AEB"
    },
    "1570": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "1572": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1573": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1574": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1576": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "ADD",
      "path": "0"
    },
    "1577": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1578": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "POP",
      "path": "0"
    },
    "1579": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "POP",
      "path": "0"
    },
    "1580": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1582": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1583": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1584": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1585": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SUB",
      "path": "0"
    },
    "1586": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1587": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1588": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6316,
        6451
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1589": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6469,
        6695
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 9,
      "value": "0x658"
    },
    "1592": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6500
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1593": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6508
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1595": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6508
      ],
      "op": "ADD",
      "path": "0"
    },
    "1596": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6508
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1597": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6515
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1599": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6515
      ],
      "op": "ADD",
      "path": "0"
    },
    "1600": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6494,
        6515
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1601": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6546,
        6558
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1602": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6546,
        6572
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x140"
    },
    "1605": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6546,
        6572
      ],
      "op": "ADD",
      "path": "0"
    },
    "1606": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6546,
        6572
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1607": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6598,
        6599
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1608": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6613,
        6625
      ],
      "op": "DUP7",
      "path": "0"
    },
    "1609": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6613,
        6640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160"
    },
    "1612": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6613,
        6640
      ],
      "op": "ADD",
      "path": "0"
    },
    "1613": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6613,
        6640
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1614": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6667,
        6679
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1615": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6667,
        6694
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "1618": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6667,
        6694
      ],
      "op": "ADD",
      "path": "0"
    },
    "1619": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6667,
        6694
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1620": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6469,
        6480
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C2"
    },
    "1623": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6469,
        6695
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1624": {
      "branch": 121,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6469,
        6695
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1625": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x693"
    },
    "1628": {
      "branch": 121,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1629": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1631": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1632": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1636": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1638": {
      "op": "SHL"
    },
    "1639": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1640": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1641": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1643": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "ADD",
      "path": "0"
    },
    "1644": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1645": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1646": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1648": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "ADD",
      "path": "0"
    },
    "1649": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1650": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1651": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SUB",
      "path": "0"
    },
    "1652": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1653": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1654": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x23"
    },
    "1656": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1657": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1658": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1660": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "ADD",
      "path": "0"
    },
    "1661": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1662": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "1665": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x23"
    },
    "1667": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1668": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1669": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1671": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "ADD",
      "path": "0"
    },
    "1672": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1673": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "POP",
      "path": "0"
    },
    "1674": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "POP",
      "path": "0"
    },
    "1675": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1677": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1678": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1679": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1680": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SUB",
      "path": "0"
    },
    "1681": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1682": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1683": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6461,
        6768
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1684": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6865
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 10,
      "value": "0x80"
    },
    "1686": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6865
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1687": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6865
      ],
      "op": "ADD",
      "path": "0"
    },
    "1688": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1689": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6873
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1691": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6873
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1692": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6873
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1693": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6873
      ],
      "op": "ADD",
      "path": "0"
    },
    "1694": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6873
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1695": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6878
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1696": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6878
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1697": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6910,
        6937
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1698": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6910,
        6937
      ],
      "op": "ADD",
      "path": "0"
    },
    "1699": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6910,
        6937
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1700": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6964,
        6990
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A0"
    },
    "1703": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6964,
        6990
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1704": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6964,
        6990
      ],
      "op": "ADD",
      "path": "0"
    },
    "1705": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6964,
        6990
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1706": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6819,
        6991
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6B4"
    },
    "1709": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6819,
        6991
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1710": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6853,
        6878
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1711": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6910,
        6937
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1712": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6819,
        6839
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "1715": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        6819,
        6991
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1716": {
      "branch": 122,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6819,
        6991
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1717": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6EF"
    },
    "1720": {
      "branch": 122,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1721": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1723": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1724": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1728": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1730": {
      "op": "SHL"
    },
    "1731": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1732": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1733": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1735": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "ADD",
      "path": "0"
    },
    "1736": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1737": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1738": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1740": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "ADD",
      "path": "0"
    },
    "1741": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1742": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1743": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SUB",
      "path": "0"
    },
    "1744": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1745": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1746": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "1748": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1749": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1750": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1752": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "ADD",
      "path": "0"
    },
    "1753": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1754": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x196A"
    },
    "1757": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "1759": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1760": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1761": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1763": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "ADD",
      "path": "0"
    },
    "1764": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1765": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "POP",
      "path": "0"
    },
    "1766": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "POP",
      "path": "0"
    },
    "1767": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1769": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1770": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1771": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1772": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SUB",
      "path": "0"
    },
    "1773": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1774": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1775": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        6811,
        7102
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1776": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 11,
      "value": "0x75E"
    },
    "1779": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1781": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1782": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1783": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1785": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "ADD",
      "path": "0"
    },
    "1786": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1788": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1789": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1790": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7161,
        7173
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1791": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7161,
        7187
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1794": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7161,
        7187
      ],
      "op": "ADD",
      "path": "0"
    },
    "1795": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7161,
        7187
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1796": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1797": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1798": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1800": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "ADD",
      "path": "0"
    },
    "1801": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7190,
        7202
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1802": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7190,
        7216
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x120"
    },
    "1805": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7190,
        7216
      ],
      "op": "ADD",
      "path": "0"
    },
    "1806": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7190,
        7216
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1807": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1808": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1809": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "POP",
      "path": "0"
    },
    "1810": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x453"
    },
    "1813": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1815": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1816": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1817": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1819": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "ADD",
      "path": "0"
    },
    "1820": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1822": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1823": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1824": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7273
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1825": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7279
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1827": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7279
      ],
      "op": "ADD",
      "path": "0"
    },
    "1828": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7279
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1829": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7287
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1831": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7287
      ],
      "op": "ADD",
      "path": "0"
    },
    "1832": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7287
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1833": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7294
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1835": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7294
      ],
      "op": "ADD",
      "path": "0"
    },
    "1836": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7267,
        7294
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1837": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1838": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1839": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1841": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "ADD",
      "path": "0"
    },
    "1842": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7296,
        7308
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1843": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7296,
        7322
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A0"
    },
    "1846": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7296,
        7322
      ],
      "op": "ADD",
      "path": "0"
    },
    "1847": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7296,
        7322
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1848": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1849": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1850": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "POP",
      "path": "0"
    },
    "1851": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1853": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1854": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1855": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1857": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "ADD",
      "path": "0"
    },
    "1858": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1860": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1861": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1862": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7342,
        7354
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1863": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7342,
        7369
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160"
    },
    "1866": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7342,
        7369
      ],
      "op": "ADD",
      "path": "0"
    },
    "1867": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7342,
        7369
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1868": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1869": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1870": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1872": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "ADD",
      "path": "0"
    },
    "1873": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7371,
        7383
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1874": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7371,
        7398
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "1877": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7371,
        7398
      ],
      "op": "ADD",
      "path": "0"
    },
    "1878": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7371,
        7398
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1879": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1880": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1881": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7413
      ],
      "op": "POP",
      "path": "0"
    },
    "1882": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7231,
        7248
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1032"
    },
    "1885": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7231,
        7413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1886": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7130,
        7423
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1887": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7113,
        7423
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1888": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7113,
        7423
      ],
      "op": "POP",
      "path": "0"
    },
    "1889": {
      "branch": 123,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7439,
        7453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1890": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7434,
        7491
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x773"
    },
    "1893": {
      "branch": 123,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7434,
        7491
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1894": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7475,
        7480
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 12,
      "value": "0x0"
    },
    "1896": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "1897": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1898": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1899": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1900": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1901": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1902": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "POP",
      "path": "0"
    },
    "1903": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3F"
    },
    "1906": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7468,
        7480
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1907": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7434,
        7491
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1908": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7699,
        7764
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 13,
      "value": "0x787"
    },
    "1911": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7709,
        7721
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1912": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7709,
        7735
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "1915": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7709,
        7735
      ],
      "op": "ADD",
      "path": "0"
    },
    "1916": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7709,
        7735
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1917": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7737,
        7749
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1918": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7737,
        7763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "1921": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7737,
        7763
      ],
      "op": "ADD",
      "path": "0"
    },
    "1922": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7737,
        7763
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1923": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7699,
        7708
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "1926": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7699,
        7764
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1927": {
      "branch": 124,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7699,
        7764
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1928": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7C2"
    },
    "1931": {
      "branch": 124,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1932": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1934": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1935": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1941": {
      "op": "SHL"
    },
    "1942": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1943": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1944": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1946": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "ADD",
      "path": "0"
    },
    "1947": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1948": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1949": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1951": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "ADD",
      "path": "0"
    },
    "1952": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1953": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1954": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SUB",
      "path": "0"
    },
    "1955": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1956": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1957": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x21"
    },
    "1959": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1960": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1961": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1963": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "ADD",
      "path": "0"
    },
    "1964": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1965": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1ACA"
    },
    "1968": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x21"
    },
    "1970": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1971": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "1972": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1974": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "ADD",
      "path": "0"
    },
    "1975": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1976": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "POP",
      "path": "0"
    },
    "1977": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "POP",
      "path": "0"
    },
    "1978": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1980": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1981": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1982": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1983": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SUB",
      "path": "0"
    },
    "1984": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1985": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1986": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7691,
        7827
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1987": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7845,
        8100
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 14,
      "value": "0x821"
    },
    "1990": {
      "offset": [
        641,
        707
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F"
    },
    "2023": {
      "offset": [
        765,
        831
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x7880ED56962D7C0AE44D6F14BB53B5FE64B31EA44A41D0316F3A598778F0F936"
    },
    "2056": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7978
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2057": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2059": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7984
      ],
      "op": "ADD",
      "path": "0"
    },
    "2060": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7984
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2061": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2063": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7990
      ],
      "op": "ADD",
      "path": "0"
    },
    "2064": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7972,
        7990
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2065": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8021,
        8033
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2066": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8021,
        8047
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "2069": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8021,
        8047
      ],
      "op": "ADD",
      "path": "0"
    },
    "2070": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8021,
        8047
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2071": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8073,
        8085
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2072": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8073,
        8099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "2075": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8073,
        8099
      ],
      "op": "ADD",
      "path": "0"
    },
    "2076": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8073,
        8099
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2077": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7845,
        7856
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C2"
    },
    "2080": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        7845,
        8100
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2081": {
      "branch": 125,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7845,
        8100
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2082": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x85C"
    },
    "2085": {
      "branch": 125,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2086": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2088": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2089": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2093": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2095": {
      "op": "SHL"
    },
    "2096": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2097": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2098": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2100": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "ADD",
      "path": "0"
    },
    "2101": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2102": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2103": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2105": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "ADD",
      "path": "0"
    },
    "2106": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2107": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2108": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SUB",
      "path": "0"
    },
    "2109": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2110": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2111": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "2113": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2114": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2115": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2117": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "ADD",
      "path": "0"
    },
    "2118": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2119": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19B2"
    },
    "2122": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "2124": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2125": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "2126": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2128": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "ADD",
      "path": "0"
    },
    "2129": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2130": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "POP",
      "path": "0"
    },
    "2131": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "POP",
      "path": "0"
    },
    "2132": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2134": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2135": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2136": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2137": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SUB",
      "path": "0"
    },
    "2138": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2139": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2140": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        7837,
        8171
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2141": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8294
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 15,
      "value": "0x80"
    },
    "2143": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8294
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2144": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8294
      ],
      "op": "ADD",
      "path": "0"
    },
    "2145": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8294
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2146": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8315
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2148": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8315
      ],
      "op": "ADD",
      "path": "0"
    },
    "2149": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8315
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2150": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8320
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2151": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8320
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2152": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2154": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2155": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2156": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "ADD",
      "path": "0"
    },
    "2157": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2158": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8413,
        8439
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x200"
    },
    "2161": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8413,
        8439
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2162": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8413,
        8439
      ],
      "op": "ADD",
      "path": "0"
    },
    "2163": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8413,
        8439
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2164": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8248,
        8440
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87E"
    },
    "2167": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8248,
        8440
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2168": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8282,
        8320
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2169": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8349,
        8389
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2170": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8248,
        8268
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "2173": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8248,
        8440
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2174": {
      "branch": 126,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8248,
        8440
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2175": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8B9"
    },
    "2178": {
      "branch": 126,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2179": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2181": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2182": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2188": {
      "op": "SHL"
    },
    "2189": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2190": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2191": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2193": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "ADD",
      "path": "0"
    },
    "2194": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2195": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2196": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2198": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "ADD",
      "path": "0"
    },
    "2199": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2200": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2201": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SUB",
      "path": "0"
    },
    "2202": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2203": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2204": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "2206": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2207": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2208": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2210": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "ADD",
      "path": "0"
    },
    "2211": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2212": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1900"
    },
    "2215": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "2217": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2218": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "2219": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2221": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "ADD",
      "path": "0"
    },
    "2222": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2223": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "POP",
      "path": "0"
    },
    "2224": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "POP",
      "path": "0"
    },
    "2225": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2227": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2228": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2229": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2230": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SUB",
      "path": "0"
    },
    "2231": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2232": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2233": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8240,
        8561
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2234": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8614,
        8681
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 16,
      "value": "0x8CD"
    },
    "2237": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8624,
        8636
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2238": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8624,
        8651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x220"
    },
    "2241": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8624,
        8651
      ],
      "op": "ADD",
      "path": "0"
    },
    "2242": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8624,
        8651
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2243": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8653,
        8665
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2244": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8653,
        8680
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x240"
    },
    "2247": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8653,
        8680
      ],
      "op": "ADD",
      "path": "0"
    },
    "2248": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8653,
        8680
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2249": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8614,
        8623
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "2252": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8614,
        8681
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2253": {
      "branch": 127,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8614,
        8681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2254": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x908"
    },
    "2257": {
      "branch": 127,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2258": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2260": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2261": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2265": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2267": {
      "op": "SHL"
    },
    "2268": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2269": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2270": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2272": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "ADD",
      "path": "0"
    },
    "2273": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2274": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2275": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2277": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "ADD",
      "path": "0"
    },
    "2278": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2279": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2280": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SUB",
      "path": "0"
    },
    "2281": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2282": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2283": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "2285": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2286": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2287": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2289": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "ADD",
      "path": "0"
    },
    "2290": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2291": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1896"
    },
    "2294": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "2296": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2297": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "2298": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2300": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "ADD",
      "path": "0"
    },
    "2301": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2302": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "POP",
      "path": "0"
    },
    "2303": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "POP",
      "path": "0"
    },
    "2304": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2306": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2307": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2308": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2309": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SUB",
      "path": "0"
    },
    "2310": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2311": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2312": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8606,
        8745
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2313": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8763,
        9013
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 17,
      "value": "0x930"
    },
    "2316": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8794
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2317": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8800
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2319": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8800
      ],
      "op": "ADD",
      "path": "0"
    },
    "2320": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8800
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2321": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2323": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8821
      ],
      "op": "ADD",
      "path": "0"
    },
    "2324": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8821
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2325": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8828
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2327": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8828
      ],
      "op": "ADD",
      "path": "0"
    },
    "2328": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8788,
        8828
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2329": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8852,
        8864
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2330": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8852,
        8878
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x200"
    },
    "2333": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8852,
        8878
      ],
      "op": "ADD",
      "path": "0"
    },
    "2334": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8852,
        8878
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2335": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8916,
        8917
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2336": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8931,
        8943
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2337": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8931,
        8958
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x220"
    },
    "2340": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8931,
        8958
      ],
      "op": "ADD",
      "path": "0"
    },
    "2341": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8931,
        8958
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2342": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8985,
        8997
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2343": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8985,
        9012
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x240"
    },
    "2346": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8985,
        9012
      ],
      "op": "ADD",
      "path": "0"
    },
    "2347": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8985,
        9012
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2348": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8763,
        8774
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C2"
    },
    "2351": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        8763,
        9013
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2352": {
      "branch": 128,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8763,
        9013
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2353": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x96B"
    },
    "2356": {
      "branch": 128,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2357": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2359": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2360": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2364": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2366": {
      "op": "SHL"
    },
    "2367": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2368": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2369": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2371": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "ADD",
      "path": "0"
    },
    "2372": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2373": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2374": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2376": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "ADD",
      "path": "0"
    },
    "2377": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2378": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2379": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SUB",
      "path": "0"
    },
    "2380": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2381": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2382": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x23"
    },
    "2384": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2385": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2386": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2388": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "ADD",
      "path": "0"
    },
    "2389": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2390": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "2393": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x23"
    },
    "2395": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2396": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "2397": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2399": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "ADD",
      "path": "0"
    },
    "2400": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2401": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "POP",
      "path": "0"
    },
    "2402": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "POP",
      "path": "0"
    },
    "2403": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2405": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2406": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2407": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2408": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SUB",
      "path": "0"
    },
    "2409": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2410": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2411": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        8755,
        9086
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2412": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9225
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 18,
      "value": "0x80"
    },
    "2414": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9225
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2415": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9225
      ],
      "op": "ADD",
      "path": "0"
    },
    "2416": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9225
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2417": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9239
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2419": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9239
      ],
      "op": "ADD",
      "path": "0"
    },
    "2420": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9239
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2421": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9244
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2422": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9244
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2423": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2425": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2426": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2427": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "ADD",
      "path": "0"
    },
    "2428": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2429": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9328,
        9354
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x260"
    },
    "2432": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9328,
        9354
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2433": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9328,
        9354
      ],
      "op": "ADD",
      "path": "0"
    },
    "2434": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9328,
        9354
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2435": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9179,
        9355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x98D"
    },
    "2438": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9179,
        9355
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2439": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9213,
        9244
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2440": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9272,
        9305
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2441": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9179,
        9199
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA3"
    },
    "2444": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        9179,
        9355
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2445": {
      "branch": 129,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9179,
        9355
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2446": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9C8"
    },
    "2449": {
      "branch": 129,
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2450": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2452": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2453": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2457": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2459": {
      "op": "SHL"
    },
    "2460": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2461": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2462": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2464": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "ADD",
      "path": "0"
    },
    "2465": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2466": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2467": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2469": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "ADD",
      "path": "0"
    },
    "2470": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2471": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2472": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SUB",
      "path": "0"
    },
    "2473": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2474": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2475": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "2477": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2478": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2479": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2481": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "ADD",
      "path": "0"
    },
    "2482": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2483": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B8"
    },
    "2486": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x48"
    },
    "2488": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2489": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "CODECOPY",
      "path": "0"
    },
    "2490": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2492": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "ADD",
      "path": "0"
    },
    "2493": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2494": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "POP",
      "path": "0"
    },
    "2495": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "POP",
      "path": "0"
    },
    "2496": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2498": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2499": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2500": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2501": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SUB",
      "path": "0"
    },
    "2502": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2503": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2504": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9171,
        9468
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2505": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 19,
      "value": "0xA37"
    },
    "2508": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2510": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2511": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2512": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2514": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "ADD",
      "path": "0"
    },
    "2515": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2517": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2518": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2519": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9527,
        9539
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2520": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9527,
        9553
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "2523": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9527,
        9553
      ],
      "op": "ADD",
      "path": "0"
    },
    "2524": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9527,
        9553
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2525": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2526": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2527": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2529": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "ADD",
      "path": "0"
    },
    "2530": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9556,
        9568
      ],
      "op": "DUP6",
      "path": "0"
    },
    "2531": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9556,
        9582
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E0"
    },
    "2534": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9556,
        9582
      ],
      "op": "ADD",
      "path": "0"
    },
    "2535": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9556,
        9582
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2536": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2537": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2538": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "POP",
      "path": "0"
    },
    "2539": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x453"
    },
    "2542": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2544": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2545": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2546": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2548": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "ADD",
      "path": "0"
    },
    "2549": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2551": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2552": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2553": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9639
      ],
      "op": "DUP9",
      "path": "0"
    },
    "2554": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9645
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2556": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9645
      ],
      "op": "ADD",
      "path": "0"
    },
    "2557": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9645
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2558": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9659
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "2560": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9659
      ],
      "op": "ADD",
      "path": "0"
    },
    "2561": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9659
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2562": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9666
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2564": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9666
      ],
      "op": "ADD",
      "path": "0"
    },
    "2565": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9633,
        9666
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2566": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2567": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2568": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2570": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "ADD",
      "path": "0"
    },
    "2571": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9668,
        9680
      ],
      "op": "DUP8",
      "path": "0"
    },
    "2572": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9668,
        9694
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x260"
    },
    "2575": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9668,
        9694
      ],
      "op": "ADD",
      "path": "0"
    },
    "2576": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9668,
        9694
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2577": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2578": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2579": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "POP",
      "path": "0"
    },
    "2580": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2582": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2583": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2584": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2586": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "ADD",
      "path": "0"
    },
    "2587": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2589": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2590": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2591": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9714,
        9726
      ],
      "op": "DUP9",
      "path": "0"
    },
    "2592": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9714,
        9741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x220"
    },
    "2595": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9714,
        9741
      ],
      "op": "ADD",
      "path": "0"
    },
    "2596": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9714,
        9741
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2597": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2598": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2599": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2601": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "ADD",
      "path": "0"
    },
    "2602": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9743,
        9755
      ],
      "op": "DUP9",
      "path": "0"
    },
    "2603": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9743,
        9770
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x240"
    },
    "2606": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9743,
        9770
      ],
      "op": "ADD",
      "path": "0"
    },
    "2607": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9743,
        9770
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2608": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2609": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2610": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9785
      ],
      "op": "POP",
      "path": "0"
    },
    "2611": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9597,
        9614
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1032"
    },
    "2614": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "i",
      "offset": [
        9597,
        9785
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2615": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9496,
        9795
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2616": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        9479,
        9795
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "2617": {
      "op": "POP"
    },
    "2618": {
      "op": "POP"
    },
    "2619": {
      "op": "POP"
    },
    "2620": {
      "op": "POP"
    },
    "2621": {
      "op": "POP"
    },
    "2622": {
      "op": "POP"
    },
    "2623": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2624": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "2625": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2626": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "POP",
      "path": "0"
    },
    "2627": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "POP",
      "path": "0"
    },
    "2628": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "offset": [
        1553,
        9834
      ],
      "op": "POP",
      "path": "0"
    },
    "2629": {
      "fn": "ReEncryptionValidator.validateCFrag",
      "jump": "o",
      "offset": [
        1553,
        9834
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2630": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2102,
        2485
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2631": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2180,
        2202
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA4E"
    },
    "2634": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2180,
        2202
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16D4"
    },
    "2637": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2180,
        2202
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2638": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2180,
        2202
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2639": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2246
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 20
    },
    "2640": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2246
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2641": {
      "offset": [
        1666,
        1694
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x62"
    },
    "2643": {
      "branch": 132,
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2226,
        2262
      ],
      "op": "EQ",
      "path": "2"
    },
    "2644": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA5C"
    },
    "2647": {
      "branch": 132,
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2648": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2650": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2651": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2652": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2218,
        2263
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2653": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2273,
        2288
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2655": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2291,
        2316
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA67"
    },
    "2658": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2302,
        2315
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2659": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2291,
        2301
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x128E"
    },
    "2662": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2291,
        2316
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2663": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2291,
        2316
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2664": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2273,
        2316
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2665": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2273,
        2316
      ],
      "op": "POP",
      "path": "2"
    },
    "2666": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2336,
        2370
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 21,
      "value": "0xA77"
    },
    "2669": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2346,
        2353
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2670": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2355,
        2362
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2671": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2355,
        2369
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2673": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2355,
        2369
      ],
      "op": "ADD",
      "path": "2"
    },
    "2674": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2355,
        2369
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2675": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2336,
        2345
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "2678": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2336,
        2370
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2679": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2336,
        2370
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2680": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2326,
        2370
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2681": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2326,
        2370
      ],
      "op": "POP",
      "path": "2"
    },
    "2682": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2390,
        2424
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 22,
      "value": "0xA87"
    },
    "2685": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2400,
        2407
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2686": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2409,
        2416
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2687": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2409,
        2423
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2689": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2409,
        2423
      ],
      "op": "ADD",
      "path": "2"
    },
    "2690": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2409,
        2423
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2691": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2390,
        2399
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "2694": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2390,
        2424
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2695": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2390,
        2424
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2696": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2380,
        2424
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2697": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2380,
        2424
      ],
      "op": "POP",
      "path": "2"
    },
    "2698": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2458,
        2477
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 23,
      "value": "0xA92"
    },
    "2701": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2469,
        2476
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2702": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2458,
        2468
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2705": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "i",
      "offset": [
        2458,
        2477
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2706": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2458,
        2477
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2707": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2434,
        2447
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2709": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2434,
        2447
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2710": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2434,
        2447
      ],
      "op": "ADD",
      "path": "2"
    },
    "2711": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2434,
        2478
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2712": {
      "op": "POP"
    },
    "2713": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2434,
        2441
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2714": {
      "fn": "UmbralDeserializer.toCapsule",
      "offset": [
        2102,
        2485
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2715": {
      "op": "POP"
    },
    "2716": {
      "fn": "UmbralDeserializer.toCapsule",
      "jump": "o",
      "offset": [
        2102,
        2485
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2717": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        3976,
        4594
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2718": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4056,
        4080
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAA5"
    },
    "2721": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4056,
        4080
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1701"
    },
    "2724": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4056,
        4080
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2725": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4056,
        4080
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2726": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4123,
        4141
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2727": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4123,
        4141
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2728": {
      "offset": [
        1906,
        1948
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x167"
    },
    "2731": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4159,
        4201
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 24
    },
    "2732": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4159,
        4201
      ],
      "op": "LT",
      "path": "2"
    },
    "2733": {
      "branch": 133,
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4159,
        4201
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2734": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAB6"
    },
    "2737": {
      "branch": 133,
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2738": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2740": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2741": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2742": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4151,
        4202
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2743": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4213,
        4228
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2745": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4231,
        4254
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC1"
    },
    "2748": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4242,
        4253
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2749": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4231,
        4241
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x128E"
    },
    "2752": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4231,
        4254
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2753": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4231,
        4254
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2754": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4213,
        4254
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2755": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4213,
        4254
      ],
      "op": "POP",
      "path": "2"
    },
    "2756": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4274,
        4307
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 25,
      "value": "0xAD1"
    },
    "2759": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4284,
        4291
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2760": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4293,
        4298
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2761": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4293,
        4306
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2763": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4293,
        4306
      ],
      "op": "ADD",
      "path": "2"
    },
    "2764": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4293,
        4306
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2765": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4274,
        4283
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "2768": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4274,
        4307
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2769": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4274,
        4307
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2770": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4264,
        4307
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2771": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4264,
        4307
      ],
      "op": "POP",
      "path": "2"
    },
    "2772": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4327,
        4360
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 26,
      "value": "0xAE1"
    },
    "2775": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4337,
        4344
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2776": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4346,
        4351
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2777": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4346,
        4359
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2779": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4346,
        4359
      ],
      "op": "ADD",
      "path": "2"
    },
    "2780": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4346,
        4359
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2781": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4327,
        4336
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "2784": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4327,
        4360
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2785": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4327,
        4360
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2786": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4317,
        4360
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2787": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4317,
        4360
      ],
      "op": "POP",
      "path": "2"
    },
    "2788": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4386,
        4405
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 27,
      "value": "0xAEC"
    },
    "2791": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4397,
        4404
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2792": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4386,
        4396
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2795": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4386,
        4405
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2796": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4386,
        4405
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2797": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4370,
        4383
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2799": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4370,
        4383
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2800": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4370,
        4383
      ],
      "op": "ADD",
      "path": "2"
    },
    "2801": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4370,
        4405
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2802": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4476,
        4496
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 28,
      "value": "0x60"
    },
    "2804": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4476,
        4496
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2805": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4476,
        4496
      ],
      "op": "ADD",
      "path": "2"
    },
    "2806": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4476,
        4496
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2807": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2809": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "SWAP2",
      "path": "2",
      "statement": 29
    },
    "2810": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2811": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2812": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "ADD",
      "path": "2"
    },
    "2813": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2814": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4457,
        4497
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB08"
    },
    "2817": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4457,
        4497
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2818": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2819": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4415,
        4437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2820": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4457,
        4466
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "2823": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4457,
        4497
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2824": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4457,
        4497
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2825": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4447,
        4497
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2826": {
      "op": "POP"
    },
    "2827": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4522,
        4587
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 30,
      "value": "0xB18"
    },
    "2830": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4447,
        4497
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2831": {
      "op": "PUSH1",
      "value": "0x82"
    },
    "2833": {
      "op": "NOT"
    },
    "2834": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4550,
        4586
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2835": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4550,
        4586
      ],
      "op": "ADD",
      "path": "2"
    },
    "2836": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4522,
        4540
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12B3"
    },
    "2839": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "i",
      "offset": [
        4522,
        4587
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2840": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4522,
        4587
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2841": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4519
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2843": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4519
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2844": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4519
      ],
      "op": "ADD",
      "path": "2"
    },
    "2845": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4587
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2846": {
      "op": "POP"
    },
    "2847": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4513
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2848": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        4508,
        4513
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2849": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "offset": [
        3976,
        4594
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2850": {
      "op": "POP"
    },
    "2851": {
      "op": "POP"
    },
    "2852": {
      "fn": "UmbralDeserializer.toCapsuleFrag",
      "jump": "o",
      "offset": [
        3976,
        4594
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2853": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2854": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4750,
        4777
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB2D"
    },
    "2857": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4750,
        4777
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1747"
    },
    "2860": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4750,
        4777
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2861": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4750,
        4777
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2862": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4801,
        4824
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 31
    },
    "2863": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4801,
        4824
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2864": {
      "offset": [
        1995,
        2027
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2B9"
    },
    "2867": {
      "branch": 134,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4801,
        4849
      ],
      "op": "EQ",
      "path": "2"
    },
    "2868": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB3C"
    },
    "2871": {
      "branch": 134,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2872": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2874": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2875": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2876": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4793,
        4850
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2877": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4860,
        4883
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2879": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4886,
        4914
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB47"
    },
    "2882": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4897,
        4913
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2883": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4886,
        4896
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x128E"
    },
    "2886": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4886,
        4914
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2887": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4886,
        4914
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2888": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4860,
        4914
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2889": {
      "op": "POP"
    },
    "2890": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2891": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4996,
        5015
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 32,
      "value": "0xB53"
    },
    "2894": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4860,
        4914
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2895": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4996,
        5006
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2898": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        4996,
        5015
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2899": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4996,
        5015
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2900": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4968,
        5016
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2901": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4968,
        5016
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2902": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2904": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5026,
        5048
      ],
      "op": "ADD",
      "path": "2",
      "statement": 33
    },
    "2905": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5088,
        5107
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 34,
      "value": "0xB61"
    },
    "2908": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5026,
        5048
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2909": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2912": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5088,
        5107
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2913": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5088,
        5107
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2914": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5077
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2916": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5077
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2917": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5077
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2918": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5077
      ],
      "op": "ADD",
      "path": "2"
    },
    "2919": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5108
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2920": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5108
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2921": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5108
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2922": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5059,
        5108
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2923": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5118,
        5140
      ],
      "op": "ADD",
      "path": "2",
      "statement": 35
    },
    "2924": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5180,
        5199
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 36,
      "value": "0xB74"
    },
    "2927": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5118,
        5140
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2928": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5180,
        5190
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2931": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5180,
        5199
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2932": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5180,
        5199
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2933": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5151,
        5169
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2935": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5151,
        5169
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2936": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5151,
        5169
      ],
      "op": "ADD",
      "path": "2"
    },
    "2937": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5151,
        5200
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2938": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2940": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5210,
        5232
      ],
      "op": "ADD",
      "path": "2",
      "statement": 37
    },
    "2941": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5272,
        5291
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 38,
      "value": "0xB85"
    },
    "2944": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5210,
        5232
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2945": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5272,
        5282
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2948": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5272,
        5291
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2949": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5272,
        5291
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2950": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5243,
        5261
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2952": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5243,
        5261
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2953": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5243,
        5261
      ],
      "op": "ADD",
      "path": "2"
    },
    "2954": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5243,
        5292
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2955": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2957": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5302,
        5324
      ],
      "op": "ADD",
      "path": "2",
      "statement": 39
    },
    "2958": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5365,
        5384
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 40,
      "value": "0xB96"
    },
    "2961": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5302,
        5324
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2962": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5365,
        5375
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2965": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5365,
        5384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2966": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5365,
        5384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2967": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5335,
        5354
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2969": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5335,
        5354
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2970": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5335,
        5354
      ],
      "op": "ADD",
      "path": "2"
    },
    "2971": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5335,
        5385
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2972": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2974": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5395,
        5417
      ],
      "op": "ADD",
      "path": "2",
      "statement": 41
    },
    "2975": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5458,
        5477
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 42,
      "value": "0xBA7"
    },
    "2978": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5395,
        5417
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2979": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5458,
        5468
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2982": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5458,
        5477
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2983": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5458,
        5477
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2984": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5428,
        5447
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2986": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5428,
        5447
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2987": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5428,
        5447
      ],
      "op": "ADD",
      "path": "2"
    },
    "2988": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5428,
        5478
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2989": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2991": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5488,
        5510
      ],
      "op": "ADD",
      "path": "2",
      "statement": 43
    },
    "2992": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5550,
        5569
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 44,
      "value": "0xBB8"
    },
    "2995": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5488,
        5510
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2996": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5550,
        5560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "2999": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5550,
        5569
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3000": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5550,
        5569
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3001": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5521,
        5539
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "3003": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5521,
        5539
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3004": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5521,
        5539
      ],
      "op": "ADD",
      "path": "2"
    },
    "3005": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5521,
        5570
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3006": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3008": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5580,
        5602
      ],
      "op": "ADD",
      "path": "2",
      "statement": 45
    },
    "3009": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5641,
        5660
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 46,
      "value": "0xBC9"
    },
    "3012": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5580,
        5602
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3013": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5641,
        5651
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3016": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5641,
        5660
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3017": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5641,
        5660
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3018": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5613,
        5630
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "3020": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5613,
        5630
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3021": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5613,
        5630
      ],
      "op": "ADD",
      "path": "2"
    },
    "3022": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5613,
        5661
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3023": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3025": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5671,
        5693
      ],
      "op": "ADD",
      "path": "2",
      "statement": 47
    },
    "3026": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5733,
        5752
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 48,
      "value": "0xBDA"
    },
    "3029": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5671,
        5693
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3030": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5733,
        5743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3033": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5733,
        5752
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3034": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5733,
        5752
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3035": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5704,
        5722
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "3038": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5704,
        5722
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3039": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5704,
        5722
      ],
      "op": "ADD",
      "path": "2"
    },
    "3040": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5704,
        5753
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3041": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3043": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5763,
        5785
      ],
      "op": "ADD",
      "path": "2",
      "statement": 49
    },
    "3044": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5825,
        5844
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 50,
      "value": "0xBEC"
    },
    "3047": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5763,
        5785
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3048": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5825,
        5835
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3051": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5825,
        5844
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3052": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5825,
        5844
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3053": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5796,
        5814
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x120"
    },
    "3056": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5796,
        5814
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3057": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5796,
        5814
      ],
      "op": "ADD",
      "path": "2"
    },
    "3058": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5796,
        5845
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3059": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3061": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5855,
        5877
      ],
      "op": "ADD",
      "path": "2",
      "statement": 51
    },
    "3062": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5917,
        5936
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 52,
      "value": "0xBFE"
    },
    "3065": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5855,
        5877
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3066": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5917,
        5927
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3069": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        5917,
        5936
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3070": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5917,
        5936
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3071": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5888,
        5906
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x140"
    },
    "3074": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5888,
        5906
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3075": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5888,
        5906
      ],
      "op": "ADD",
      "path": "2"
    },
    "3076": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5888,
        5937
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3077": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3079": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5947,
        5969
      ],
      "op": "ADD",
      "path": "2",
      "statement": 53
    },
    "3080": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6010,
        6029
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 54,
      "value": "0xC10"
    },
    "3083": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5947,
        5969
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3084": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6010,
        6020
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3087": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6010,
        6029
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3088": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6010,
        6029
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3089": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5980,
        5999
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x160"
    },
    "3092": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5980,
        5999
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3093": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5980,
        5999
      ],
      "op": "ADD",
      "path": "2"
    },
    "3094": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        5980,
        6030
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3095": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3097": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6040,
        6062
      ],
      "op": "ADD",
      "path": "2",
      "statement": 55
    },
    "3098": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6103,
        6122
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 56,
      "value": "0xC22"
    },
    "3101": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6040,
        6062
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3102": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6103,
        6113
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3105": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6103,
        6122
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3106": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6103,
        6122
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3107": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6073,
        6092
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x180"
    },
    "3110": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6073,
        6092
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3111": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6073,
        6092
      ],
      "op": "ADD",
      "path": "2"
    },
    "3112": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6073,
        6123
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3113": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3115": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6133,
        6155
      ],
      "op": "ADD",
      "path": "2",
      "statement": 57
    },
    "3116": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6195,
        6214
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 58,
      "value": "0xC34"
    },
    "3119": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6133,
        6155
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3120": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6195,
        6205
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3123": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6195,
        6214
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3124": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6195,
        6214
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3125": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6166,
        6184
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A0"
    },
    "3128": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6166,
        6184
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3129": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6166,
        6184
      ],
      "op": "ADD",
      "path": "2"
    },
    "3130": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6166,
        6215
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3131": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3133": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6225,
        6247
      ],
      "op": "ADD",
      "path": "2",
      "statement": 59
    },
    "3134": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6287,
        6306
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 60,
      "value": "0xC46"
    },
    "3137": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6225,
        6247
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3138": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6287,
        6297
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3141": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6287,
        6306
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3142": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6287,
        6306
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3143": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6258,
        6276
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C0"
    },
    "3146": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6258,
        6276
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3147": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6258,
        6276
      ],
      "op": "ADD",
      "path": "2"
    },
    "3148": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6258,
        6307
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3149": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3151": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6317,
        6339
      ],
      "op": "ADD",
      "path": "2",
      "statement": 61
    },
    "3152": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6379,
        6398
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 62,
      "value": "0xC58"
    },
    "3155": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6317,
        6339
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3156": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6379,
        6389
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3159": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6379,
        6398
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3160": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6379,
        6398
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3161": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6350,
        6368
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1E0"
    },
    "3164": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6350,
        6368
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3165": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6350,
        6368
      ],
      "op": "ADD",
      "path": "2"
    },
    "3166": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6350,
        6399
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3167": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3169": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6409,
        6431
      ],
      "op": "ADD",
      "path": "2",
      "statement": 63
    },
    "3170": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6471,
        6490
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 64,
      "value": "0xC6A"
    },
    "3173": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6409,
        6431
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3174": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6471,
        6481
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3177": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6471,
        6490
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3178": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6471,
        6490
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3179": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6442,
        6460
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x200"
    },
    "3182": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6442,
        6460
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3183": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6442,
        6460
      ],
      "op": "ADD",
      "path": "2"
    },
    "3184": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6442,
        6491
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3185": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3187": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6501,
        6523
      ],
      "op": "ADD",
      "path": "2",
      "statement": 65
    },
    "3188": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6564,
        6583
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 66,
      "value": "0xC7C"
    },
    "3191": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6501,
        6523
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3192": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6564,
        6574
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3195": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6564,
        6583
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3196": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6564,
        6583
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3197": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6534,
        6553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x220"
    },
    "3200": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6534,
        6553
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3201": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6534,
        6553
      ],
      "op": "ADD",
      "path": "2"
    },
    "3202": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6534,
        6584
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3203": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3205": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6594,
        6616
      ],
      "op": "ADD",
      "path": "2",
      "statement": 67
    },
    "3206": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6657,
        6676
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 68,
      "value": "0xC8E"
    },
    "3209": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6594,
        6616
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3210": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6657,
        6667
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3213": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6657,
        6676
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3214": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6657,
        6676
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3215": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6627,
        6646
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x240"
    },
    "3218": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6627,
        6646
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3219": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6627,
        6646
      ],
      "op": "ADD",
      "path": "2"
    },
    "3220": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6627,
        6677
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3221": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3223": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6687,
        6709
      ],
      "op": "ADD",
      "path": "2",
      "statement": 69
    },
    "3224": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6749,
        6768
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 70,
      "value": "0xCA0"
    },
    "3227": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6687,
        6709
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3228": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6749,
        6759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3231": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6749,
        6768
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3232": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6749,
        6768
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3233": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6720,
        6738
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x260"
    },
    "3236": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6720,
        6738
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3237": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6720,
        6738
      ],
      "op": "ADD",
      "path": "2"
    },
    "3238": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6720,
        6769
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3239": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3241": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6779,
        6801
      ],
      "op": "ADD",
      "path": "2",
      "statement": 71
    },
    "3242": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6846,
        6865
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 72,
      "value": "0xCB2"
    },
    "3245": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6779,
        6801
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3246": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6846,
        6856
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3249": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6846,
        6865
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3250": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6846,
        6865
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3251": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6812,
        6843
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x280"
    },
    "3254": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6812,
        6843
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3255": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6812,
        6843
      ],
      "op": "ADD",
      "path": "2"
    },
    "3256": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6812,
        6865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3257": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6886,
        6888
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 73,
      "value": "0x20"
    },
    "3259": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6875,
        6888
      ],
      "op": "ADD",
      "path": "2"
    },
    "3260": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6941,
        6960
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 74,
      "value": "0xCC4"
    },
    "3263": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6875,
        6888
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3264": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6941,
        6951
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3267": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        6941,
        6960
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3268": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6941,
        6960
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3269": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6925,
        6962
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "3271": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6925,
        6962
      ],
      "op": "SHR",
      "path": "2"
    },
    "3272": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6899,
        6922
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2A0"
    },
    "3275": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6899,
        6922
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3276": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6899,
        6922
      ],
      "op": "ADD",
      "path": "2"
    },
    "3277": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6899,
        6962
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3278": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6983,
        6985
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 75,
      "value": "0x14"
    },
    "3280": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6972,
        6985
      ],
      "op": "ADD",
      "path": "2"
    },
    "3281": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7353,
        7372
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 76,
      "value": "0xCD9"
    },
    "3284": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        6972,
        6985
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3285": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7353,
        7363
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "3288": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "i",
      "offset": [
        7353,
        7372
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3289": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7353,
        7372
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3290": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3292": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3294": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3296": {
      "op": "SHL"
    },
    "3297": {
      "op": "SUB"
    },
    "3298": {
      "op": "NOT"
    },
    "3299": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7329,
        7373
      ],
      "op": "AND",
      "path": "2"
    },
    "3300": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7329,
        7343
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C0"
    },
    "3303": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7329,
        7343
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3304": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7329,
        7343
      ],
      "op": "ADD",
      "path": "2"
    },
    "3305": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7329,
        7373
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3306": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7394,
        7395
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 77,
      "value": "0x5"
    },
    "3308": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7383,
        7395
      ],
      "op": "ADD",
      "path": "2"
    },
    "3309": {
      "offset": [
        1995,
        2027
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2B9"
    },
    "3312": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7425,
        7464
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 78
    },
    "3313": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7425,
        7464
      ],
      "op": "ADD",
      "path": "2"
    },
    "3314": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7414,
        7464
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3315": {
      "branch": 135,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7414,
        7464
      ],
      "op": "EQ",
      "path": "2"
    },
    "3316": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCFC"
    },
    "3319": {
      "branch": 135,
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3320": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3322": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3323": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "REVERT",
      "path": "2"
    },
    "3324": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        7406,
        7465
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3325": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "POP",
      "path": "2"
    },
    "3326": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "POP",
      "path": "2"
    },
    "3327": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3328": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3329": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "offset": [
        4661,
        7472
      ],
      "op": "POP",
      "path": "2"
    },
    "3330": {
      "fn": "UmbralDeserializer.toPreComputedData",
      "jump": "o",
      "offset": [
        4661,
        7472
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3331": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3332": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10191,
        10206
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3333": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10191,
        10206
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3334": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10191,
        10211
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3335": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10191,
        10211
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3336": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10225,
        10247
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3338": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10225,
        10247
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3339": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10225,
        10247
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3340": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10225,
        10247
      ],
      "op": "ADD",
      "path": "0"
    },
    "3341": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10225,
        10247
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3342": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10285,
        10299
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3343": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10285,
        10299
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3344": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10285,
        10304
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3345": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10285,
        10304
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3346": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10318,
        10339
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3347": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10318,
        10339
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3348": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10318,
        10339
      ],
      "op": "ADD",
      "path": "0"
    },
    "3349": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10318,
        10339
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3350": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10389
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3352": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10389
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3353": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10389
      ],
      "op": "ADD",
      "path": "0"
    },
    "3354": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10389
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3355": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10389
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3356": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10397
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3357": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10402
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3358": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10377,
        10402
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3359": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10416,
        10443
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3360": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10416,
        10443
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3361": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10416,
        10443
      ],
      "op": "ADD",
      "path": "0"
    },
    "3362": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10416,
        10443
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3363": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3365": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3366": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3367": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3371": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3373": {
      "op": "SHL"
    },
    "3374": {
      "op": "SUB"
    },
    "3375": {
      "op": "NOT"
    },
    "3376": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "3378": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP10",
      "path": "0"
    },
    "3379": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP11",
      "path": "0"
    },
    "3380": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SHL",
      "path": "0"
    },
    "3381": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3382": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "AND",
      "path": "0"
    },
    "3383": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3384": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP13",
      "path": "0"
    },
    "3385": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3386": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3387": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x21"
    },
    "3389": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3390": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3391": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "3392": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3393": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "3394": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3395": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3396": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP9",
      "path": "0"
    },
    "3397": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SHL",
      "path": "0"
    },
    "3398": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3399": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "AND",
      "path": "0"
    },
    "3400": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x41"
    },
    "3402": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3403": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3404": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3405": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x42"
    },
    "3407": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3408": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3409": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3410": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3411": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3412": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3413": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3414": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SHL",
      "path": "0"
    },
    "3415": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3416": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3417": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "AND",
      "path": "0"
    },
    "3418": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x62"
    },
    "3420": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3421": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3422": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3423": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x63"
    },
    "3425": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3426": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3427": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3428": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3429": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3430": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3431": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3432": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3433": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3434": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3435": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3436": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SUB",
      "path": "0"
    },
    "3437": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3438": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3439": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3440": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3441": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3442": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x83"
    },
    "3444": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3445": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "ADD",
      "path": "0"
    },
    "3446": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3447": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3448": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10567
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 79
    },
    "3449": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10567
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3450": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10567
      ],
      "op": "ADD",
      "path": "0"
    },
    "3451": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10567
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3452": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10572
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3453": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10572
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3454": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3455": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3456": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "ADD",
      "path": "0"
    },
    "3457": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3458": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10660
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3459": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10660
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3460": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10660
      ],
      "op": "ADD",
      "path": "0"
    },
    "3461": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10660
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3462": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10665
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3463": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10665
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3464": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10679,
        10700
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3465": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10679,
        10700
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3466": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10679,
        10700
      ],
      "op": "ADD",
      "path": "0"
    },
    "3467": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10679,
        10700
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3468": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10750
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3469": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10750
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3470": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10758
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3471": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10758
      ],
      "op": "ADD",
      "path": "0"
    },
    "3472": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10758
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3473": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10763
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3474": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10738,
        10763
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3475": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10777,
        10804
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3476": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10777,
        10804
      ],
      "op": "DUP9",
      "path": "0"
    },
    "3477": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10777,
        10804
      ],
      "op": "ADD",
      "path": "0"
    },
    "3478": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10777,
        10804
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3479": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3480": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3481": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10012,
        10019
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3483": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10012,
        10019
      ],
      "op": "SWAP10",
      "path": "0"
    },
    "3484": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "DUP10",
      "path": "0"
    },
    "3485": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10138,
        10453
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "3486": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10572
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "3487": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10552,
        10572
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "3488": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3489": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10586,
        10608
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "3490": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10665
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3491": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10646,
        10665
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3492": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA3"
    },
    "3494": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3495": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3496": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3497": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3498": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP11",
      "path": "0"
    },
    "3499": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3500": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3501": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3502": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3503": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3504": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3505": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3507": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3508": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "LT",
      "path": "0"
    },
    "3509": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDCF"
    },
    "3512": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3513": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3514": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3515": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3516": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3519": {
      "op": "NOT"
    },
    "3520": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3521": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3522": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3523": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3524": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3526": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3527": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3528": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3529": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3530": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3531": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB0"
    },
    "3534": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3535": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3536": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3537": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3538": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3539": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3541": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3542": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3543": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SUB",
      "path": "0"
    },
    "3544": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3547": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "EXP",
      "path": "0"
    },
    "3548": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3550": {
      "op": "NOT"
    },
    "3551": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3552": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3553": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "NOT",
      "path": "0"
    },
    "3554": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3555": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3556": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "AND",
      "path": "0"
    },
    "3557": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3558": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "AND",
      "path": "0"
    },
    "3559": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "OR",
      "path": "0"
    },
    "3560": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3561": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3562": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "3564": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP11",
      "path": "0"
    },
    "3565": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP12",
      "path": "0"
    },
    "3566": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SHL",
      "path": "0"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3569": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3571": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3573": {
      "op": "SHL"
    },
    "3574": {
      "op": "SUB"
    },
    "3575": {
      "op": "NOT"
    },
    "3576": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3577": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3578": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "AND",
      "path": "0"
    },
    "3579": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3580": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3581": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3582": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3583": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3584": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3585": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3586": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3588": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3589": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3590": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP10",
      "path": "0"
    },
    "3591": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3592": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP10",
      "path": "0"
    },
    "3593": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3594": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "3595": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP10",
      "path": "0"
    },
    "3596": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SHL",
      "path": "0"
    },
    "3597": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3598": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "AND",
      "path": "0"
    },
    "3599": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x21"
    },
    "3601": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP9",
      "path": "0"
    },
    "3602": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3603": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3604": {
      "op": "POP"
    },
    "3605": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x22"
    },
    "3607": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3608": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3609": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3610": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3611": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3612": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3613": {
      "op": "POP"
    },
    "3614": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3615": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SHL",
      "path": "0"
    },
    "3616": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "AND",
      "path": "0"
    },
    "3617": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x42"
    },
    "3619": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3620": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3621": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3622": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x43"
    },
    "3624": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3625": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3626": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3627": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3628": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3629": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3630": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3631": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3633": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3634": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3635": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3636": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3637": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SUB",
      "path": "0"
    },
    "3638": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3639": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3640": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3641": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3642": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3643": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x63"
    },
    "3645": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3646": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "ADD",
      "path": "0"
    },
    "3647": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3648": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3649": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11042
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 80,
      "value": "0x80"
    },
    "3651": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11042
      ],
      "op": "DUP9",
      "path": "0"
    },
    "3652": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11042
      ],
      "op": "ADD",
      "path": "0"
    },
    "3653": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11042
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3654": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11063
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3655": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11063
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3656": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11063
      ],
      "op": "ADD",
      "path": "0"
    },
    "3657": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11063
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3658": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11068
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3659": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11068
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3660": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3661": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3662": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "ADD",
      "path": "0"
    },
    "3663": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3664": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11186
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3666": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11186
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3667": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11186
      ],
      "op": "ADD",
      "path": "0"
    },
    "3668": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11186
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3669": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11191
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3670": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11191
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3671": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3672": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3673": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "ADD",
      "path": "0"
    },
    "3674": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3675": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xC0"
    },
    "3677": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3678": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3679": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "ADD",
      "path": "0"
    },
    "3680": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3681": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3682": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3683": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "3684": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP10",
      "path": "0"
    },
    "3685": {
      "op": "POP"
    },
    "3686": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "DUP10",
      "path": "0"
    },
    "3687": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10476,
        10814
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "3688": {
      "op": "POP"
    },
    "3689": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3691": {
      "op": "PUSH1",
      "value": "0xF9"
    },
    "3693": {
      "op": "SHL"
    },
    "3694": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10913,
        10944
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "3695": {
      "offset": [
        641,
        707
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x3C98795773FF1C241FC0B1CCED85E80F8366581DDA5C9452175EBD41385FA1F"
    },
    "3728": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        641,
        707
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "3729": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11068
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3730": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11030,
        11068
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "3731": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3732": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11082,
        11122
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "3733": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11191
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3734": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11160,
        11191
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3735": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3736": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11205,
        11238
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3737": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3738": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11290,
        11311
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3739": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x83"
    },
    "3741": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3742": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3743": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3744": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3745": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3746": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3747": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3748": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP12",
      "path": "0"
    },
    "3749": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3750": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3751": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3752": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3753": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3754": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3755": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3757": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3758": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "LT",
      "path": "0"
    },
    "3759": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEC9"
    },
    "3762": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3763": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3764": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3765": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3766": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3767": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3769": {
      "op": "NOT"
    },
    "3770": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3771": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3772": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3773": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3774": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3776": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3777": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3778": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3779": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3780": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3781": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEAA"
    },
    "3784": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3785": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3786": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3788": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3789": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3791": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3792": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3795": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "EXP",
      "path": "0"
    },
    "3796": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3797": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3798": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "NOT",
      "path": "0"
    },
    "3799": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3800": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3801": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3802": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3803": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3804": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3805": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3806": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3807": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3808": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "OR",
      "path": "0"
    },
    "3809": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3810": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3811": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3812": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3813": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3814": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3815": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3816": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3817": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3818": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3819": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3820": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP9",
      "path": "0"
    },
    "3821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3825": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3827": {
      "op": "SHL"
    },
    "3828": {
      "op": "SUB"
    },
    "3829": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "NOT",
      "path": "0"
    },
    "3830": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3831": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3832": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3833": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3835": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3836": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP8",
      "path": "0"
    },
    "3837": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3838": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3839": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3841": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3842": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP7",
      "path": "0"
    },
    "3843": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3845": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3846": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "3848": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SHL",
      "path": "0"
    },
    "3849": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3850": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3851": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3853": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3854": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3855": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3856": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3857": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3859": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3860": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3861": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3863": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3864": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "3866": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SHL",
      "path": "0"
    },
    "3867": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3868": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3869": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3871": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3872": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3873": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3874": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3875": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3877": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3878": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3879": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3880": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3881": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3882": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3884": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3885": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3886": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3887": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3888": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3889": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3890": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3892": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3893": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "LT",
      "path": "0"
    },
    "3894": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF50"
    },
    "3897": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3898": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3899": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3900": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3901": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3902": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3904": {
      "op": "NOT"
    },
    "3905": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3906": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3907": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3908": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3909": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3911": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3912": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3913": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3914": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3915": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3916": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF31"
    },
    "3919": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3920": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3921": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3923": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3924": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3926": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3927": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3930": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "EXP",
      "path": "0"
    },
    "3931": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3932": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3933": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "NOT",
      "path": "0"
    },
    "3934": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3935": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3936": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3937": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3938": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3939": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3940": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "AND",
      "path": "0"
    },
    "3941": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3942": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3943": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "OR",
      "path": "0"
    },
    "3944": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3945": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3946": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3947": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3948": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3949": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3950": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3951": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3952": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3953": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3954": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "ADD",
      "path": "0"
    },
    "3955": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "3956": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3957": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3958": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3959": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3960": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3961": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3962": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3963": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3964": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3965": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3967": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3968": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3970": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3971": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3972": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3973": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SUB",
      "path": "0"
    },
    "3974": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3975": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3976": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3977": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3979": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10837,
        11321
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3980": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10825,
        11321
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3981": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        10825,
        11321
      ],
      "op": "POP",
      "path": "0"
    },
    "3982": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11332,
        11341
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3984": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11344,
        11373
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF98"
    },
    "3987": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11363,
        11372
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3988": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11344,
        11362
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13B9"
    },
    "3991": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "jump": "i",
      "offset": [
        11344,
        11373
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3992": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11344,
        11373
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3993": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        11332,
        11373
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3994": {
      "op": "POP"
    },
    "3995": {
      "op": "POP"
    },
    "3996": {
      "op": "POP"
    },
    "3997": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3998": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3999": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4000": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "POP",
      "path": "0"
    },
    "4001": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "offset": [
        9840,
        11399
      ],
      "op": "POP",
      "path": "0"
    },
    "4002": {
      "fn": "ReEncryptionValidator.computeProofChallengeScalar",
      "jump": "o",
      "offset": [
        9840,
        11399
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4003": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12863,
        13093
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4004": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12976,
        12980
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4006": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13017
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4008": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13017
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4009": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13017
      ],
      "op": "AND",
      "path": "0"
    },
    "4010": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4012": {
      "op": "NOT"
    },
    "4013": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13021,
        13035
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4014": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13021,
        13035
      ],
      "op": "ADD",
      "path": "0"
    },
    "4015": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13035
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4017": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13035
      ],
      "op": "AND",
      "path": "0"
    },
    "4018": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13035
      ],
      "op": "EQ",
      "path": "0"
    },
    "4019": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13006,
        13035
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4020": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13046,
        13089
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 81
    },
    "4021": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13046,
        13089
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4022": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13046,
        13089
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFC4"
    },
    "4025": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13046,
        13089
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4026": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13046,
        13089
      ],
      "op": "POP",
      "path": "0"
    },
    "4027": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13062,
        13089
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFC4"
    },
    "4030": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13072,
        13079
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4031": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13081,
        13088
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4032": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13062,
        13071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFCD"
    },
    "4035": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "jump": "i",
      "offset": [
        13062,
        13089
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4036": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13062,
        13089
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4037": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        13039,
        13089
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "4038": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "offset": [
        12863,
        13093
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4039": {
      "op": "POP"
    },
    "4040": {
      "op": "POP"
    },
    "4041": {
      "op": "POP"
    },
    "4042": {
      "op": "POP"
    },
    "4043": {
      "op": "POP"
    },
    "4044": {
      "fn": "ReEncryptionValidator.checkCompressedPoint",
      "jump": "o",
      "offset": [
        12863,
        13093
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4045": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13989,
        14320
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4046": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14055,
        14059
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4048": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "4054": {
      "op": "NOT"
    },
    "4055": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14116
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4056": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14116
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4057": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14116
      ],
      "op": "LT",
      "path": "0"
    },
    "4058": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14116
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4059": {
      "branch": 130,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14116
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4060": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14127
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFE5"
    },
    "4063": {
      "branch": 130,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14127
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4064": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14127
      ],
      "op": "POP",
      "path": "0"
    },
    "4065": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14126,
        14127
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4066": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14122
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4067": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14127
      ],
      "op": "LT",
      "path": "0"
    },
    "4068": {
      "branch": 131,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14120,
        14127
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4069": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14109,
        14127
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4070": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14105,
        14165
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4071": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14105,
        14165
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFF4"
    },
    "4074": {
      "branch": 131,
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14105,
        14165
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4075": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14149,
        14154
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 82,
      "value": "0x0"
    },
    "4077": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14154
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4078": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14154
      ],
      "op": "POP",
      "path": "0"
    },
    "4079": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14154
      ],
      "op": "POP",
      "path": "0"
    },
    "4080": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14154
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF9D"
    },
    "4083": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14142,
        14154
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4084": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14105,
        14165
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4085": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14175,
        14185
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4087": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14203,
        14204
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4088": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4089": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFFE"
    },
    "4092": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4093": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4094": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4095": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14199,
        14201
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4096": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14195,
        14197
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4097": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14188,
        14205
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4098": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14175,
        14205
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4099": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14175,
        14205
      ],
      "op": "POP",
      "path": "0"
    },
    "4100": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14215,
        14232
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4102": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14279,
        14280
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4103": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4104": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100D"
    },
    "4107": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4108": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4109": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4110": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14276,
        14277
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x7"
    },
    "4112": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14272,
        14273
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4113": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4114": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1017"
    },
    "4117": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4118": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4119": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4120": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14268,
        14270
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4121": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14264,
        14265
      ],
      "op": "DUP7",
      "path": "0"
    },
    "4122": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4123": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1020"
    },
    "4126": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4127": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4128": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4129": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14260,
        14262
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4130": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14256,
        14258
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4131": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14249,
        14266
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4132": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14242,
        14274
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4133": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14235,
        14281
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4134": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14298,
        14313
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 83
    },
    "4135": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14298,
        14313
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4136": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14298,
        14313
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4137": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14298,
        14313
      ],
      "op": "EQ",
      "path": "0"
    },
    "4138": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        14298,
        14313
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "4139": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "offset": [
        13989,
        14320
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4140": {
      "op": "POP"
    },
    "4141": {
      "op": "POP"
    },
    "4142": {
      "op": "POP"
    },
    "4143": {
      "op": "POP"
    },
    "4144": {
      "op": "POP"
    },
    "4145": {
      "fn": "ReEncryptionValidator.isOnCurve",
      "jump": "o",
      "offset": [
        13989,
        14320
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4146": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16099,
        16883
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4147": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16201,
        16217
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x103A"
    },
    "4150": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16201,
        16217
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180B"
    },
    "4153": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "i",
      "offset": [
        16201,
        16217
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4154": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16201,
        16217
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4155": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16277,
        16281
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4156": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16277,
        16281
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4157": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16277,
        16281
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4159": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16305,
        16309
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4160": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16305,
        16309
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4161": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16305,
        16309
      ],
      "op": "ADD",
      "path": "0"
    },
    "4162": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16305,
        16309
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4163": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16333,
        16337
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4164": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16333,
        16337
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4165": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16361,
        16365
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4166": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16361,
        16365
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4167": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16361,
        16365
      ],
      "op": "ADD",
      "path": "0"
    },
    "4168": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16361,
        16365
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4169": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "4175": {
      "op": "NOT"
    },
    "4176": {
      "offset": [
        1012,
        1078
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4177": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16277,
        16281
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4178": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16333,
        16337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4179": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16381,
        16388
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4180": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16381,
        16388
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4181": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16381,
        16388
      ],
      "op": "EQ",
      "path": "0"
    },
    "4182": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4183": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4184": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1060"
    },
    "4187": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4188": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "POP",
      "path": "0"
    },
    "4189": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16399,
        16401
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4190": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16394,
        16395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4191": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16394,
        16401
      ],
      "op": "EQ",
      "path": "0"
    },
    "4192": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16380,
        16402
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4193": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16376,
        16460
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4194": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16376,
        16460
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1095"
    },
    "4197": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16376,
        16460
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4198": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 84,
      "value": "0x1089"
    },
    "4201": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4203": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4204": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4205": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "4207": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "ADD",
      "path": "0"
    },
    "4208": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4210": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4211": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4212": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16440,
        16441
      ],
      "op": "DUP7",
      "path": "0"
    },
    "4213": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4214": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4215": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4217": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "ADD",
      "path": "0"
    },
    "4218": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16443,
        16444
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4219": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4220": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4221": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4223": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "ADD",
      "path": "0"
    },
    "4224": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16446,
        16447
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4226": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4227": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4228": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4229": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16438
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1598"
    },
    "4232": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "i",
      "offset": [
        16424,
        16449
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4233": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16424,
        16449
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4234": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "4235": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4236": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4237": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4238": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4239": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4240": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "POP",
      "path": "0"
    },
    "4241": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF9D"
    },
    "4244": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16417,
        16449
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4245": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16376,
        16460
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4246": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16469,
        16478
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4248": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16497,
        16498
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4249": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4250": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x109F"
    },
    "4253": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4254": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4255": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4256": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16494,
        16495
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4257": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16492,
        16493
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4258": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16492,
        16495
      ],
      "op": "SUB",
      "path": "0"
    },
    "4259": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16488,
        16490
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4260": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16481,
        16499
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4261": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16469,
        16499
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4262": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16469,
        16499
      ],
      "op": "POP",
      "path": "0"
    },
    "4263": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16523,
        16532
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4265": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16551,
        16552
      ],
      "op": "DUP7",
      "path": "0"
    },
    "4266": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4267": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10B0"
    },
    "4270": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4271": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4272": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4273": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16548,
        16549
      ],
      "op": "DUP7",
      "path": "0"
    },
    "4274": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16546,
        16547
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4275": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16546,
        16549
      ],
      "op": "SUB",
      "path": "0"
    },
    "4276": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16542,
        16544
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4277": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16535,
        16553
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4278": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16523,
        16553
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4279": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16523,
        16553
      ],
      "op": "POP",
      "path": "0"
    },
    "4280": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16577,
        16586
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4282": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16602,
        16603
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4283": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4284": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10C1"
    },
    "4287": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4288": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4289": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4290": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16599,
        16600
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4291": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16596,
        16597
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4292": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16589,
        16604
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4293": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16577,
        16604
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4294": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16577,
        16604
      ],
      "op": "POP",
      "path": "0"
    },
    "4295": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16625,
        16634
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4297": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16650,
        16651
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4298": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4299": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10D0"
    },
    "4302": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4303": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4304": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4305": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16647,
        16648
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4306": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16644,
        16645
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4307": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16637,
        16652
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4308": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16625,
        16652
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4309": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16625,
        16652
      ],
      "op": "POP",
      "path": "0"
    },
    "4310": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16674,
        16683
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4312": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16699,
        16700
      ],
      "op": "DUP10",
      "path": "0"
    },
    "4313": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4314": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10DF"
    },
    "4317": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4318": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4319": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4320": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16696,
        16697
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4321": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16693,
        16694
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4322": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16686,
        16701
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4323": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16674,
        16701
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4324": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16674,
        16701
      ],
      "op": "POP",
      "path": "0"
    },
    "4325": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16775,
        16776
      ],
      "op": "DUP10",
      "path": "0",
      "statement": 85
    },
    "4326": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4327": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10EC"
    },
    "4330": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4331": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4332": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4333": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16771,
        16772
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4334": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4335": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F4"
    },
    "4338": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4339": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4340": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4341": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16768,
        16769
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4342": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16764,
        16765
      ],
      "op": "DUP13",
      "path": "0"
    },
    "4343": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4344": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FD"
    },
    "4347": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4348": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4349": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4350": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16761,
        16762
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4351": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16758,
        16759
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4353": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16751,
        16766
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4354": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16744,
        16773
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4355": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16742,
        16743
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4356": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16742,
        16773
      ],
      "op": "SUB",
      "path": "0"
    },
    "4357": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16738,
        16739
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4358": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4359": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x110C"
    },
    "4362": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4363": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4364": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4365": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16735,
        16736
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4366": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16732,
        16733
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4367": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16725,
        16740
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4368": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16718,
        16777
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4369": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16711,
        16777
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4370": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16711,
        16777
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4371": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16856,
        16857
      ],
      "op": "DUP10",
      "path": "0",
      "statement": 86
    },
    "4372": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16856,
        16857
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4373": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16794,
        16858
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x111A"
    },
    "4376": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16794,
        16858
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4377": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16794,
        16858
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4378": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16794,
        16858
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4379": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16852,
        16853
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4380": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4381": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1122"
    },
    "4384": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4385": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4386": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4387": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16849,
        16850
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4388": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16846,
        16847
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4389": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16839,
        16854
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4390": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16837,
        16838
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4391": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16837,
        16854
      ],
      "op": "SUB",
      "path": "0"
    },
    "4392": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16833,
        16834
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4393": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4394": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x112F"
    },
    "4397": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4398": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4399": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4400": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16829,
        16830
      ],
      "op": "DUP13",
      "path": "0"
    },
    "4401": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4402": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1137"
    },
    "4405": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4406": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4407": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4408": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16823,
        16827
      ],
      "op": "DUP15",
      "path": "0"
    },
    "4409": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16823,
        16827
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4410": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16821,
        16827
      ],
      "op": "DUP15",
      "path": "0"
    },
    "4411": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16821,
        16827
      ],
      "op": "SUB",
      "path": "0"
    },
    "4412": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16818,
        16819
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4413": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16811,
        16831
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4414": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16808,
        16809
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4415": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16801,
        16835
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4416": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16794,
        16858
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "4417": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16791
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4419": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16791
      ],
      "op": "DUP13",
      "path": "0"
    },
    "4420": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16791
      ],
      "op": "ADD",
      "path": "0"
    },
    "4421": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16858
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4422": {
      "op": "POP"
    },
    "4423": {
      "op": "POP"
    },
    "4424": {
      "op": "POP"
    },
    "4425": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16868,
        16872
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 87,
      "value": "0x40"
    },
    "4427": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16868,
        16872
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4428": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16868,
        16872
      ],
      "op": "ADD",
      "path": "0"
    },
    "4429": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16868,
        16876
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4430": {
      "op": "POP"
    },
    "4431": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16788
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4432": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16787,
        16788
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "4433": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "offset": [
        16099,
        16883
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "4434": {
      "op": "POP"
    },
    "4435": {
      "op": "POP"
    },
    "4436": {
      "op": "POP"
    },
    "4437": {
      "op": "POP"
    },
    "4438": {
      "op": "POP"
    },
    "4439": {
      "op": "POP"
    },
    "4440": {
      "op": "POP"
    },
    "4441": {
      "fn": "ReEncryptionValidator.addAffineJacobian",
      "jump": "o",
      "offset": [
        16099,
        16883
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4442": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15239,
        15665
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4443": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15373,
        15377
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4445": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15373,
        15377
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4446": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15373,
        15377
      ],
      "op": "ADD",
      "path": "0"
    },
    "4447": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15373,
        15377
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4448": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15345,
        15349
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4450": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15345,
        15349
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4451": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15373,
        15377
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4452": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15387,
        15467
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1171"
    },
    "4455": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15387,
        15467
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4456": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15419,
        15424
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 88,
      "value": "0x0"
    },
    "4458": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15412,
        15424
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4459": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15412,
        15424
      ],
      "op": "POP",
      "path": "0"
    },
    "4460": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15412,
        15424
      ],
      "op": "POP",
      "path": "0"
    },
    "4461": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15412,
        15424
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF9D"
    },
    "4464": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15412,
        15424
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4465": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15387,
        15467
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4466": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "4472": {
      "op": "NOT"
    },
    "4473": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15477,
        15486
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4475": {
      "offset": [
        1012,
        1078
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4476": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15543,
        15545
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4477": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15539,
        15541
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4478": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15532,
        15549
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4479": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15598,
        15602
      ],
      "op": "DUP6",
      "path": "0",
      "statement": 89
    },
    "4480": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15598,
        15602
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4481": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15510,
        15549
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4482": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15510,
        15549
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4483": {
      "op": "POP"
    },
    "4484": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15592,
        15593
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4485": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15592,
        15593
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4486": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15594
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x118B"
    },
    "4489": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15594
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4490": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15594
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4491": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15594
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4492": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15573,
        15577
      ],
      "op": "DUP8",
      "path": "0"
    },
    "4493": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15573,
        15577
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4494": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15579,
        15590
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4495": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15579,
        15590
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4496": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15594
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4497": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15602
      ],
      "op": "EQ",
      "path": "0"
    },
    "4498": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4499": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15657
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4500": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11B8"
    },
    "4503": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15657
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4504": {
      "op": "POP"
    },
    "4505": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15653,
        15657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4507": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15653,
        15657
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4508": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15653,
        15657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4509": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15653,
        15657
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4510": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15647,
        15648
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4511": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15647,
        15648
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4512": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15649
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11A5"
    },
    "4515": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15649
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4516": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15649
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4517": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15649
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4518": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15643,
        15644
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4519": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4520": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11AD"
    },
    "4523": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4524": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "INVALID",
      "path": "0"
    },
    "4525": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4526": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15639,
        15641
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4527": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15626,
        15637
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4528": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15619,
        15645
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4529": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15613,
        15617
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4531": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15613,
        15617
      ],
      "op": "DUP10",
      "path": "0"
    },
    "4532": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15613,
        15617
      ],
      "op": "ADD",
      "path": "0"
    },
    "4533": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15613,
        15617
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4534": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15649
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4535": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15606,
        15657
      ],
      "op": "EQ",
      "path": "0"
    },
    "4536": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15566,
        15657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4537": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15559,
        15657
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "4538": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "offset": [
        15239,
        15665
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "4539": {
      "op": "POP"
    },
    "4540": {
      "op": "POP"
    },
    "4541": {
      "op": "POP"
    },
    "4542": {
      "op": "POP"
    },
    "4543": {
      "op": "POP"
    },
    "4544": {
      "op": "POP"
    },
    "4545": {
      "fn": "ReEncryptionValidator.eqAffineJacobian",
      "jump": "o",
      "offset": [
        15239,
        15665
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4546": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4547": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14562,
        14566
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4549": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBE"
    },
    "4567": {
      "op": "NOT"
    },
    "4568": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14562,
        14566
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4569": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4571": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14562,
        14566
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4572": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14706,
        14708
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1B"
    },
    "4574": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14712,
        14718
      ],
      "op": "DUP10",
      "path": "0"
    },
    "4575": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14712,
        14718
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4576": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14712,
        14718
      ],
      "op": "AND",
      "path": "0"
    },
    "4577": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14706,
        14719
      ],
      "op": "ADD",
      "path": "0"
    },
    "4578": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14730,
        14732
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4579": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14597,
        14663
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4580": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14758,
        14760
      ],
      "op": "DUP13",
      "path": "0"
    },
    "4581": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14750,
        14756
      ],
      "op": "DUP12",
      "path": "0"
    },
    "4582": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14743,
        14774
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "4583": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14735,
        14775
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4585": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14735,
        14775
      ],
      "op": "SHL",
      "path": "0"
    },
    "4586": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4588": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4589": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4591": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4592": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4593": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4595": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4596": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4598": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4599": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4601": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4602": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4603": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4604": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4606": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SHL",
      "path": "0"
    },
    "4607": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4608": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4609": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4611": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4612": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4613": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4615": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "AND",
      "path": "0"
    },
    "4616": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4617": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4618": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4620": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4621": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4622": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4623": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4624": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4626": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4627": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4628": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4629": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4630": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4632": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4633": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4634": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "POP",
      "path": "0"
    },
    "4635": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "POP",
      "path": "0"
    },
    "4636": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "POP",
      "path": "0"
    },
    "4637": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "POP",
      "path": "0"
    },
    "4638": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "POP",
      "path": "0"
    },
    "4639": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4641": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4643": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4644": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4646": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4647": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SUB",
      "path": "0"
    },
    "4648": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4649": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4650": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4651": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SUB",
      "path": "0"
    },
    "4652": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4653": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4654": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "GAS",
      "path": "0"
    },
    "4655": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "STATICCALL",
      "path": "0"
    },
    "4656": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4657": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4658": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4659": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1240"
    },
    "4662": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4663": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4664": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4666": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4667": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4668": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4669": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4671": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4672": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4673": {
      "op": "POP"
    },
    "4674": {
      "op": "POP"
    },
    "4675": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4677": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4678": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4679": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4681": {
      "op": "NOT"
    },
    "4682": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4683": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "ADD",
      "path": "0"
    },
    "4684": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4685": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14687,
        14776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4687": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4688": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4689": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "ADD",
      "path": "0"
    },
    "4690": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP11",
      "path": "0"
    },
    "4691": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4692": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4693": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4694": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4695": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "ADD",
      "path": "0"
    },
    "4696": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP10",
      "path": "0"
    },
    "4697": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4698": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4699": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4700": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4701": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4702": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4703": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SUB",
      "path": "0"
    },
    "4704": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4705": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "ADD",
      "path": "0"
    },
    "4706": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4707": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4708": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "4710": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4711": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4712": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "ADD",
      "path": "0"
    },
    "4713": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4714": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4715": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14829,
        14853
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4716": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4717": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4718": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4719": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4720": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4721": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "ADD",
      "path": "0"
    },
    "4722": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14819,
        14854
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4723": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4727": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4729": {
      "op": "SHL"
    },
    "4730": {
      "op": "SUB"
    },
    "4731": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14917,
        14936
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 90
    },
    "4732": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14917,
        14936
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4733": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14917,
        14936
      ],
      "op": "AND",
      "path": "0"
    },
    "4734": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14811,
        14902
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4735": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14811,
        14902
      ],
      "op": "AND",
      "path": "0"
    },
    "4736": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14917,
        14936
      ],
      "op": "EQ",
      "path": "0"
    },
    "4737": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14917,
        14936
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4738": {
      "op": "POP"
    },
    "4739": {
      "op": "POP"
    },
    "4740": {
      "op": "POP"
    },
    "4741": {
      "op": "POP"
    },
    "4742": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "4743": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4744": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "POP",
      "path": "0"
    },
    "4745": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "POP",
      "path": "0"
    },
    "4746": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "POP",
      "path": "0"
    },
    "4747": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "POP",
      "path": "0"
    },
    "4748": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "offset": [
        14424,
        14940
      ],
      "op": "POP",
      "path": "0"
    },
    "4749": {
      "fn": "ReEncryptionValidator.ecmulVerify",
      "jump": "o",
      "offset": [
        14424,
        14940
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4750": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7607,
        7784
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4751": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7744,
        7746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4753": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7732,
        7747
      ],
      "op": "ADD",
      "path": "2"
    },
    "4754": {
      "fn": "UmbralDeserializer.getPointer",
      "offset": [
        7732,
        7747
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4755": {
      "fn": "UmbralDeserializer.getPointer",
      "jump": "o",
      "offset": [
        7707,
        7778
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4756": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        7871,
        8329
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4757": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8144,
        8159
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4758": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8144,
        8159
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4759": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8203,
        8204
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "4761": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8189,
        8205
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4762": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8189,
        8205
      ],
      "op": "ADD",
      "path": "2"
    },
    "4763": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8183,
        8206
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4764": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        7960,
        7981
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "4766": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8136,
        8160
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "4767": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8136,
        8160
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4768": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8136,
        8160
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "4769": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8136,
        8160
      ],
      "op": "BYTE",
      "path": "2"
    },
    "4770": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8225,
        8243
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 91
    },
    "4771": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8225,
        8243
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4772": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8253,
        8266
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 92,
      "value": "0x20"
    },
    "4774": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8253,
        8266
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4775": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8253,
        8266
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "4776": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8253,
        8266
      ],
      "op": "ADD",
      "path": "2"
    },
    "4777": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8253,
        8275
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4778": {
      "offset": [
        1584,
        1586
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x21"
    },
    "4780": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8301,
        8322
      ],
      "op": "ADD",
      "path": "2",
      "statement": 93
    },
    "4781": {
      "fn": "UmbralDeserializer.copyPoint",
      "offset": [
        8301,
        8322
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4782": {
      "fn": "UmbralDeserializer.copyPoint",
      "jump": "o",
      "offset": [
        7871,
        8329
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4783": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8713,
        8864
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4784": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8833,
        8848
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4785": {
      "fn": "UmbralDeserializer.getBytes32",
      "offset": [
        8833,
        8848
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4786": {
      "fn": "UmbralDeserializer.getBytes32",
      "jump": "o",
      "offset": [
        8809,
        8858
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4787": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2652,
        3604
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4788": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2756,
        2785
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12BB"
    },
    "4791": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2756,
        2785
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1829"
    },
    "4794": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2756,
        2785
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4795": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2756,
        2785
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4796": {
      "offset": [
        1742,
        1787
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE4"
    },
    "4798": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2809,
        2852
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 94
    },
    "4799": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2809,
        2852
      ],
      "op": "LT",
      "path": "2"
    },
    "4800": {
      "branch": 136,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2809,
        2852
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4801": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12C9"
    },
    "4804": {
      "branch": 136,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4805": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "4807": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4808": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "REVERT",
      "path": "2"
    },
    "4809": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2801,
        2853
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4810": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2875,
        2909
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 95,
      "value": "0x12D7"
    },
    "4813": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2885,
        2893
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4814": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2895,
        2900
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4815": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2895,
        2908
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "4817": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2895,
        2908
      ],
      "op": "ADD",
      "path": "2"
    },
    "4818": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2895,
        2908
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4819": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2875,
        2884
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "4822": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2875,
        2909
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4823": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2875,
        2909
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4824": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2864,
        2909
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4825": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2864,
        2909
      ],
      "op": "POP",
      "path": "2"
    },
    "4826": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2930,
        2964
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 96,
      "value": "0x12E7"
    },
    "4829": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2940,
        2948
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4830": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2950,
        2955
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4831": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2950,
        2963
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4833": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2950,
        2963
      ],
      "op": "ADD",
      "path": "2"
    },
    "4834": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2950,
        2963
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4835": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2930,
        2939
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "4838": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2930,
        2964
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4839": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2930,
        2964
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4840": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2919,
        2964
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4841": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2919,
        2964
      ],
      "op": "POP",
      "path": "2"
    },
    "4842": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2985,
        3032
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 97,
      "value": "0x12F7"
    },
    "4845": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2995,
        3003
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4846": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3005,
        3010
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4847": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3005,
        3031
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4849": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3005,
        3031
      ],
      "op": "ADD",
      "path": "2"
    },
    "4850": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3005,
        3031
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4851": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2985,
        2994
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "4854": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        2985,
        3032
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4855": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2985,
        3032
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4856": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2974,
        3032
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4857": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2974,
        3032
      ],
      "op": "POP",
      "path": "2"
    },
    "4858": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3053,
        3093
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 98,
      "value": "0x1307"
    },
    "4861": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3063,
        3071
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4862": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3073,
        3078
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4863": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3073,
        3092
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "4865": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3073,
        3092
      ],
      "op": "ADD",
      "path": "2"
    },
    "4866": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3073,
        3092
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4867": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3053,
        3062
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1294"
    },
    "4870": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3053,
        3093
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4871": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3053,
        3093
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4872": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3042,
        3093
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4873": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3042,
        3093
      ],
      "op": "POP",
      "path": "2"
    },
    "4874": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3125,
        3145
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 99,
      "value": "0x1312"
    },
    "4877": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3136,
        3144
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4878": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3125,
        3135
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x12AF"
    },
    "4881": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3125,
        3145
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4882": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3125,
        3145
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4883": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3103,
        3114
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "4885": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3103,
        3114
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4886": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3103,
        3114
      ],
      "op": "ADD",
      "path": "2"
    },
    "4887": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3103,
        3146
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4888": {
      "offset": [
        1626,
        1628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4890": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 100
    },
    "4891": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4892": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4893": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4894": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4895": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "4897": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4898": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "ADD",
      "path": "2"
    },
    "4899": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4900": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4901": {
      "offset": [
        1546,
        1548
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4903": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3156,
        3179
      ],
      "op": "SWAP5",
      "path": "2",
      "statement": 101
    },
    "4904": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3156,
        3179
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4905": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3156,
        3179
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "4906": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3156,
        3179
      ],
      "op": "ADD",
      "path": "2"
    },
    "4907": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3156,
        3179
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "4908": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4909": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4911": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4912": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "ADD",
      "path": "2"
    },
    "4913": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4914": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4915": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "4916": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4917": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3213,
        3238
      ],
      "op": "CALLDATACOPY",
      "path": "2"
    },
    "4918": {
      "op": "POP"
    },
    "4919": {
      "op": "POP"
    },
    "4920": {
      "op": "POP"
    },
    "4921": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3210
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "4923": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3210
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4924": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3210
      ],
      "op": "ADD",
      "path": "2"
    },
    "4925": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3238
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4926": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3238
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4927": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3190,
        3238
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4928": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3316,
        3373
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 102,
      "value": "0x134C"
    },
    "4931": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3316,
        3373
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4932": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3326,
        3334
      ],
      "op": "DUP5",
      "path": "2"
    },
    "4933": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3326,
        3334
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4934": {
      "offset": [
        1626,
        1628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4936": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3316,
        3325
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168D"
    },
    "4939": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3316,
        3373
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4940": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3316,
        3373
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4941": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3305,
        3373
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4942": {
      "op": "POP"
    },
    "4943": {
      "offset": [
        1742,
        1787
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE4"
    },
    "4945": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3387,
        3429
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4946": {
      "branch": 137,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3387,
        3429
      ],
      "op": "GT",
      "path": "2"
    },
    "4947": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3383,
        3598
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4948": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3383,
        3598
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9D"
    },
    "4951": {
      "branch": 137,
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3383,
        3598
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4952": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "4954": {
      "op": "NOT"
    },
    "4955": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3472,
        3514
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 103
    },
    "4956": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3472,
        3514
      ],
      "op": "ADD",
      "path": "2"
    },
    "4957": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH8",
      "path": "2",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4966": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4967": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "GT",
      "path": "2"
    },
    "4968": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4969": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4970": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1372"
    },
    "4973": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4974": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "4976": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4977": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "REVERT",
      "path": "2"
    },
    "4978": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4979": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "POP",
      "path": "2"
    },
    "4980": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4982": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4983": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4984": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4985": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4986": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4987": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4988": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "4990": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ADD",
      "path": "2"
    },
    "4991": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "4993": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "NOT",
      "path": "2"
    },
    "4994": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "AND",
      "path": "2"
    },
    "4995": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4997": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ADD",
      "path": "2"
    },
    "4998": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP3",
      "path": "2"
    },
    "4999": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ADD",
      "path": "2"
    },
    "5000": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "5002": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5003": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5004": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "5005": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x139D"
    },
    "5008": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "5009": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5011": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP3",
      "path": "2"
    },
    "5012": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ADD",
      "path": "2"
    },
    "5013": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5014": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP1",
      "path": "2"
    },
    "5015": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "5016": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5017": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "CALLDATACOPY",
      "path": "2"
    },
    "5018": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "ADD",
      "path": "2"
    },
    "5019": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5020": {
      "op": "POP"
    },
    "5021": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3462,
        3515
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5022": {
      "op": "POP"
    },
    "5023": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3459
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "5025": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3459
      ],
      "op": "DUP3",
      "path": "2"
    },
    "5026": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3459
      ],
      "op": "ADD",
      "path": "2"
    },
    "5027": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3515
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5028": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3515
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5029": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3445,
        3515
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5030": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3565,
        3586
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 104
    },
    "5031": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3565,
        3586
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5032": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3529,
        3587
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13B2"
    },
    "5035": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3529,
        3587
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5036": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3539,
        3547
      ],
      "op": "DUP6",
      "path": "2"
    },
    "5037": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3539,
        3547
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5038": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3529,
        3538
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168D"
    },
    "5041": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "i",
      "offset": [
        3529,
        3587
      ],
      "op": "JUMP",
      "path": "2"
    },
    "5042": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3529,
        3587
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5043": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        3529,
        3587
      ],
      "op": "POP",
      "path": "2"
    },
    "5044": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2652,
        3604
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "5045": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2652,
        3604
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "5046": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2652,
        3604
      ],
      "op": "POP",
      "path": "2"
    },
    "5047": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "offset": [
        2652,
        3604
      ],
      "op": "POP",
      "path": "2"
    },
    "5048": {
      "fn": "UmbralDeserializer.toCorrectnessProof",
      "jump": "o",
      "offset": [
        2652,
        3604
      ],
      "op": "JUMP",
      "path": "2"
    },
    "5049": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11405,
        12390
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5050": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11477,
        11484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5052": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11497,
        11510
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5053": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11520,
        11533
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5055": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11703,
        11721
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5056": {
      "op": "PUSH15",
      "value": "0x3430B9B42FBA37AFB1BAB93B32B137"
    },
    "5072": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "5074": {
      "op": "SHL"
    },
    "5075": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11777,
        11781
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5077": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11769,
        11782
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5078": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11769,
        11782
      ],
      "op": "SHL",
      "path": "0"
    },
    "5079": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11784,
        11789
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5080": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5082": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5083": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5085": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5086": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5087": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5088": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5089": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5090": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5092": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5093": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5094": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5095": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5096": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5098": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5099": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5100": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5101": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5102": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5103": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5105": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5106": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5107": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5108": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5109": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5110": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5111": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5113": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5114": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "LT",
      "path": "0"
    },
    "5115": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1415"
    },
    "5118": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5119": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5120": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5121": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5122": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5123": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5125": {
      "op": "NOT"
    },
    "5126": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5127": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5128": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5129": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5130": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5132": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5133": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5134": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5135": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5136": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5137": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13F6"
    },
    "5140": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5141": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5142": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5144": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5145": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5147": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SUB",
      "path": "0"
    },
    "5148": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "5151": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "EXP",
      "path": "0"
    },
    "5152": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SUB",
      "path": "0"
    },
    "5153": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5154": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "NOT",
      "path": "0"
    },
    "5155": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5156": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5157": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "AND",
      "path": "0"
    },
    "5158": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5159": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5160": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5161": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "AND",
      "path": "0"
    },
    "5162": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5163": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5164": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "OR",
      "path": "0"
    },
    "5165": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5166": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5167": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5168": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5169": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5170": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5171": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5172": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5173": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5174": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5175": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "ADD",
      "path": "0"
    },
    "5176": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5177": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5178": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5179": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5180": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5181": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5183": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5184": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5186": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5187": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5188": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SUB",
      "path": "0"
    },
    "5189": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SUB",
      "path": "0"
    },
    "5190": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5191": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5192": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5193": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5195": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11724,
        11790
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5196": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11703,
        11790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5197": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11703,
        11790
      ],
      "op": "POP",
      "path": "0"
    },
    "5198": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11852,
        11856
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 105,
      "value": "0x0"
    },
    "5200": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11859,
        11864
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5201": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5203": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5204": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5206": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5207": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5208": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5209": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5211": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "AND",
      "path": "0"
    },
    "5212": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "5214": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SHL",
      "path": "0"
    },
    "5215": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5216": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5217": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5219": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5220": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5221": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5222": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5223": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5224": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5226": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5227": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5228": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5229": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5230": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5231": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5232": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5234": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5235": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "LT",
      "path": "0"
    },
    "5236": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x148E"
    },
    "5239": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5240": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5241": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5242": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5243": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5244": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5246": {
      "op": "NOT"
    },
    "5247": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5248": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5249": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5250": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5251": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5253": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5254": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5255": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5256": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5257": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5258": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146F"
    },
    "5261": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5262": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5263": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5265": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5266": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5268": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SUB",
      "path": "0"
    },
    "5269": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "5272": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "EXP",
      "path": "0"
    },
    "5273": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SUB",
      "path": "0"
    },
    "5274": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5275": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "NOT",
      "path": "0"
    },
    "5276": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5277": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5278": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "AND",
      "path": "0"
    },
    "5279": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5280": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5281": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5282": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "AND",
      "path": "0"
    },
    "5283": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5284": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5285": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "OR",
      "path": "0"
    },
    "5286": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5287": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5288": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5289": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5290": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5291": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5292": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5293": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5294": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5295": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5296": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "ADD",
      "path": "0"
    },
    "5297": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5298": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5299": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5300": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "POP",
      "path": "0"
    },
    "5301": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5303": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5304": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5306": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5307": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5308": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SUB",
      "path": "0"
    },
    "5309": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SUB",
      "path": "0"
    },
    "5310": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5311": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5312": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5313": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5315": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11829,
        11865
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5316": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5317": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5318": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5319": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5321": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "ADD",
      "path": "0"
    },
    "5322": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11819,
        11866
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5323": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11927,
        11931
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5325": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11934,
        11939
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5326": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5328": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5329": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5331": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5332": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5333": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5334": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5336": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "AND",
      "path": "0"
    },
    "5337": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "5339": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SHL",
      "path": "0"
    },
    "5340": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5341": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5342": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5344": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5345": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5346": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5347": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5348": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5349": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5351": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5352": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5353": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5354": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5355": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5356": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5357": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5359": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5360": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "LT",
      "path": "0"
    },
    "5361": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x150B"
    },
    "5364": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5365": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5366": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5367": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5368": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5369": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5371": {
      "op": "NOT"
    },
    "5372": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5373": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5374": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5375": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5376": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5378": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5379": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5380": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5381": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5382": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5383": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14EC"
    },
    "5386": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5387": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5388": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5389": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5390": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5391": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5393": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5394": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5395": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SUB",
      "path": "0"
    },
    "5396": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "5399": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "EXP",
      "path": "0"
    },
    "5400": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5402": {
      "op": "NOT"
    },
    "5403": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5404": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5405": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "NOT",
      "path": "0"
    },
    "5406": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5407": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5408": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "AND",
      "path": "0"
    },
    "5409": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5410": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "AND",
      "path": "0"
    },
    "5411": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "OR",
      "path": "0"
    },
    "5412": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5413": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5414": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5416": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5417": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5418": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5419": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5420": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5421": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5422": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5423": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5424": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SUB",
      "path": "0"
    },
    "5425": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5427": {
      "op": "NOT"
    },
    "5428": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "ADD",
      "path": "0"
    },
    "5429": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5430": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5431": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5432": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5433": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11904,
        11940
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5434": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5435": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5436": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5437": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "ADD",
      "path": "0"
    },
    "5438": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5439": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5440": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5441": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5442": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11801,
        11942
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5443": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11801,
        11942
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "5444": {
      "op": "POP"
    },
    "5445": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5446": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11894,
        11941
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "5447": {
      "op": "POP"
    },
    "5448": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12114,
        12149
      ],
      "op": "PUSH17",
      "path": "0",
      "value": "0x14551231950B75FC4402DA1732FC9BEC0"
    },
    "5466": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12114,
        12149
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5467": {
      "op": "POP"
    },
    "5468": {
      "op": "PUSH17",
      "value": "0x14551231950B75FC4402DA1732FC9BEBF"
    },
    "5486": {
      "op": "NOT"
    },
    "5487": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12179,
        12245
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5488": {
      "op": "POP"
    },
    "5489": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5491": {
      "op": "SWAP2"
    },
    "5492": {
      "op": "POP"
    },
    "5493": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12179,
        12245
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5494": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12179,
        12245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5495": {
      "op": "POP"
    },
    "5496": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12300,
        12305
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5497": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12292,
        12297
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5498": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12277,
        12317
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5499": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12256,
        12317
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5500": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12256,
        12317
      ],
      "op": "POP",
      "path": "0"
    },
    "5501": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12373,
        12382
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 106
    },
    "5502": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5503": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1584"
    },
    "5506": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5507": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5508": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5509": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12365,
        12370
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5510": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12345,
        12355
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5511": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12338,
        12383
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "5512": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12334,
        12335
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5514": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12334,
        12383
      ],
      "op": "ADD",
      "path": "0"
    },
    "5515": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "5516": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5517": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5518": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5519": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5520": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5521": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5522": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        12327,
        12383
      ],
      "op": "POP",
      "path": "0"
    },
    "5523": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11405,
        12390
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5524": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11405,
        12390
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5525": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11405,
        12390
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5526": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "offset": [
        11405,
        12390
      ],
      "op": "POP",
      "path": "0"
    },
    "5527": {
      "fn": "ReEncryptionValidator.extendedKeccakToBN",
      "jump": "o",
      "offset": [
        11405,
        12390
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5528": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17052,
        17679
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5529": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17117,
        17133
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15A0"
    },
    "5532": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17117,
        17133
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180B"
    },
    "5535": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "jump": "i",
      "offset": [
        17117,
        17133
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5536": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17117,
        17133
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5537": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17157,
        17161
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5539": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17157,
        17161
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5540": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17157,
        17161
      ],
      "op": "ADD",
      "path": "0"
    },
    "5541": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17157,
        17161
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5542": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17157,
        17161
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5543": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17171,
        17203
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15B0"
    },
    "5546": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17171,
        17203
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5547": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17195,
        17203
      ],
      "op": "POP",
      "path": "0",
      "statement": 107
    },
    "5548": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17195,
        17203
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1593"
    },
    "5551": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17195,
        17203
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5552": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17171,
        17203
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5553": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17258,
        17262
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5554": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17258,
        17262
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5555": {
      "op": "PUSH5",
      "value": "0x1000003D0"
    },
    "5561": {
      "op": "NOT"
    },
    "5562": {
      "offset": [
        1012,
        1078
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5563": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17213,
        17222
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5565": {
      "offset": [
        1012,
        1078
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5566": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17296,
        17300
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5568": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17296,
        17300
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5569": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17296,
        17300
      ],
      "op": "ADD",
      "path": "0"
    },
    "5570": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17296,
        17300
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5571": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17293,
        17294
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "5573": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17286,
        17304
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5574": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17272,
        17304
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5575": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17272,
        17304
      ],
      "op": "POP",
      "path": "0"
    },
    "5576": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17314,
        17326
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5578": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17346,
        17347
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5579": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5580": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15D1"
    },
    "5583": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5584": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5585": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5586": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17341,
        17344
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5587": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17336,
        17339
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5588": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17329,
        17348
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5589": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17314,
        17348
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5590": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17314,
        17348
      ],
      "op": "POP",
      "path": "0"
    },
    "5591": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17358,
        17367
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5593": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17386,
        17387
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5594": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5595": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15E0"
    },
    "5598": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5599": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5600": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5601": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17383,
        17384
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5602": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17377,
        17381
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5603": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17370,
        17388
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5604": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17358,
        17388
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5605": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17358,
        17388
      ],
      "op": "POP",
      "path": "0"
    },
    "5606": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17398,
        17407
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5608": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17437,
        17438
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5609": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5610": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15EF"
    },
    "5613": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5614": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5615": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5616": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17433,
        17434
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5617": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5618": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15F7"
    },
    "5621": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5622": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5623": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5624": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17430,
        17431
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5625": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17427,
        17428
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5626": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17420,
        17435
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5627": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17417,
        17418
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "5629": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17410,
        17439
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5630": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17398,
        17439
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5631": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17398,
        17439
      ],
      "op": "POP",
      "path": "0"
    },
    "5632": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17449,
        17458
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5634": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17507,
        17508
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5635": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5636": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1609"
    },
    "5639": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5640": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5641": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5642": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17504,
        17505
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5643": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5644": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1611"
    },
    "5647": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5648": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5649": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5650": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17501,
        17502
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5651": {
      "op": "PUSH5",
      "value": "0x1000003D2"
    },
    "5657": {
      "op": "NOT"
    },
    "5658": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17485,
        17506
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5659": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17481,
        17482
      ],
      "op": "DUP9",
      "path": "0"
    },
    "5660": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5661": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1622"
    },
    "5664": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5665": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5666": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5667": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17478,
        17479
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5668": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17475,
        17476
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5669": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17468,
        17483
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5670": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17461,
        17509
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "5671": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17519,
        17527
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 108
    },
    "5672": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17519,
        17527
      ],
      "op": "DUP11",
      "path": "0"
    },
    "5673": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17519,
        17527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5674": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17449,
        17509
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5675": {
      "op": "POP"
    },
    "5676": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17636,
        17637
      ],
      "op": "DUP7",
      "path": "0",
      "statement": 109
    },
    "5677": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17636,
        17637
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5678": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17544,
        17638
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1633"
    },
    "5681": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17544,
        17638
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5682": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17544,
        17638
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5683": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17544,
        17638
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5684": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17632,
        17633
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5685": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5686": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x163B"
    },
    "5689": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5690": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5691": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5692": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17628,
        17629
      ],
      "op": "DUP9",
      "path": "0"
    },
    "5693": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5694": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1643"
    },
    "5697": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5698": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5699": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5700": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17622,
        17626
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5701": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17616,
        17620
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5702": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17609,
        17630
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5703": {
      "op": "PUSH4",
      "value": "0x800001E9"
    },
    "5708": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5710": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5712": {
      "op": "SHL"
    },
    "5713": {
      "op": "SUB"
    },
    "5714": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17586,
        17634
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5715": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17582,
        17583
      ],
      "op": "DUP9",
      "path": "0"
    },
    "5716": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5717": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x165A"
    },
    "5720": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5721": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5722": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5723": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17578,
        17579
      ],
      "op": "DUP10",
      "path": "0"
    },
    "5724": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5725": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1662"
    },
    "5728": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5729": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5730": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5731": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17575,
        17576
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5732": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17571,
        17572
      ],
      "op": "DUP12",
      "path": "0"
    },
    "5733": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17571,
        17576
      ],
      "op": "SUB",
      "path": "0"
    },
    "5734": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17568,
        17569
      ],
      "op": "DUP8",
      "path": "0"
    },
    "5735": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17561,
        17580
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "5736": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17558,
        17559
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5737": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17551,
        17584
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5738": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17544,
        17638
      ],
      "op": "ADDMOD",
      "path": "0"
    },
    "5739": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17537,
        17541
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5741": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17537,
        17541
      ],
      "op": "DUP11",
      "path": "0"
    },
    "5742": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17537,
        17541
      ],
      "op": "ADD",
      "path": "0"
    },
    "5743": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17537,
        17638
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5744": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17670,
        17671
      ],
      "op": "DUP7",
      "path": "0",
      "statement": 110
    },
    "5745": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17670,
        17671
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5746": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17655,
        17672
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1677"
    },
    "5749": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17655,
        17672
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5750": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17655,
        17672
      ],
      "op": "INVALID",
      "path": "0"
    },
    "5751": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17655,
        17672
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5752": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17667,
        17668
      ],
      "op": "DUP9",
      "path": "0"
    },
    "5753": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17662,
        17665
      ],
      "op": "DUP7",
      "path": "0"
    },
    "5754": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17655,
        17672
      ],
      "op": "MULMOD",
      "path": "0"
    },
    "5755": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17652
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5757": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17652
      ],
      "op": "DUP11",
      "path": "0"
    },
    "5758": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17652
      ],
      "op": "ADD",
      "path": "0"
    },
    "5759": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17672
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5760": {
      "op": "POP"
    },
    "5761": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17649
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "5762": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17648,
        17649
      ],
      "op": "SWAP9",
      "path": "0"
    },
    "5763": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "offset": [
        17052,
        17679
      ],
      "op": "SWAP8",
      "path": "0"
    },
    "5764": {
      "op": "POP"
    },
    "5765": {
      "op": "POP"
    },
    "5766": {
      "op": "POP"
    },
    "5767": {
      "op": "POP"
    },
    "5768": {
      "op": "POP"
    },
    "5769": {
      "op": "POP"
    },
    "5770": {
      "op": "POP"
    },
    "5771": {
      "op": "POP"
    },
    "5772": {
      "fn": "ReEncryptionValidator.doubleJacobian",
      "jump": "o",
      "offset": [
        17052,
        17679
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5773": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5774": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9369,
        9390
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "5776": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9659,
        9661
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5778": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9654,
        9656
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "5780": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9640,
        9652
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5781": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9636,
        9657
      ],
      "op": "ADD",
      "path": "2"
    },
    "5782": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9632,
        9662
      ],
      "op": "DIV",
      "path": "2"
    },
    "5783": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9689,
        9702
      ],
      "op": "DUP5",
      "path": "2"
    },
    "5784": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9747,
        9749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5786": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9738,
        9745
      ],
      "op": "DUP6",
      "path": "2"
    },
    "5787": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9734,
        9750
      ],
      "op": "ADD",
      "path": "2"
    },
    "5788": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9794,
        9795
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "5790": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5791": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9877,
        9882
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5792": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9874,
        9875
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5793": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9871,
        9883
      ],
      "op": "LT",
      "path": "2"
    },
    "5794": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "5795": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16BA"
    },
    "5798": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "5799": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9970,
        9972
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5801": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9963,
        9973
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5802": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9963,
        9973
      ],
      "op": "MUL",
      "path": "2"
    },
    "5803": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10029,
        10048
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5804": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10029,
        10048
      ],
      "op": "DUP2",
      "path": "2"
    },
    "5805": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10029,
        10048
      ],
      "op": "ADD",
      "path": "2"
    },
    "5806": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10023,
        10049
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5807": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9997,
        10021
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5808": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9997,
        10021
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5809": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9997,
        10021
      ],
      "op": "ADD",
      "path": "2"
    },
    "5810": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9990,
        10050
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5811": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9914,
        9915
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "5813": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9907,
        9916
      ],
      "op": "ADD",
      "path": "2"
    },
    "5814": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x169E"
    },
    "5817": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "JUMP",
      "path": "2"
    },
    "5818": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9763,
        10064
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "5819": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9783,
        9797
      ],
      "op": "POP",
      "path": "2"
    },
    "5820": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9783,
        9797
      ],
      "op": "POP",
      "path": "2"
    },
    "5821": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9783,
        9797
      ],
      "op": "POP",
      "path": "2"
    },
    "5822": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9783,
        9797
      ],
      "op": "POP",
      "path": "2"
    },
    "5823": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10123,
        10124
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "5825": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10111,
        10118
      ],
      "op": "DUP4",
      "path": "2"
    },
    "5826": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10105,
        10119
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "5827": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10101,
        10103
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "5829": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10097,
        10120
      ],
      "op": "ADD",
      "path": "2"
    },
    "5830": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10088,
        10095
      ],
      "op": "DUP5",
      "path": "2"
    },
    "5831": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10084,
        10121
      ],
      "op": "ADD",
      "path": "2"
    },
    "5832": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10077,
        10125
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5833": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10176,
        10188
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 111
    },
    "5834": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10160,
        10173
      ],
      "op": "DUP5",
      "path": "2"
    },
    "5835": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10160,
        10188
      ],
      "op": "ADD",
      "path": "2"
    },
    "5836": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10144,
        10188
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "5837": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        10144,
        10188
      ],
      "op": "POP",
      "path": "2"
    },
    "5838": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "5839": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "5840": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "POP",
      "path": "2"
    },
    "5841": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "POP",
      "path": "2"
    },
    "5842": {
      "fn": "UmbralDeserializer.copyBytes",
      "offset": [
        9236,
        10195
      ],
      "op": "POP",
      "path": "2"
    },
    "5843": {
      "fn": "UmbralDeserializer.copyBytes",
      "jump": "o",
      "offset": [
        9236,
        10195
      ],
      "op": "JUMP",
      "path": "2"
    },
    "5844": {
      "op": "JUMPDEST"
    },
    "5845": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5847": {
      "op": "MLOAD"
    },
    "5848": {
      "op": "DUP1"
    },
    "5849": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5851": {
      "op": "ADD"
    },
    "5852": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5854": {
      "op": "MSTORE"
    },
    "5855": {
      "op": "DUP1"
    },
    "5856": {
      "op": "PUSH2",
      "value": "0x16E7"
    },
    "5859": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "5862": {
      "op": "JUMP"
    },
    "5863": {
      "op": "JUMPDEST"
    },
    "5864": {
      "op": "DUP2"
    },
    "5865": {
      "op": "MSTORE"
    },
    "5866": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5868": {
      "op": "ADD"
    },
    "5869": {
      "op": "PUSH2",
      "value": "0x16F4"
    },
    "5872": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "5875": {
      "op": "JUMP"
    },
    "5876": {
      "op": "JUMPDEST"
    },
    "5877": {
      "op": "DUP2"
    },
    "5878": {
      "op": "MSTORE"
    },
    "5879": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5881": {
      "op": "ADD"
    },
    "5882": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5884": {
      "op": "DUP2"
    },
    "5885": {
      "op": "MSTORE"
    },
    "5886": {
      "op": "POP"
    },
    "5887": {
      "op": "SWAP1"
    },
    "5888": {
      "op": "JUMP"
    },
    "5889": {
      "op": "JUMPDEST"
    },
    "5890": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5892": {
      "op": "MLOAD"
    },
    "5893": {
      "op": "DUP1"
    },
    "5894": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5896": {
      "op": "ADD"
    },
    "5897": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5899": {
      "op": "MSTORE"
    },
    "5900": {
      "op": "DUP1"
    },
    "5901": {
      "op": "PUSH2",
      "value": "0x1714"
    },
    "5904": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "5907": {
      "op": "JUMP"
    },
    "5908": {
      "op": "JUMPDEST"
    },
    "5909": {
      "op": "DUP2"
    },
    "5910": {
      "op": "MSTORE"
    },
    "5911": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5913": {
      "op": "ADD"
    },
    "5914": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "5917": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "5920": {
      "op": "JUMP"
    },
    "5921": {
      "op": "JUMPDEST"
    },
    "5922": {
      "op": "DUP2"
    },
    "5923": {
      "op": "MSTORE"
    },
    "5924": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5926": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5928": {
      "op": "DUP3"
    },
    "5929": {
      "op": "ADD"
    },
    "5930": {
      "op": "MSTORE"
    },
    "5931": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5933": {
      "op": "ADD"
    },
    "5934": {
      "op": "PUSH2",
      "value": "0x1735"
    },
    "5937": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "5940": {
      "op": "JUMP"
    },
    "5941": {
      "op": "JUMPDEST"
    },
    "5942": {
      "op": "DUP2"
    },
    "5943": {
      "op": "MSTORE"
    },
    "5944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5946": {
      "op": "ADD"
    },
    "5947": {
      "op": "PUSH2",
      "value": "0x1742"
    },
    "5950": {
      "op": "PUSH2",
      "value": "0x1829"
    },
    "5953": {
      "op": "JUMP"
    },
    "5954": {
      "op": "JUMPDEST"
    },
    "5955": {
      "op": "SWAP1"
    },
    "5956": {
      "op": "MSTORE"
    },
    "5957": {
      "op": "SWAP1"
    },
    "5958": {
      "op": "JUMP"
    },
    "5959": {
      "op": "JUMPDEST"
    },
    "5960": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5962": {
      "op": "MLOAD"
    },
    "5963": {
      "op": "DUP1"
    },
    "5964": {
      "op": "PUSH2",
      "value": "0x2E0"
    },
    "5967": {
      "op": "ADD"
    },
    "5968": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5970": {
      "op": "MSTORE"
    },
    "5971": {
      "op": "DUP1"
    },
    "5972": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5974": {
      "op": "DUP2"
    },
    "5975": {
      "op": "MSTORE"
    },
    "5976": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5978": {
      "op": "ADD"
    },
    "5979": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5981": {
      "op": "DUP2"
    },
    "5982": {
      "op": "MSTORE"
    },
    "5983": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5985": {
      "op": "ADD"
    },
    "5986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5988": {
      "op": "DUP2"
    },
    "5989": {
      "op": "MSTORE"
    },
    "5990": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5992": {
      "op": "ADD"
    },
    "5993": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5995": {
      "op": "DUP2"
    },
    "5996": {
      "op": "MSTORE"
    },
    "5997": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5999": {
      "op": "ADD"
    },
    "6000": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6002": {
      "op": "DUP2"
    },
    "6003": {
      "op": "MSTORE"
    },
    "6004": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6006": {
      "op": "ADD"
    },
    "6007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6009": {
      "op": "DUP2"
    },
    "6010": {
      "op": "MSTORE"
    },
    "6011": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6013": {
      "op": "ADD"
    },
    "6014": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6016": {
      "op": "DUP2"
    },
    "6017": {
      "op": "MSTORE"
    },
    "6018": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6020": {
      "op": "ADD"
    },
    "6021": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6023": {
      "op": "DUP2"
    },
    "6024": {
      "op": "MSTORE"
    },
    "6025": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6027": {
      "op": "ADD"
    },
    "6028": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6030": {
      "op": "DUP2"
    },
    "6031": {
      "op": "MSTORE"
    },
    "6032": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6034": {
      "op": "ADD"
    },
    "6035": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6037": {
      "op": "DUP2"
    },
    "6038": {
      "op": "MSTORE"
    },
    "6039": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6041": {
      "op": "ADD"
    },
    "6042": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6044": {
      "op": "DUP2"
    },
    "6045": {
      "op": "MSTORE"
    },
    "6046": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6048": {
      "op": "ADD"
    },
    "6049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6051": {
      "op": "DUP2"
    },
    "6052": {
      "op": "MSTORE"
    },
    "6053": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6055": {
      "op": "ADD"
    },
    "6056": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6058": {
      "op": "DUP2"
    },
    "6059": {
      "op": "MSTORE"
    },
    "6060": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6062": {
      "op": "ADD"
    },
    "6063": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6065": {
      "op": "DUP2"
    },
    "6066": {
      "op": "MSTORE"
    },
    "6067": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6069": {
      "op": "ADD"
    },
    "6070": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6072": {
      "op": "DUP2"
    },
    "6073": {
      "op": "MSTORE"
    },
    "6074": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6076": {
      "op": "ADD"
    },
    "6077": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6079": {
      "op": "DUP2"
    },
    "6080": {
      "op": "MSTORE"
    },
    "6081": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6083": {
      "op": "ADD"
    },
    "6084": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6086": {
      "op": "DUP2"
    },
    "6087": {
      "op": "MSTORE"
    },
    "6088": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6090": {
      "op": "ADD"
    },
    "6091": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6093": {
      "op": "DUP2"
    },
    "6094": {
      "op": "MSTORE"
    },
    "6095": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6097": {
      "op": "ADD"
    },
    "6098": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6100": {
      "op": "DUP2"
    },
    "6101": {
      "op": "MSTORE"
    },
    "6102": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6104": {
      "op": "ADD"
    },
    "6105": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6107": {
      "op": "DUP2"
    },
    "6108": {
      "op": "MSTORE"
    },
    "6109": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6111": {
      "op": "ADD"
    },
    "6112": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6114": {
      "op": "DUP1"
    },
    "6115": {
      "op": "NOT"
    },
    "6116": {
      "op": "AND"
    },
    "6117": {
      "op": "DUP2"
    },
    "6118": {
      "op": "MSTORE"
    },
    "6119": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6121": {
      "op": "ADD"
    },
    "6122": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6126": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6128": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6130": {
      "op": "SHL"
    },
    "6131": {
      "op": "SUB"
    },
    "6132": {
      "op": "AND"
    },
    "6133": {
      "op": "DUP2"
    },
    "6134": {
      "op": "MSTORE"
    },
    "6135": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6137": {
      "op": "ADD"
    },
    "6138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6142": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6144": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "6146": {
      "op": "SHL"
    },
    "6147": {
      "op": "SUB"
    },
    "6148": {
      "op": "NOT"
    },
    "6149": {
      "op": "AND"
    },
    "6150": {
      "op": "DUP2"
    },
    "6151": {
      "op": "MSTORE"
    },
    "6152": {
      "op": "POP"
    },
    "6153": {
      "op": "SWAP1"
    },
    "6154": {
      "op": "JUMP"
    },
    "6155": {
      "op": "JUMPDEST"
    },
    "6156": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6158": {
      "op": "MLOAD"
    },
    "6159": {
      "op": "DUP1"
    },
    "6160": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6162": {
      "op": "ADD"
    },
    "6163": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6165": {
      "op": "MSTORE"
    },
    "6166": {
      "op": "DUP1"
    },
    "6167": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "6169": {
      "op": "SWAP1"
    },
    "6170": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6172": {
      "op": "DUP3"
    },
    "6173": {
      "op": "MUL"
    },
    "6174": {
      "op": "DUP1"
    },
    "6175": {
      "op": "CALLDATASIZE"
    },
    "6176": {
      "op": "DUP4"
    },
    "6177": {
      "op": "CALLDATACOPY"
    },
    "6178": {
      "op": "POP"
    },
    "6179": {
      "op": "SWAP2"
    },
    "6180": {
      "op": "SWAP3"
    },
    "6181": {
      "op": "SWAP2"
    },
    "6182": {
      "op": "POP"
    },
    "6183": {
      "op": "POP"
    },
    "6184": {
      "op": "JUMP"
    },
    "6185": {
      "op": "JUMPDEST"
    },
    "6186": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6188": {
      "op": "MLOAD"
    },
    "6189": {
      "op": "DUP1"
    },
    "6190": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6192": {
      "op": "ADD"
    },
    "6193": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6195": {
      "op": "MSTORE"
    },
    "6196": {
      "op": "DUP1"
    },
    "6197": {
      "op": "PUSH2",
      "value": "0x183C"
    },
    "6200": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "6203": {
      "op": "JUMP"
    },
    "6204": {
      "op": "JUMPDEST"
    },
    "6205": {
      "op": "DUP2"
    },
    "6206": {
      "op": "MSTORE"
    },
    "6207": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6209": {
      "op": "ADD"
    },
    "6210": {
      "op": "PUSH2",
      "value": "0x1849"
    },
    "6213": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "6216": {
      "op": "JUMP"
    },
    "6217": {
      "op": "JUMPDEST"
    },
    "6218": {
      "op": "DUP2"
    },
    "6219": {
      "op": "MSTORE"
    },
    "6220": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6222": {
      "op": "ADD"
    },
    "6223": {
      "op": "PUSH2",
      "value": "0x1856"
    },
    "6226": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "6229": {
      "op": "JUMP"
    },
    "6230": {
      "op": "JUMPDEST"
    },
    "6231": {
      "op": "DUP2"
    },
    "6232": {
      "op": "MSTORE"
    },
    "6233": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6235": {
      "op": "ADD"
    },
    "6236": {
      "op": "PUSH2",
      "value": "0x1863"
    },
    "6239": {
      "op": "PUSH2",
      "value": "0x187E"
    },
    "6242": {
      "op": "JUMP"
    },
    "6243": {
      "op": "JUMPDEST"
    },
    "6244": {
      "op": "DUP2"
    },
    "6245": {
      "op": "MSTORE"
    },
    "6246": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6248": {
      "op": "ADD"
    },
    "6249": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6251": {
      "op": "DUP2"
    },
    "6252": {
      "op": "MSTORE"
    },
    "6253": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6255": {
      "op": "ADD"
    },
    "6256": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6258": {
      "op": "DUP2"
    },
    "6259": {
      "op": "MSTORE"
    },
    "6260": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6262": {
      "op": "ADD"
    },
    "6263": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6265": {
      "op": "DUP2"
    },
    "6266": {
      "op": "MSTORE"
    },
    "6267": {
      "op": "POP"
    },
    "6268": {
      "op": "SWAP1"
    },
    "6269": {
      "op": "JUMP"
    },
    "6270": {
      "op": "JUMPDEST"
    },
    "6271": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6273": {
      "op": "DUP1"
    },
    "6274": {
      "op": "MLOAD"
    },
    "6275": {
      "op": "DUP1"
    },
    "6276": {
      "op": "DUP3"
    },
    "6277": {
      "op": "ADD"
    },
    "6278": {
      "op": "SWAP1"
    },
    "6279": {
      "op": "SWAP2"
    },
    "6280": {
      "op": "MSTORE"
    },
    "6281": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6283": {
      "op": "DUP1"
    },
    "6284": {
      "op": "DUP3"
    },
    "6285": {
      "op": "MSTORE"
    },
    "6286": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6288": {
      "op": "DUP3"
    },
    "6289": {
      "op": "ADD"
    },
    "6290": {
      "op": "MSTORE"
    },
    "6291": {
      "op": "SWAP1"
    },
    "6292": {
      "op": "JUMP"
    }
  },
  "sha1": "bb6fcde46582b935f41abcfb517ba8e0ae0319c9",
  "source": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.7.0;\n\nimport \"./UmbralDeserializer.sol\";\nimport \"./SignatureVerifier.sol\";\n\n/**\n* @notice Validates re-encryption correctness.\n*/\nlibrary ReEncryptionValidator {\n\n    using UmbralDeserializer for bytes;\n\n\n    //------------------------------//\n    //   Umbral-specific constants  //\n    //------------------------------//\n\n    // See parameter `u` of `UmbralParameters` class in pyUmbral\n    // https://github.com/nucypher/pyUmbral/blob/master/umbral/params.py\n    uint8 public constant UMBRAL_PARAMETER_U_SIGN = 0x02;\n    uint256 public constant UMBRAL_PARAMETER_U_XCOORD = 0x03c98795773ff1c241fc0b1cced85e80f8366581dda5c9452175ebd41385fa1f;\n    uint256 public constant UMBRAL_PARAMETER_U_YCOORD = 0x7880ed56962d7c0ae44d6f14bb53b5fe64b31ea44a41d0316f3a598778f0f936;\n\n\n    //------------------------------//\n    // SECP256K1-specific constants //\n    //------------------------------//\n\n    // Base field order\n    uint256 constant FIELD_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n\n    // -2 mod FIELD_ORDER\n    uint256 constant MINUS_2 = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2d;\n\n    // (-1/2) mod FIELD_ORDER\n    uint256 constant MINUS_ONE_HALF = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffe17;\n\n\n    //\n\n    /**\n    * @notice Check correctness of re-encryption\n    * @param _capsuleBytes Capsule\n    * @param _cFragBytes Capsule frag\n    * @param _precomputedBytes Additional precomputed data\n    */\n    function validateCFrag(\n        bytes memory _capsuleBytes,\n        bytes memory _cFragBytes,\n        bytes memory _precomputedBytes\n    )\n        public pure returns (bool)\n    {\n        UmbralDeserializer.Capsule memory _capsule = _capsuleBytes.toCapsule();\n        UmbralDeserializer.CapsuleFrag memory _cFrag = _cFragBytes.toCapsuleFrag();\n        UmbralDeserializer.PreComputedData memory _precomputed = _precomputedBytes.toPreComputedData();\n\n        // Extract Alice's address and check that it corresponds to the one provided\n        // address alicesAddress = SignatureVerifier.recover(\n        //     _precomputed.hashedKFragValidityMessage,\n        //     abi.encodePacked(_cFrag.proof.kFragSignature, _precomputed.lostBytes[0])\n        // );\n        // require(alicesAddress == _precomputed.alicesKeyAsAddress, \"Bad KFrag signature\");\n\n        // Compute proof's challenge scalar h, used in all ZKP verification equations\n        uint256 h = computeProofChallengeScalar(_capsule, _cFrag);\n\n        //////\n        // Verifying 1st equation: z*E == h*E_1 + E_2\n        //////\n\n        // Input validation: E\n        require(checkCompressedPoint(\n            _capsule.pointE.sign,\n            _capsule.pointE.xCoord,\n            _precomputed.pointEyCoord),\n            \"Precomputed Y coordinate of E doesn't correspond to compressed E point\"\n        );\n\n        // Input validation: z*E\n        require(isOnCurve(_precomputed.pointEZxCoord, _precomputed.pointEZyCoord),\n                \"Point zE is not a valid EC point\"\n        );\n        // require(ecmulVerify(\n        //     _capsule.pointE.xCoord,         // E_x\n        //     _precomputed.pointEyCoord,      // E_y\n        //     _cFrag.proof.bnSig,             // z\n        //     _precomputed.pointEZxCoord,     // zE_x\n        //     _precomputed.pointEZyCoord),    // zE_y\n        //     \"Precomputed z*E value is incorrect\"\n        // );\n\n        // Input validation: E1\n        // require(checkCompressedPoint(\n        //     _cFrag.pointE1.sign,          // E1_sign\n        //     _cFrag.pointE1.xCoord,        // E1_x\n        //     _precomputed.pointE1yCoord),  // E1_y\n        //     \"Precomputed Y coordinate of E1 doesn't correspond to compressed E1 point\"\n        // );\n\n        // Input validation: h*E1\n        require(isOnCurve(_precomputed.pointE1HxCoord, _precomputed.pointE1HyCoord),\n                \"Point h*E1 is not a valid EC point\"\n        );\n        // require(ecmulVerify(\n        //     _cFrag.pointE1.xCoord,          // E1_x\n        //     _precomputed.pointE1yCoord,     // E1_y\n        //     h,\n        //     _precomputed.pointE1HxCoord,    // hE1_x\n        //     _precomputed.pointE1HyCoord),   // hE1_y\n        //     \"Precomputed h*E1 value is incorrect\"\n        // );\n\n        // Input validation: E2\n        // require(checkCompressedPoint(\n        //     _cFrag.proof.pointE2.sign,        // E2_sign\n        //     _cFrag.proof.pointE2.xCoord,      // E2_x\n        //     _precomputed.pointE2yCoord),      // E2_y\n        //     \"Precomputed Y coordinate of E2 doesn't correspond to compressed E2 point\"\n        // );\n\n        bool equation_holds = eqAffineJacobian(\n            [_precomputed.pointEZxCoord,  _precomputed.pointEZyCoord],\n            addAffineJacobian(\n                [_cFrag.proof.pointE2.xCoord, _precomputed.pointE2yCoord],\n                [_precomputed.pointE1HxCoord, _precomputed.pointE1HyCoord]\n            )\n        );\n\n        if (!equation_holds){\n            return false;\n        }\n\n        //////\n        // Verifying 2nd equation: z*V == h*V_1 + V_2\n        //////\n\n        // Input validation: V\n        require(checkCompressedPoint(\n            _capsule.pointV.sign,\n            _capsule.pointV.xCoord,\n            _precomputed.pointVyCoord),\n            \"Precomputed Y coordinate of V doesn't correspond to compressed V point\"\n        );\n\n        // Input validation: z*V\n        require(isOnCurve(_precomputed.pointVZxCoord, _precomputed.pointVZyCoord),\n                \"Point zV is not a valid EC point\"\n        );\n        require(ecmulVerify(\n            _capsule.pointV.xCoord,         // V_x\n            _precomputed.pointVyCoord,      // V_y\n            _cFrag.proof.bnSig,             // z\n            _precomputed.pointVZxCoord,     // zV_x\n            _precomputed.pointVZyCoord),    // zV_y\n            \"Precomputed z*V value is incorrect\"\n        );\n\n        // Input validation: V1\n        require(checkCompressedPoint(\n            _cFrag.pointV1.sign,         // V1_sign\n            _cFrag.pointV1.xCoord,       // V1_x\n            _precomputed.pointV1yCoord), // V1_y\n            \"Precomputed Y coordinate of V1 doesn't correspond to compressed V1 point\"\n        );\n\n        // Input validation: h*V1\n        require(isOnCurve(_precomputed.pointV1HxCoord, _precomputed.pointV1HyCoord),\n            \"Point h*V1 is not a valid EC point\"\n        );\n        require(ecmulVerify(\n            _cFrag.pointV1.xCoord,          // V1_x\n            _precomputed.pointV1yCoord,     // V1_y\n            h,\n            _precomputed.pointV1HxCoord,    // h*V1_x\n            _precomputed.pointV1HyCoord),   // h*V1_y\n            \"Precomputed h*V1 value is incorrect\"\n        );\n\n        // Input validation: V2\n        require(checkCompressedPoint(\n            _cFrag.proof.pointV2.sign,        // V2_sign\n            _cFrag.proof.pointV2.xCoord,      // V2_x\n            _precomputed.pointV2yCoord),      // V2_y\n            \"Precomputed Y coordinate of V2 doesn't correspond to compressed V2 point\"\n        );\n\n        equation_holds = eqAffineJacobian(\n            [_precomputed.pointVZxCoord,  _precomputed.pointVZyCoord],\n            addAffineJacobian(\n                [_cFrag.proof.pointV2.xCoord, _precomputed.pointV2yCoord],\n                [_precomputed.pointV1HxCoord, _precomputed.pointV1HyCoord]\n            )\n        );\n\n        if (!equation_holds){\n            return false;\n        }\n\n        //////\n        // Verifying 3rd equation: z*U == h*U_1 + U_2\n        //////\n\n        // We don't have to validate U since it's fixed and hard-coded\n\n        // Input validation: z*U\n        require(isOnCurve(_precomputed.pointUZxCoord, _precomputed.pointUZyCoord),\n                \"Point z*U is not a valid EC point\"\n        );\n        require(ecmulVerify(\n            UMBRAL_PARAMETER_U_XCOORD,      // U_x\n            UMBRAL_PARAMETER_U_YCOORD,      // U_y\n            _cFrag.proof.bnSig,             // z\n            _precomputed.pointUZxCoord,     // zU_x\n            _precomputed.pointUZyCoord),    // zU_y\n            \"Precomputed z*U value is incorrect\"\n        );\n\n        // Input validation: U1  (a.k.a. KFragCommitment)\n        require(checkCompressedPoint(\n            _cFrag.proof.pointKFragCommitment.sign,     // U1_sign\n            _cFrag.proof.pointKFragCommitment.xCoord,   // U1_x\n            _precomputed.pointU1yCoord),                // U1_y\n            \"Precomputed Y coordinate of U1 doesn't correspond to compressed U1 point\"\n        );\n\n        // Input validation: h*U1\n        require(isOnCurve(_precomputed.pointU1HxCoord, _precomputed.pointU1HyCoord),\n                \"Point h*U1 is not a valid EC point\"\n        );\n        require(ecmulVerify(\n            _cFrag.proof.pointKFragCommitment.xCoord,   // U1_x\n            _precomputed.pointU1yCoord,                 // U1_y\n            h,\n            _precomputed.pointU1HxCoord,    // h*V1_x\n            _precomputed.pointU1HyCoord),   // h*V1_y\n            \"Precomputed h*V1 value is incorrect\"\n        );\n\n        // Input validation: U2  (a.k.a. KFragPok (\"proof of knowledge\"))\n        require(checkCompressedPoint(\n            _cFrag.proof.pointKFragPok.sign,    // U2_sign\n            _cFrag.proof.pointKFragPok.xCoord,  // U2_x\n            _precomputed.pointU2yCoord),        // U2_y\n            \"Precomputed Y coordinate of U2 doesn't correspond to compressed U2 point\"\n        );\n\n        equation_holds = eqAffineJacobian(\n            [_precomputed.pointUZxCoord,  _precomputed.pointUZyCoord],\n            addAffineJacobian(\n                [_cFrag.proof.pointKFragPok.xCoord, _precomputed.pointU2yCoord],\n                [_precomputed.pointU1HxCoord, _precomputed.pointU1HyCoord]\n            )\n        );\n\n        return equation_holds;\n    }\n\n    function computeProofChallengeScalar(\n        UmbralDeserializer.Capsule memory _capsule,\n        UmbralDeserializer.CapsuleFrag memory _cFrag\n    ) internal pure returns (uint256) {\n\n        // Compute h = hash_to_bignum(e, e1, e2, v, v1, v2, u, u1, u2, metadata)\n        bytes memory hashInput = abi.encodePacked(\n            // Point E\n            _capsule.pointE.sign,\n            _capsule.pointE.xCoord,\n            // Point E1\n            _cFrag.pointE1.sign,\n            _cFrag.pointE1.xCoord,\n            // Point E2\n            _cFrag.proof.pointE2.sign,\n            _cFrag.proof.pointE2.xCoord\n        );\n\n        hashInput = abi.encodePacked(\n            hashInput,\n            // Point V\n            _capsule.pointV.sign,\n            _capsule.pointV.xCoord,\n            // Point V1\n            _cFrag.pointV1.sign,\n            _cFrag.pointV1.xCoord,\n            // Point V2\n            _cFrag.proof.pointV2.sign,\n            _cFrag.proof.pointV2.xCoord\n        );\n\n        hashInput = abi.encodePacked(\n            hashInput,\n            // Point U\n            bytes1(UMBRAL_PARAMETER_U_SIGN),\n            bytes32(UMBRAL_PARAMETER_U_XCOORD),\n            // Point U1\n            _cFrag.proof.pointKFragCommitment.sign,\n            _cFrag.proof.pointKFragCommitment.xCoord,\n            // Point U2\n            _cFrag.proof.pointKFragPok.sign,\n            _cFrag.proof.pointKFragPok.xCoord,\n            // Re-encryption metadata\n            _cFrag.proof.metadata\n        );\n\n        uint256 h = extendedKeccakToBN(hashInput);\n        return h;\n\n    }\n\n    function extendedKeccakToBN (bytes memory _data) internal pure returns (uint256) {\n\n        bytes32 upper;\n        bytes32 lower;\n\n        // Umbral prepends to the data a customization string of 64-bytes.\n        // In the case of hash_to_curvebn is 'hash_to_curvebn', padded with zeroes.\n        bytes memory input = abi.encodePacked(bytes32(\"hash_to_curvebn\"), bytes32(0x00), _data);\n\n        (upper, lower) = (keccak256(abi.encodePacked(uint8(0x00), input)),\n                          keccak256(abi.encodePacked(uint8(0x01), input)));\n\n        // Let n be the order of secp256k1's group (n = 2^256 - 0x1000003D1)\n        // n_minus_1 = n - 1\n        // delta = 2^256 mod n_minus_1\n        uint256 delta = 0x14551231950b75fc4402da1732fc9bec0;\n        uint256 n_minus_1 = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140;\n\n        uint256 upper_half = mulmod(uint256(upper), delta, n_minus_1);\n        return 1 + addmod(upper_half, uint256(lower), n_minus_1);\n    }\n\n    /// @notice Tests if a compressed point is valid, wrt to its corresponding Y coordinate\n    /// @param _pointSign The sign byte from the compressed notation: 0x02 if the Y coord is even; 0x03 otherwise\n    /// @param _pointX The X coordinate of an EC point in affine representation\n    /// @param _pointY The Y coordinate of an EC point in affine representation\n    /// @return true iff _pointSign and _pointX are the compressed representation of (_pointX, _pointY)\n\tfunction checkCompressedPoint(\n\t\tuint8 _pointSign,\n\t\tuint256 _pointX,\n\t\tuint256 _pointY\n\t) internal pure returns(bool) {\n\t\tbool correct_sign = _pointY % 2 == _pointSign - 2;\n\t\treturn correct_sign && isOnCurve(_pointX, _pointY);\n\t}\n\n    /// @notice Tests if the given serialized coordinates represent a valid EC point\n    /// @param _coords The concatenation of serialized X and Y coordinates\n    /// @return true iff coordinates X and Y are a valid point\n    function checkSerializedCoordinates(bytes memory _coords) internal pure returns(bool) {\n        require(_coords.length == 64, \"Serialized coordinates should be 64 B\");\n        uint256 coordX;\n        uint256 coordY;\n        assembly {\n            coordX := mload(add(_coords, 32))\n            coordY := mload(add(_coords, 64))\n        }\n\t\treturn isOnCurve(coordX, coordY);\n\t}\n\n    /// @notice Tests if a point is on the secp256k1 curve\n    /// @param Px The X coordinate of an EC point in affine representation\n    /// @param Py The Y coordinate of an EC point in affine representation\n    /// @return true if (Px, Py) is a valid secp256k1 point; false otherwise\n    function isOnCurve(uint256 Px, uint256 Py) internal pure returns (bool) {\n        uint256 p = FIELD_ORDER;\n\n        if (Px >= p || Py >= p){\n            return false;\n        }\n\n        uint256 y2 = mulmod(Py, Py, p);\n        uint256 x3_plus_7 = addmod(mulmod(mulmod(Px, Px, p), Px, p), 7, p);\n        return y2 == x3_plus_7;\n    }\n\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/4\n    function ecmulVerify(\n    \tuint256 x1,\n    \tuint256 y1,\n    \tuint256 scalar,\n    \tuint256 qx,\n    \tuint256 qy\n    ) internal pure returns(bool) {\n\t    uint256 curve_order = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n\t    address signer = ecrecover(0, uint8(27 + (y1 % 2)), bytes32(x1), bytes32(mulmod(scalar, x1, curve_order)));\n\t    address xyAddress = address(uint256(keccak256(abi.encodePacked(qx, qy))) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\t    return xyAddress == signer;\n\t}\n\n    /// @notice Equality test of two points, in affine and Jacobian coordinates respectively\n    /// @param P An EC point in affine coordinates\n    /// @param Q An EC point in Jacobian coordinates\n    /// @return true if P and Q represent the same point in affine coordinates; false otherwise\n    function eqAffineJacobian(\n    \tuint256[2] memory P,\n    \tuint256[3] memory Q\n    ) internal pure returns(bool){\n        uint256 Qz = Q[2];\n        if(Qz == 0){\n            return false;       // Q is zero but P isn't.\n        }\n\n        uint256 p = FIELD_ORDER;\n        uint256 Q_z_squared = mulmod(Qz, Qz, p);\n        return mulmod(P[0], Q_z_squared, p) == Q[0] && mulmod(P[1], mulmod(Q_z_squared, Qz, p), p) == Q[1];\n\n    }\n\n    /// @notice Adds two points in affine coordinates, with the result in Jacobian\n    /// @dev Based on the addition formulas from http://www.hyperelliptic.org/EFD/g1p/auto-code/shortw/jacobian-0/addition/add-2001-b.op3\n    /// @param P An EC point in affine coordinates\n    /// @param Q An EC point in affine coordinates\n    /// @return R An EC point in Jacobian coordinates with the sum, represented by an array of 3 uint256\n    function addAffineJacobian(\n    \tuint[2] memory P,\n    \tuint[2] memory Q\n    ) internal pure returns (uint[3] memory R) {\n\n        uint256 p = FIELD_ORDER;\n        uint256 a   = P[0];\n        uint256 c   = P[1];\n        uint256 t0  = Q[0];\n        uint256 t1  = Q[1];\n\n        if ((a == t0) && (c == t1)){\n            return doubleJacobian([a, c, 1]);\n        }\n        uint256 d = addmod(t1, p-c, p); // d = t1 - c\n        uint256 b = addmod(t0, p-a, p); // b = t0 - a\n        uint256 e = mulmod(b, b, p); // e = b^2\n        uint256 f = mulmod(e, b, p);  // f = b^3\n        uint256 g = mulmod(a, e, p);\n        R[0] = addmod(mulmod(d, d, p), p-addmod(mulmod(2, g, p), f, p), p);\n        R[1] = addmod(mulmod(d, addmod(g, p-R[0], p), p), p-mulmod(c, f, p), p);\n        R[2] = b;\n    }\n\n    /// @notice Point doubling in Jacobian coordinates\n    /// @param P An EC point in Jacobian coordinates.\n    /// @return Q An EC point in Jacobian coordinates\n    function doubleJacobian(uint[3] memory P) internal pure returns (uint[3] memory Q) {\n        uint256 z = P[2];\n        if (z == 0)\n            return Q;\n        uint256 p = FIELD_ORDER;\n        uint256 x = P[0];\n        uint256 _2y = mulmod(2, P[1], p);\n        uint256 _4yy = mulmod(_2y, _2y, p);\n        uint256 s = mulmod(_4yy, x, p);\n        uint256 m = mulmod(3, mulmod(x, x, p), p);\n        uint256 t = addmod(mulmod(m, m, p), mulmod(MINUS_2, s, p),p);\n        Q[0] = t;\n        Q[1] = addmod(mulmod(m, addmod(s, p - t, p), p), mulmod(MINUS_ONE_HALF, mulmod(_4yy, _4yy, p), p), p);\n        Q[2] = mulmod(_2y, z, p);\n    }\n}\n",
  "sourceMap": "196:17485:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/ReEncryptionValidator.sol",
  "type": "library"
}